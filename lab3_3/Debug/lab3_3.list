
lab3_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005758  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  080058f8  080058f8  000158f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a44  08005a44  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005a44  08005a44  00015a44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a4c  08005a4c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a4c  08005a4c  00015a4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a50  08005a50  00015a50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005a54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004058  20000074  08005ac8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200040cc  08005ac8  000240cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000131b5  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002b72  00000000  00000000  00033259  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001100  00000000  00000000  00035dd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fb8  00000000  00000000  00036ed0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017631  00000000  00000000  00037e88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cd07  00000000  00000000  0004f4b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00094ad4  00000000  00000000  0005c1c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f0c94  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004968  00000000  00000000  000f0d10  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080058e0 	.word	0x080058e0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	080058e0 	.word	0x080058e0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
 8000596:	60f8      	str	r0, [r7, #12]
 8000598:	60b9      	str	r1, [r7, #8]
 800059a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	4a07      	ldr	r2, [pc, #28]	; (80005bc <vApplicationGetIdleTaskMemory+0x2c>)
 80005a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005a2:	68bb      	ldr	r3, [r7, #8]
 80005a4:	4a06      	ldr	r2, [pc, #24]	; (80005c0 <vApplicationGetIdleTaskMemory+0x30>)
 80005a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	2280      	movs	r2, #128	; 0x80
 80005ac:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005ae:	bf00      	nop
 80005b0:	3714      	adds	r7, #20
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	20000090 	.word	0x20000090
 80005c0:	200000e4 	.word	0x200000e4

080005c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c4:	b5b0      	push	{r4, r5, r7, lr}
 80005c6:	b08a      	sub	sp, #40	; 0x28
 80005c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ca:	f000 fbad 	bl	8000d28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ce:	f000 f82b 	bl	8000628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d2:	f000 f8bd 	bl	8000750 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005d6:	f000 f891 	bl	80006fc <MX_USART2_UART_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of Sem */
  osSemaphoreDef(Sem);
 80005da:	2300      	movs	r3, #0
 80005dc:	623b      	str	r3, [r7, #32]
 80005de:	2300      	movs	r3, #0
 80005e0:	627b      	str	r3, [r7, #36]	; 0x24
  SemHandle = osSemaphoreCreate(osSemaphore(Sem), 1);
 80005e2:	f107 0320 	add.w	r3, r7, #32
 80005e6:	2101      	movs	r1, #1
 80005e8:	4618      	mov	r0, r3
 80005ea:	f002 fa66 	bl	8002aba <osSemaphoreCreate>
 80005ee:	4602      	mov	r2, r0
 80005f0:	4b0a      	ldr	r3, [pc, #40]	; (800061c <main+0x58>)
 80005f2:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005f4:	4b0a      	ldr	r3, [pc, #40]	; (8000620 <main+0x5c>)
 80005f6:	1d3c      	adds	r4, r7, #4
 80005f8:	461d      	mov	r5, r3
 80005fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005fe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000602:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000606:	1d3b      	adds	r3, r7, #4
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f002 f9f5 	bl	80029fa <osThreadCreate>
 8000610:	4602      	mov	r2, r0
 8000612:	4b04      	ldr	r3, [pc, #16]	; (8000624 <main+0x60>)
 8000614:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000616:	f002 f9e9 	bl	80029ec <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800061a:	e7fe      	b.n	800061a <main+0x56>
 800061c:	20004040 	.word	0x20004040
 8000620:	08005904 	.word	0x08005904
 8000624:	2000403c 	.word	0x2000403c

08000628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b094      	sub	sp, #80	; 0x50
 800062c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062e:	f107 0320 	add.w	r3, r7, #32
 8000632:	2230      	movs	r2, #48	; 0x30
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f004 fd4d 	bl	80050d6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800063c:	f107 030c 	add.w	r3, r7, #12
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]
 800064a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800064c:	2300      	movs	r3, #0
 800064e:	60bb      	str	r3, [r7, #8]
 8000650:	4b28      	ldr	r3, [pc, #160]	; (80006f4 <SystemClock_Config+0xcc>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000654:	4a27      	ldr	r2, [pc, #156]	; (80006f4 <SystemClock_Config+0xcc>)
 8000656:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800065a:	6413      	str	r3, [r2, #64]	; 0x40
 800065c:	4b25      	ldr	r3, [pc, #148]	; (80006f4 <SystemClock_Config+0xcc>)
 800065e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000664:	60bb      	str	r3, [r7, #8]
 8000666:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000668:	2300      	movs	r3, #0
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	4b22      	ldr	r3, [pc, #136]	; (80006f8 <SystemClock_Config+0xd0>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a21      	ldr	r2, [pc, #132]	; (80006f8 <SystemClock_Config+0xd0>)
 8000672:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000676:	6013      	str	r3, [r2, #0]
 8000678:	4b1f      	ldr	r3, [pc, #124]	; (80006f8 <SystemClock_Config+0xd0>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000680:	607b      	str	r3, [r7, #4]
 8000682:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000684:	2302      	movs	r3, #2
 8000686:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000688:	2301      	movs	r3, #1
 800068a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800068c:	2310      	movs	r3, #16
 800068e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000690:	2302      	movs	r3, #2
 8000692:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000694:	2300      	movs	r3, #0
 8000696:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000698:	2310      	movs	r3, #16
 800069a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800069c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006a2:	2304      	movs	r3, #4
 80006a4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006a6:	2304      	movs	r3, #4
 80006a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006aa:	f107 0320 	add.w	r3, r7, #32
 80006ae:	4618      	mov	r0, r3
 80006b0:	f000 fe14 	bl	80012dc <HAL_RCC_OscConfig>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006ba:	f000 f9cf 	bl	8000a5c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006be:	230f      	movs	r3, #15
 80006c0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c2:	2302      	movs	r3, #2
 80006c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c6:	2300      	movs	r3, #0
 80006c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d0:	2300      	movs	r3, #0
 80006d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006d4:	f107 030c 	add.w	r3, r7, #12
 80006d8:	2102      	movs	r1, #2
 80006da:	4618      	mov	r0, r3
 80006dc:	f001 f86e 	bl	80017bc <HAL_RCC_ClockConfig>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006e6:	f000 f9b9 	bl	8000a5c <Error_Handler>
  }
}
 80006ea:	bf00      	nop
 80006ec:	3750      	adds	r7, #80	; 0x50
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	40023800 	.word	0x40023800
 80006f8:	40007000 	.word	0x40007000

080006fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000700:	4b11      	ldr	r3, [pc, #68]	; (8000748 <MX_USART2_UART_Init+0x4c>)
 8000702:	4a12      	ldr	r2, [pc, #72]	; (800074c <MX_USART2_UART_Init+0x50>)
 8000704:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000706:	4b10      	ldr	r3, [pc, #64]	; (8000748 <MX_USART2_UART_Init+0x4c>)
 8000708:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800070c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800070e:	4b0e      	ldr	r3, [pc, #56]	; (8000748 <MX_USART2_UART_Init+0x4c>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000714:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <MX_USART2_UART_Init+0x4c>)
 8000716:	2200      	movs	r2, #0
 8000718:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800071a:	4b0b      	ldr	r3, [pc, #44]	; (8000748 <MX_USART2_UART_Init+0x4c>)
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000720:	4b09      	ldr	r3, [pc, #36]	; (8000748 <MX_USART2_UART_Init+0x4c>)
 8000722:	220c      	movs	r2, #12
 8000724:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000726:	4b08      	ldr	r3, [pc, #32]	; (8000748 <MX_USART2_UART_Init+0x4c>)
 8000728:	2200      	movs	r2, #0
 800072a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800072c:	4b06      	ldr	r3, [pc, #24]	; (8000748 <MX_USART2_UART_Init+0x4c>)
 800072e:	2200      	movs	r2, #0
 8000730:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000732:	4805      	ldr	r0, [pc, #20]	; (8000748 <MX_USART2_UART_Init+0x4c>)
 8000734:	f001 fc84 	bl	8002040 <HAL_UART_Init>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800073e:	f000 f98d 	bl	8000a5c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	20004044 	.word	0x20004044
 800074c:	40004400 	.word	0x40004400

08000750 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b08a      	sub	sp, #40	; 0x28
 8000754:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000756:	f107 0314 	add.w	r3, r7, #20
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	605a      	str	r2, [r3, #4]
 8000760:	609a      	str	r2, [r3, #8]
 8000762:	60da      	str	r2, [r3, #12]
 8000764:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	613b      	str	r3, [r7, #16]
 800076a:	4b2d      	ldr	r3, [pc, #180]	; (8000820 <MX_GPIO_Init+0xd0>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4a2c      	ldr	r2, [pc, #176]	; (8000820 <MX_GPIO_Init+0xd0>)
 8000770:	f043 0304 	orr.w	r3, r3, #4
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
 8000776:	4b2a      	ldr	r3, [pc, #168]	; (8000820 <MX_GPIO_Init+0xd0>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f003 0304 	and.w	r3, r3, #4
 800077e:	613b      	str	r3, [r7, #16]
 8000780:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	60fb      	str	r3, [r7, #12]
 8000786:	4b26      	ldr	r3, [pc, #152]	; (8000820 <MX_GPIO_Init+0xd0>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a25      	ldr	r2, [pc, #148]	; (8000820 <MX_GPIO_Init+0xd0>)
 800078c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b23      	ldr	r3, [pc, #140]	; (8000820 <MX_GPIO_Init+0xd0>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800079a:	60fb      	str	r3, [r7, #12]
 800079c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	60bb      	str	r3, [r7, #8]
 80007a2:	4b1f      	ldr	r3, [pc, #124]	; (8000820 <MX_GPIO_Init+0xd0>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a1e      	ldr	r2, [pc, #120]	; (8000820 <MX_GPIO_Init+0xd0>)
 80007a8:	f043 0301 	orr.w	r3, r3, #1
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b1c      	ldr	r3, [pc, #112]	; (8000820 <MX_GPIO_Init+0xd0>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	60bb      	str	r3, [r7, #8]
 80007b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	4b18      	ldr	r3, [pc, #96]	; (8000820 <MX_GPIO_Init+0xd0>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a17      	ldr	r2, [pc, #92]	; (8000820 <MX_GPIO_Init+0xd0>)
 80007c4:	f043 0302 	orr.w	r3, r3, #2
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b15      	ldr	r3, [pc, #84]	; (8000820 <MX_GPIO_Init+0xd0>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0302 	and.w	r3, r3, #2
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007d6:	2200      	movs	r2, #0
 80007d8:	2120      	movs	r1, #32
 80007da:	4812      	ldr	r0, [pc, #72]	; (8000824 <MX_GPIO_Init+0xd4>)
 80007dc:	f000 fd4a 	bl	8001274 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007e6:	4b10      	ldr	r3, [pc, #64]	; (8000828 <MX_GPIO_Init+0xd8>)
 80007e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	2300      	movs	r3, #0
 80007ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007ee:	f107 0314 	add.w	r3, r7, #20
 80007f2:	4619      	mov	r1, r3
 80007f4:	480d      	ldr	r0, [pc, #52]	; (800082c <MX_GPIO_Init+0xdc>)
 80007f6:	f000 fbbb 	bl	8000f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007fa:	2320      	movs	r3, #32
 80007fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fe:	2301      	movs	r3, #1
 8000800:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000806:	2300      	movs	r3, #0
 8000808:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800080a:	f107 0314 	add.w	r3, r7, #20
 800080e:	4619      	mov	r1, r3
 8000810:	4804      	ldr	r0, [pc, #16]	; (8000824 <MX_GPIO_Init+0xd4>)
 8000812:	f000 fbad 	bl	8000f70 <HAL_GPIO_Init>

}
 8000816:	bf00      	nop
 8000818:	3728      	adds	r7, #40	; 0x28
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	40023800 	.word	0x40023800
 8000824:	40020000 	.word	0x40020000
 8000828:	10210000 	.word	0x10210000
 800082c:	40020800 	.word	0x40020800

08000830 <led_thread>:

/* USER CODE BEGIN 4 */
void led_thread(void const *args) {
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
	while(1) {
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000838:	2120      	movs	r1, #32
 800083a:	4803      	ldr	r0, [pc, #12]	; (8000848 <led_thread+0x18>)
 800083c:	f000 fd33 	bl	80012a6 <HAL_GPIO_TogglePin>
		osDelay(18);
 8000840:	2012      	movs	r0, #18
 8000842:	f002 f926 	bl	8002a92 <osDelay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000846:	e7f7      	b.n	8000838 <led_thread+0x8>
 8000848:	40020000 	.word	0x40020000

0800084c <uart1_thread>:
	}
}
void uart1_thread(void const *args) {
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
	while(1) {
		HAL_UART_Transmit(&huart2, "A", 1, 1000);
 8000854:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000858:	2201      	movs	r2, #1
 800085a:	4904      	ldr	r1, [pc, #16]	; (800086c <uart1_thread+0x20>)
 800085c:	4804      	ldr	r0, [pc, #16]	; (8000870 <uart1_thread+0x24>)
 800085e:	f001 fc3c 	bl	80020da <HAL_UART_Transmit>
		osDelay(50);
 8000862:	2032      	movs	r0, #50	; 0x32
 8000864:	f002 f915 	bl	8002a92 <osDelay>
		HAL_UART_Transmit(&huart2, "A", 1, 1000);
 8000868:	e7f4      	b.n	8000854 <uart1_thread+0x8>
 800086a:	bf00      	nop
 800086c:	08005920 	.word	0x08005920
 8000870:	20004044 	.word	0x20004044

08000874 <uart2_thread>:
	}
}
void uart2_thread(void const *args) {
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
	while(1) {
		HAL_UART_Transmit(&huart2, "B", 1, 1000);
 800087c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000880:	2201      	movs	r2, #1
 8000882:	4904      	ldr	r1, [pc, #16]	; (8000894 <uart2_thread+0x20>)
 8000884:	4804      	ldr	r0, [pc, #16]	; (8000898 <uart2_thread+0x24>)
 8000886:	f001 fc28 	bl	80020da <HAL_UART_Transmit>
		osDelay(128);
 800088a:	2080      	movs	r0, #128	; 0x80
 800088c:	f002 f901 	bl	8002a92 <osDelay>
		HAL_UART_Transmit(&huart2, "B", 1, 1000);
 8000890:	e7f4      	b.n	800087c <uart2_thread+0x8>
 8000892:	bf00      	nop
 8000894:	08005924 	.word	0x08005924
 8000898:	20004044 	.word	0x20004044

0800089c <uartmsg1_thread>:
	}
}
void uartmsg1_thread(void const *args) {
 800089c:	b580      	push	{r7, lr}
 800089e:	b08c      	sub	sp, #48	; 0x30
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
	int threadID = 0; // threadID is 0 for one thread and 1 for
 80008a4:	2300      	movs	r3, #0
 80008a6:	62bb      	str	r3, [r7, #40]	; 0x28
	int idx = 0;
 80008a8:	2300      	movs	r3, #0
 80008aa:	62fb      	str	r3, [r7, #44]	; 0x2c
	char buffer[32];

	while(1){
		osSemaphoreWait(SemHandle, osWaitForever);
 80008ac:	4b13      	ldr	r3, [pc, #76]	; (80008fc <uartmsg1_thread+0x60>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	f04f 31ff 	mov.w	r1, #4294967295
 80008b4:	4618      	mov	r0, r3
 80008b6:	f002 f933 	bl	8002b20 <osSemaphoreWait>
		sprintf(buffer, "TID: %d %d\r\n", threadID, idx);
 80008ba:	f107 0008 	add.w	r0, r7, #8
 80008be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80008c2:	490f      	ldr	r1, [pc, #60]	; (8000900 <uartmsg1_thread+0x64>)
 80008c4:	f004 fc10 	bl	80050e8 <siprintf>
		idx ++;
 80008c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008ca:	3301      	adds	r3, #1
 80008cc:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_UART_Transmit(&huart2, &buffer, strlen(buffer), 1000);
 80008ce:	f107 0308 	add.w	r3, r7, #8
 80008d2:	4618      	mov	r0, r3
 80008d4:	f7ff fc84 	bl	80001e0 <strlen>
 80008d8:	4603      	mov	r3, r0
 80008da:	b29a      	uxth	r2, r3
 80008dc:	f107 0108 	add.w	r1, r7, #8
 80008e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008e4:	4807      	ldr	r0, [pc, #28]	; (8000904 <uartmsg1_thread+0x68>)
 80008e6:	f001 fbf8 	bl	80020da <HAL_UART_Transmit>
		osSemaphoreRelease(SemHandle);
 80008ea:	4b04      	ldr	r3, [pc, #16]	; (80008fc <uartmsg1_thread+0x60>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	4618      	mov	r0, r3
 80008f0:	f002 f964 	bl	8002bbc <osSemaphoreRelease>
		osDelay(100);
 80008f4:	2064      	movs	r0, #100	; 0x64
 80008f6:	f002 f8cc 	bl	8002a92 <osDelay>
	while(1){
 80008fa:	e7d7      	b.n	80008ac <uartmsg1_thread+0x10>
 80008fc:	20004040 	.word	0x20004040
 8000900:	08005928 	.word	0x08005928
 8000904:	20004044 	.word	0x20004044

08000908 <uartmsg2_thread>:
	}
}
void uartmsg2_thread(void const *args) {
 8000908:	b580      	push	{r7, lr}
 800090a:	b08c      	sub	sp, #48	; 0x30
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
	int threadID = 1; // threadID is 0 for one thread and 1 for
 8000910:	2301      	movs	r3, #1
 8000912:	62bb      	str	r3, [r7, #40]	; 0x28
	int idx = 0;
 8000914:	2300      	movs	r3, #0
 8000916:	62fb      	str	r3, [r7, #44]	; 0x2c
	char buffer[32];

	while(1){
		osSemaphoreWait(SemHandle, osWaitForever);
 8000918:	4b13      	ldr	r3, [pc, #76]	; (8000968 <uartmsg2_thread+0x60>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	f04f 31ff 	mov.w	r1, #4294967295
 8000920:	4618      	mov	r0, r3
 8000922:	f002 f8fd 	bl	8002b20 <osSemaphoreWait>
		sprintf(buffer, "TID: %d %d\r\n", threadID, idx);
 8000926:	f107 0008 	add.w	r0, r7, #8
 800092a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800092c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800092e:	490f      	ldr	r1, [pc, #60]	; (800096c <uartmsg2_thread+0x64>)
 8000930:	f004 fbda 	bl	80050e8 <siprintf>
		idx ++;
 8000934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000936:	3301      	adds	r3, #1
 8000938:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_UART_Transmit(&huart2, &buffer, strlen(buffer), 1000);
 800093a:	f107 0308 	add.w	r3, r7, #8
 800093e:	4618      	mov	r0, r3
 8000940:	f7ff fc4e 	bl	80001e0 <strlen>
 8000944:	4603      	mov	r3, r0
 8000946:	b29a      	uxth	r2, r3
 8000948:	f107 0108 	add.w	r1, r7, #8
 800094c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000950:	4807      	ldr	r0, [pc, #28]	; (8000970 <uartmsg2_thread+0x68>)
 8000952:	f001 fbc2 	bl	80020da <HAL_UART_Transmit>
		osSemaphoreRelease(SemHandle);
 8000956:	4b04      	ldr	r3, [pc, #16]	; (8000968 <uartmsg2_thread+0x60>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4618      	mov	r0, r3
 800095c:	f002 f92e 	bl	8002bbc <osSemaphoreRelease>
		osDelay(100);
 8000960:	2064      	movs	r0, #100	; 0x64
 8000962:	f002 f896 	bl	8002a92 <osDelay>
	while(1){
 8000966:	e7d7      	b.n	8000918 <uartmsg2_thread+0x10>
 8000968:	20004040 	.word	0x20004040
 800096c:	08005928 	.word	0x08005928
 8000970:	20004044 	.word	0x20004044

08000974 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000974:	b5b0      	push	{r4, r5, r7, lr}
 8000976:	b0a6      	sub	sp, #152	; 0x98
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	osThreadDef(led, led_thread, osPriorityNormal, 0, 128);
 800097c:	4b29      	ldr	r3, [pc, #164]	; (8000a24 <StartDefaultTask+0xb0>)
 800097e:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 8000982:	461d      	mov	r5, r3
 8000984:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000986:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000988:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800098c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	osThreadCreate(osThread(led), NULL);
 8000990:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000994:	2100      	movs	r1, #0
 8000996:	4618      	mov	r0, r3
 8000998:	f002 f82f 	bl	80029fa <osThreadCreate>
	osThreadDef(uart1, uart1_thread, osPriorityNormal, 0, 128);
 800099c:	4b22      	ldr	r3, [pc, #136]	; (8000a28 <StartDefaultTask+0xb4>)
 800099e:	f107 0460 	add.w	r4, r7, #96	; 0x60
 80009a2:	461d      	mov	r5, r3
 80009a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009a8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	osThreadCreate(osThread(uart1), NULL);
 80009b0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80009b4:	2100      	movs	r1, #0
 80009b6:	4618      	mov	r0, r3
 80009b8:	f002 f81f 	bl	80029fa <osThreadCreate>
	osThreadDef(uart2, uart2_thread, osPriorityNormal, 0, 128);
 80009bc:	4b1b      	ldr	r3, [pc, #108]	; (8000a2c <StartDefaultTask+0xb8>)
 80009be:	f107 0444 	add.w	r4, r7, #68	; 0x44
 80009c2:	461d      	mov	r5, r3
 80009c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	osThreadCreate(osThread(uart2), NULL);
 80009d0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80009d4:	2100      	movs	r1, #0
 80009d6:	4618      	mov	r0, r3
 80009d8:	f002 f80f 	bl	80029fa <osThreadCreate>

	  osThreadDef(uartmsg1, uartmsg1_thread, osPriorityNormal, 0, 128);
 80009dc:	4b14      	ldr	r3, [pc, #80]	; (8000a30 <StartDefaultTask+0xbc>)
 80009de:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80009e2:	461d      	mov	r5, r3
 80009e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  osThreadCreate(osThread(uartmsg1), NULL);
 80009f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009f4:	2100      	movs	r1, #0
 80009f6:	4618      	mov	r0, r3
 80009f8:	f001 ffff 	bl	80029fa <osThreadCreate>
	  osThreadDef(uartmsg2, uartmsg2_thread, osPriorityNormal, 0, 128);
 80009fc:	4b0d      	ldr	r3, [pc, #52]	; (8000a34 <StartDefaultTask+0xc0>)
 80009fe:	f107 040c 	add.w	r4, r7, #12
 8000a02:	461d      	mov	r5, r3
 8000a04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a08:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a0c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  osThreadCreate(osThread(uartmsg2), NULL);
 8000a10:	f107 030c 	add.w	r3, r7, #12
 8000a14:	2100      	movs	r1, #0
 8000a16:	4618      	mov	r0, r3
 8000a18:	f001 ffef 	bl	80029fa <osThreadCreate>
  /* Infinite loop */
  for(;;)
  {
	  osDelay(1);
 8000a1c:	2001      	movs	r0, #1
 8000a1e:	f002 f838 	bl	8002a92 <osDelay>
 8000a22:	e7fb      	b.n	8000a1c <StartDefaultTask+0xa8>
 8000a24:	0800593c 	.word	0x0800593c
 8000a28:	08005960 	.word	0x08005960
 8000a2c:	08005984 	.word	0x08005984
 8000a30:	080059ac 	.word	0x080059ac
 8000a34:	080059d4 	.word	0x080059d4

08000a38 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a04      	ldr	r2, [pc, #16]	; (8000a58 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d101      	bne.n	8000a4e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a4a:	f000 f98f 	bl	8000d6c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	40010000 	.word	0x40010000

08000a5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a60:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a62:	e7fe      	b.n	8000a62 <Error_Handler+0x6>

08000a64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	607b      	str	r3, [r7, #4]
 8000a6e:	4b12      	ldr	r3, [pc, #72]	; (8000ab8 <HAL_MspInit+0x54>)
 8000a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a72:	4a11      	ldr	r2, [pc, #68]	; (8000ab8 <HAL_MspInit+0x54>)
 8000a74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a78:	6453      	str	r3, [r2, #68]	; 0x44
 8000a7a:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <HAL_MspInit+0x54>)
 8000a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a82:	607b      	str	r3, [r7, #4]
 8000a84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	603b      	str	r3, [r7, #0]
 8000a8a:	4b0b      	ldr	r3, [pc, #44]	; (8000ab8 <HAL_MspInit+0x54>)
 8000a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8e:	4a0a      	ldr	r2, [pc, #40]	; (8000ab8 <HAL_MspInit+0x54>)
 8000a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a94:	6413      	str	r3, [r2, #64]	; 0x40
 8000a96:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <HAL_MspInit+0x54>)
 8000a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a9e:	603b      	str	r3, [r7, #0]
 8000aa0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	210f      	movs	r1, #15
 8000aa6:	f06f 0001 	mvn.w	r0, #1
 8000aaa:	f000 fa37 	bl	8000f1c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	3708      	adds	r7, #8
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40023800 	.word	0x40023800

08000abc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b08a      	sub	sp, #40	; 0x28
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
 8000ad2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a19      	ldr	r2, [pc, #100]	; (8000b40 <HAL_UART_MspInit+0x84>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d12b      	bne.n	8000b36 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	613b      	str	r3, [r7, #16]
 8000ae2:	4b18      	ldr	r3, [pc, #96]	; (8000b44 <HAL_UART_MspInit+0x88>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae6:	4a17      	ldr	r2, [pc, #92]	; (8000b44 <HAL_UART_MspInit+0x88>)
 8000ae8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aec:	6413      	str	r3, [r2, #64]	; 0x40
 8000aee:	4b15      	ldr	r3, [pc, #84]	; (8000b44 <HAL_UART_MspInit+0x88>)
 8000af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000af6:	613b      	str	r3, [r7, #16]
 8000af8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	60fb      	str	r3, [r7, #12]
 8000afe:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <HAL_UART_MspInit+0x88>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	4a10      	ldr	r2, [pc, #64]	; (8000b44 <HAL_UART_MspInit+0x88>)
 8000b04:	f043 0301 	orr.w	r3, r3, #1
 8000b08:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0a:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <HAL_UART_MspInit+0x88>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	f003 0301 	and.w	r3, r3, #1
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b16:	230c      	movs	r3, #12
 8000b18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b22:	2303      	movs	r3, #3
 8000b24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b26:	2307      	movs	r3, #7
 8000b28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2a:	f107 0314 	add.w	r3, r7, #20
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4805      	ldr	r0, [pc, #20]	; (8000b48 <HAL_UART_MspInit+0x8c>)
 8000b32:	f000 fa1d 	bl	8000f70 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b36:	bf00      	nop
 8000b38:	3728      	adds	r7, #40	; 0x28
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40004400 	.word	0x40004400
 8000b44:	40023800 	.word	0x40023800
 8000b48:	40020000 	.word	0x40020000

08000b4c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b08c      	sub	sp, #48	; 0x30
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b54:	2300      	movs	r3, #0
 8000b56:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	6879      	ldr	r1, [r7, #4]
 8000b60:	2019      	movs	r0, #25
 8000b62:	f000 f9db 	bl	8000f1c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000b66:	2019      	movs	r0, #25
 8000b68:	f000 f9f4 	bl	8000f54 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	60fb      	str	r3, [r7, #12]
 8000b70:	4b1e      	ldr	r3, [pc, #120]	; (8000bec <HAL_InitTick+0xa0>)
 8000b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b74:	4a1d      	ldr	r2, [pc, #116]	; (8000bec <HAL_InitTick+0xa0>)
 8000b76:	f043 0301 	orr.w	r3, r3, #1
 8000b7a:	6453      	str	r3, [r2, #68]	; 0x44
 8000b7c:	4b1b      	ldr	r3, [pc, #108]	; (8000bec <HAL_InitTick+0xa0>)
 8000b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b80:	f003 0301 	and.w	r3, r3, #1
 8000b84:	60fb      	str	r3, [r7, #12]
 8000b86:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b88:	f107 0210 	add.w	r2, r7, #16
 8000b8c:	f107 0314 	add.w	r3, r7, #20
 8000b90:	4611      	mov	r1, r2
 8000b92:	4618      	mov	r0, r3
 8000b94:	f001 f804 	bl	8001ba0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000b98:	f000 ffee 	bl	8001b78 <HAL_RCC_GetPCLK2Freq>
 8000b9c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ba0:	4a13      	ldr	r2, [pc, #76]	; (8000bf0 <HAL_InitTick+0xa4>)
 8000ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ba6:	0c9b      	lsrs	r3, r3, #18
 8000ba8:	3b01      	subs	r3, #1
 8000baa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000bac:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <HAL_InitTick+0xa8>)
 8000bae:	4a12      	ldr	r2, [pc, #72]	; (8000bf8 <HAL_InitTick+0xac>)
 8000bb0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000bb2:	4b10      	ldr	r3, [pc, #64]	; (8000bf4 <HAL_InitTick+0xa8>)
 8000bb4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bb8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000bba:	4a0e      	ldr	r2, [pc, #56]	; (8000bf4 <HAL_InitTick+0xa8>)
 8000bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bbe:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000bc0:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <HAL_InitTick+0xa8>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bc6:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <HAL_InitTick+0xa8>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000bcc:	4809      	ldr	r0, [pc, #36]	; (8000bf4 <HAL_InitTick+0xa8>)
 8000bce:	f001 f819 	bl	8001c04 <HAL_TIM_Base_Init>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d104      	bne.n	8000be2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000bd8:	4806      	ldr	r0, [pc, #24]	; (8000bf4 <HAL_InitTick+0xa8>)
 8000bda:	f001 f848 	bl	8001c6e <HAL_TIM_Base_Start_IT>
 8000bde:	4603      	mov	r3, r0
 8000be0:	e000      	b.n	8000be4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000be2:	2301      	movs	r3, #1
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3730      	adds	r7, #48	; 0x30
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	40023800 	.word	0x40023800
 8000bf0:	431bde83 	.word	0x431bde83
 8000bf4:	20004084 	.word	0x20004084
 8000bf8:	40010000 	.word	0x40010000

08000bfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c00:	e7fe      	b.n	8000c00 <NMI_Handler+0x4>

08000c02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c02:	b480      	push	{r7}
 8000c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c06:	e7fe      	b.n	8000c06 <HardFault_Handler+0x4>

08000c08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c0c:	e7fe      	b.n	8000c0c <MemManage_Handler+0x4>

08000c0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c12:	e7fe      	b.n	8000c12 <BusFault_Handler+0x4>

08000c14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c18:	e7fe      	b.n	8000c18 <UsageFault_Handler+0x4>

08000c1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr

08000c28 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c2c:	4802      	ldr	r0, [pc, #8]	; (8000c38 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000c2e:	f001 f842 	bl	8001cb6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	20004084 	.word	0x20004084

08000c3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b086      	sub	sp, #24
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c44:	4a14      	ldr	r2, [pc, #80]	; (8000c98 <_sbrk+0x5c>)
 8000c46:	4b15      	ldr	r3, [pc, #84]	; (8000c9c <_sbrk+0x60>)
 8000c48:	1ad3      	subs	r3, r2, r3
 8000c4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c50:	4b13      	ldr	r3, [pc, #76]	; (8000ca0 <_sbrk+0x64>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d102      	bne.n	8000c5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c58:	4b11      	ldr	r3, [pc, #68]	; (8000ca0 <_sbrk+0x64>)
 8000c5a:	4a12      	ldr	r2, [pc, #72]	; (8000ca4 <_sbrk+0x68>)
 8000c5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c5e:	4b10      	ldr	r3, [pc, #64]	; (8000ca0 <_sbrk+0x64>)
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4413      	add	r3, r2
 8000c66:	693a      	ldr	r2, [r7, #16]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	d207      	bcs.n	8000c7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c6c:	f004 f9fe 	bl	800506c <__errno>
 8000c70:	4602      	mov	r2, r0
 8000c72:	230c      	movs	r3, #12
 8000c74:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000c76:	f04f 33ff 	mov.w	r3, #4294967295
 8000c7a:	e009      	b.n	8000c90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c7c:	4b08      	ldr	r3, [pc, #32]	; (8000ca0 <_sbrk+0x64>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c82:	4b07      	ldr	r3, [pc, #28]	; (8000ca0 <_sbrk+0x64>)
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4413      	add	r3, r2
 8000c8a:	4a05      	ldr	r2, [pc, #20]	; (8000ca0 <_sbrk+0x64>)
 8000c8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c8e:	68fb      	ldr	r3, [r7, #12]
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3718      	adds	r7, #24
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	20020000 	.word	0x20020000
 8000c9c:	00000400 	.word	0x00000400
 8000ca0:	200002e4 	.word	0x200002e4
 8000ca4:	200040d0 	.word	0x200040d0

08000ca8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cac:	4b08      	ldr	r3, [pc, #32]	; (8000cd0 <SystemInit+0x28>)
 8000cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cb2:	4a07      	ldr	r2, [pc, #28]	; (8000cd0 <SystemInit+0x28>)
 8000cb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000cbc:	4b04      	ldr	r3, [pc, #16]	; (8000cd0 <SystemInit+0x28>)
 8000cbe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cc2:	609a      	str	r2, [r3, #8]
#endif
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	e000ed00 	.word	0xe000ed00

08000cd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d0c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000cd8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000cda:	e003      	b.n	8000ce4 <LoopCopyDataInit>

08000cdc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000cdc:	4b0c      	ldr	r3, [pc, #48]	; (8000d10 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000cde:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ce0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000ce2:	3104      	adds	r1, #4

08000ce4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ce4:	480b      	ldr	r0, [pc, #44]	; (8000d14 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000ce6:	4b0c      	ldr	r3, [pc, #48]	; (8000d18 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000ce8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000cea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000cec:	d3f6      	bcc.n	8000cdc <CopyDataInit>
  ldr  r2, =_sbss
 8000cee:	4a0b      	ldr	r2, [pc, #44]	; (8000d1c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000cf0:	e002      	b.n	8000cf8 <LoopFillZerobss>

08000cf2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000cf2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000cf4:	f842 3b04 	str.w	r3, [r2], #4

08000cf8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000cf8:	4b09      	ldr	r3, [pc, #36]	; (8000d20 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000cfa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000cfc:	d3f9      	bcc.n	8000cf2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000cfe:	f7ff ffd3 	bl	8000ca8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d02:	f004 f9b9 	bl	8005078 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d06:	f7ff fc5d 	bl	80005c4 <main>
  bx  lr    
 8000d0a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d0c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000d10:	08005a54 	.word	0x08005a54
  ldr  r0, =_sdata
 8000d14:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000d18:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8000d1c:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8000d20:	200040cc 	.word	0x200040cc

08000d24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d24:	e7fe      	b.n	8000d24 <ADC_IRQHandler>
	...

08000d28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d2c:	4b0e      	ldr	r3, [pc, #56]	; (8000d68 <HAL_Init+0x40>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a0d      	ldr	r2, [pc, #52]	; (8000d68 <HAL_Init+0x40>)
 8000d32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d38:	4b0b      	ldr	r3, [pc, #44]	; (8000d68 <HAL_Init+0x40>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a0a      	ldr	r2, [pc, #40]	; (8000d68 <HAL_Init+0x40>)
 8000d3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d44:	4b08      	ldr	r3, [pc, #32]	; (8000d68 <HAL_Init+0x40>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a07      	ldr	r2, [pc, #28]	; (8000d68 <HAL_Init+0x40>)
 8000d4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d50:	2003      	movs	r0, #3
 8000d52:	f000 f8d8 	bl	8000f06 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d56:	2000      	movs	r0, #0
 8000d58:	f7ff fef8 	bl	8000b4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d5c:	f7ff fe82 	bl	8000a64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d60:	2300      	movs	r3, #0
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	40023c00 	.word	0x40023c00

08000d6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d70:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <HAL_IncTick+0x20>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	461a      	mov	r2, r3
 8000d76:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <HAL_IncTick+0x24>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	4a04      	ldr	r2, [pc, #16]	; (8000d90 <HAL_IncTick+0x24>)
 8000d7e:	6013      	str	r3, [r2, #0]
}
 8000d80:	bf00      	nop
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	20000008 	.word	0x20000008
 8000d90:	200040c4 	.word	0x200040c4

08000d94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  return uwTick;
 8000d98:	4b03      	ldr	r3, [pc, #12]	; (8000da8 <HAL_GetTick+0x14>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	200040c4 	.word	0x200040c4

08000dac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	f003 0307 	and.w	r3, r3, #7
 8000dba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dbc:	4b0c      	ldr	r3, [pc, #48]	; (8000df0 <__NVIC_SetPriorityGrouping+0x44>)
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dc2:	68ba      	ldr	r2, [r7, #8]
 8000dc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dc8:	4013      	ands	r3, r2
 8000dca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ddc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dde:	4a04      	ldr	r2, [pc, #16]	; (8000df0 <__NVIC_SetPriorityGrouping+0x44>)
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	60d3      	str	r3, [r2, #12]
}
 8000de4:	bf00      	nop
 8000de6:	3714      	adds	r7, #20
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr
 8000df0:	e000ed00 	.word	0xe000ed00

08000df4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000df8:	4b04      	ldr	r3, [pc, #16]	; (8000e0c <__NVIC_GetPriorityGrouping+0x18>)
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	0a1b      	lsrs	r3, r3, #8
 8000dfe:	f003 0307 	and.w	r3, r3, #7
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	e000ed00 	.word	0xe000ed00

08000e10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	db0b      	blt.n	8000e3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e22:	79fb      	ldrb	r3, [r7, #7]
 8000e24:	f003 021f 	and.w	r2, r3, #31
 8000e28:	4907      	ldr	r1, [pc, #28]	; (8000e48 <__NVIC_EnableIRQ+0x38>)
 8000e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2e:	095b      	lsrs	r3, r3, #5
 8000e30:	2001      	movs	r0, #1
 8000e32:	fa00 f202 	lsl.w	r2, r0, r2
 8000e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e3a:	bf00      	nop
 8000e3c:	370c      	adds	r7, #12
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	e000e100 	.word	0xe000e100

08000e4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	6039      	str	r1, [r7, #0]
 8000e56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	db0a      	blt.n	8000e76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	b2da      	uxtb	r2, r3
 8000e64:	490c      	ldr	r1, [pc, #48]	; (8000e98 <__NVIC_SetPriority+0x4c>)
 8000e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6a:	0112      	lsls	r2, r2, #4
 8000e6c:	b2d2      	uxtb	r2, r2
 8000e6e:	440b      	add	r3, r1
 8000e70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e74:	e00a      	b.n	8000e8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	b2da      	uxtb	r2, r3
 8000e7a:	4908      	ldr	r1, [pc, #32]	; (8000e9c <__NVIC_SetPriority+0x50>)
 8000e7c:	79fb      	ldrb	r3, [r7, #7]
 8000e7e:	f003 030f 	and.w	r3, r3, #15
 8000e82:	3b04      	subs	r3, #4
 8000e84:	0112      	lsls	r2, r2, #4
 8000e86:	b2d2      	uxtb	r2, r2
 8000e88:	440b      	add	r3, r1
 8000e8a:	761a      	strb	r2, [r3, #24]
}
 8000e8c:	bf00      	nop
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	e000e100 	.word	0xe000e100
 8000e9c:	e000ed00 	.word	0xe000ed00

08000ea0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b089      	sub	sp, #36	; 0x24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	f003 0307 	and.w	r3, r3, #7
 8000eb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	f1c3 0307 	rsb	r3, r3, #7
 8000eba:	2b04      	cmp	r3, #4
 8000ebc:	bf28      	it	cs
 8000ebe:	2304      	movcs	r3, #4
 8000ec0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	3304      	adds	r3, #4
 8000ec6:	2b06      	cmp	r3, #6
 8000ec8:	d902      	bls.n	8000ed0 <NVIC_EncodePriority+0x30>
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	3b03      	subs	r3, #3
 8000ece:	e000      	b.n	8000ed2 <NVIC_EncodePriority+0x32>
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ed8:	69bb      	ldr	r3, [r7, #24]
 8000eda:	fa02 f303 	lsl.w	r3, r2, r3
 8000ede:	43da      	mvns	r2, r3
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	401a      	ands	r2, r3
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ee8:	f04f 31ff 	mov.w	r1, #4294967295
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef2:	43d9      	mvns	r1, r3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef8:	4313      	orrs	r3, r2
         );
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3724      	adds	r7, #36	; 0x24
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr

08000f06 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b082      	sub	sp, #8
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f7ff ff4c 	bl	8000dac <__NVIC_SetPriorityGrouping>
}
 8000f14:	bf00      	nop
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b086      	sub	sp, #24
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	60b9      	str	r1, [r7, #8]
 8000f26:	607a      	str	r2, [r7, #4]
 8000f28:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f2e:	f7ff ff61 	bl	8000df4 <__NVIC_GetPriorityGrouping>
 8000f32:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f34:	687a      	ldr	r2, [r7, #4]
 8000f36:	68b9      	ldr	r1, [r7, #8]
 8000f38:	6978      	ldr	r0, [r7, #20]
 8000f3a:	f7ff ffb1 	bl	8000ea0 <NVIC_EncodePriority>
 8000f3e:	4602      	mov	r2, r0
 8000f40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f44:	4611      	mov	r1, r2
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff ff80 	bl	8000e4c <__NVIC_SetPriority>
}
 8000f4c:	bf00      	nop
 8000f4e:	3718      	adds	r7, #24
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f62:	4618      	mov	r0, r3
 8000f64:	f7ff ff54 	bl	8000e10 <__NVIC_EnableIRQ>
}
 8000f68:	bf00      	nop
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b089      	sub	sp, #36	; 0x24
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f82:	2300      	movs	r3, #0
 8000f84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f86:	2300      	movs	r3, #0
 8000f88:	61fb      	str	r3, [r7, #28]
 8000f8a:	e159      	b.n	8001240 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	697a      	ldr	r2, [r7, #20]
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fa0:	693a      	ldr	r2, [r7, #16]
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	f040 8148 	bne.w	800123a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d00b      	beq.n	8000fca <HAL_GPIO_Init+0x5a>
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	2b02      	cmp	r3, #2
 8000fb8:	d007      	beq.n	8000fca <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fbe:	2b11      	cmp	r3, #17
 8000fc0:	d003      	beq.n	8000fca <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	2b12      	cmp	r3, #18
 8000fc8:	d130      	bne.n	800102c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	005b      	lsls	r3, r3, #1
 8000fd4:	2203      	movs	r2, #3
 8000fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fda:	43db      	mvns	r3, r3
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	68da      	ldr	r2, [r3, #12]
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001000:	2201      	movs	r2, #1
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	43db      	mvns	r3, r3
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	4013      	ands	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	091b      	lsrs	r3, r3, #4
 8001016:	f003 0201 	and.w	r2, r3, #1
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	4313      	orrs	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	2203      	movs	r2, #3
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	43db      	mvns	r3, r3
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	4013      	ands	r3, r2
 8001042:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	689a      	ldr	r2, [r3, #8]
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	005b      	lsls	r3, r3, #1
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	4313      	orrs	r3, r2
 8001054:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	2b02      	cmp	r3, #2
 8001062:	d003      	beq.n	800106c <HAL_GPIO_Init+0xfc>
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	2b12      	cmp	r3, #18
 800106a:	d123      	bne.n	80010b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	08da      	lsrs	r2, r3, #3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	3208      	adds	r2, #8
 8001074:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001078:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	f003 0307 	and.w	r3, r3, #7
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	220f      	movs	r2, #15
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	43db      	mvns	r3, r3
 800108a:	69ba      	ldr	r2, [r7, #24]
 800108c:	4013      	ands	r3, r2
 800108e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	691a      	ldr	r2, [r3, #16]
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	f003 0307 	and.w	r3, r3, #7
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	08da      	lsrs	r2, r3, #3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	3208      	adds	r2, #8
 80010ae:	69b9      	ldr	r1, [r7, #24]
 80010b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	2203      	movs	r2, #3
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	43db      	mvns	r3, r3
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	4013      	ands	r3, r2
 80010ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f003 0203 	and.w	r2, r3, #3
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	4313      	orrs	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	f000 80a2 	beq.w	800123a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	60fb      	str	r3, [r7, #12]
 80010fa:	4b56      	ldr	r3, [pc, #344]	; (8001254 <HAL_GPIO_Init+0x2e4>)
 80010fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fe:	4a55      	ldr	r2, [pc, #340]	; (8001254 <HAL_GPIO_Init+0x2e4>)
 8001100:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001104:	6453      	str	r3, [r2, #68]	; 0x44
 8001106:	4b53      	ldr	r3, [pc, #332]	; (8001254 <HAL_GPIO_Init+0x2e4>)
 8001108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001112:	4a51      	ldr	r2, [pc, #324]	; (8001258 <HAL_GPIO_Init+0x2e8>)
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	089b      	lsrs	r3, r3, #2
 8001118:	3302      	adds	r3, #2
 800111a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800111e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	f003 0303 	and.w	r3, r3, #3
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	220f      	movs	r2, #15
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	43db      	mvns	r3, r3
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	4013      	ands	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a48      	ldr	r2, [pc, #288]	; (800125c <HAL_GPIO_Init+0x2ec>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d019      	beq.n	8001172 <HAL_GPIO_Init+0x202>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a47      	ldr	r2, [pc, #284]	; (8001260 <HAL_GPIO_Init+0x2f0>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d013      	beq.n	800116e <HAL_GPIO_Init+0x1fe>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a46      	ldr	r2, [pc, #280]	; (8001264 <HAL_GPIO_Init+0x2f4>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d00d      	beq.n	800116a <HAL_GPIO_Init+0x1fa>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a45      	ldr	r2, [pc, #276]	; (8001268 <HAL_GPIO_Init+0x2f8>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d007      	beq.n	8001166 <HAL_GPIO_Init+0x1f6>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a44      	ldr	r2, [pc, #272]	; (800126c <HAL_GPIO_Init+0x2fc>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d101      	bne.n	8001162 <HAL_GPIO_Init+0x1f2>
 800115e:	2304      	movs	r3, #4
 8001160:	e008      	b.n	8001174 <HAL_GPIO_Init+0x204>
 8001162:	2307      	movs	r3, #7
 8001164:	e006      	b.n	8001174 <HAL_GPIO_Init+0x204>
 8001166:	2303      	movs	r3, #3
 8001168:	e004      	b.n	8001174 <HAL_GPIO_Init+0x204>
 800116a:	2302      	movs	r3, #2
 800116c:	e002      	b.n	8001174 <HAL_GPIO_Init+0x204>
 800116e:	2301      	movs	r3, #1
 8001170:	e000      	b.n	8001174 <HAL_GPIO_Init+0x204>
 8001172:	2300      	movs	r3, #0
 8001174:	69fa      	ldr	r2, [r7, #28]
 8001176:	f002 0203 	and.w	r2, r2, #3
 800117a:	0092      	lsls	r2, r2, #2
 800117c:	4093      	lsls	r3, r2
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	4313      	orrs	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001184:	4934      	ldr	r1, [pc, #208]	; (8001258 <HAL_GPIO_Init+0x2e8>)
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	089b      	lsrs	r3, r3, #2
 800118a:	3302      	adds	r3, #2
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001192:	4b37      	ldr	r3, [pc, #220]	; (8001270 <HAL_GPIO_Init+0x300>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	43db      	mvns	r3, r3
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	4013      	ands	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d003      	beq.n	80011b6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011b6:	4a2e      	ldr	r2, [pc, #184]	; (8001270 <HAL_GPIO_Init+0x300>)
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80011bc:	4b2c      	ldr	r3, [pc, #176]	; (8001270 <HAL_GPIO_Init+0x300>)
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	43db      	mvns	r3, r3
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	4013      	ands	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d003      	beq.n	80011e0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	4313      	orrs	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011e0:	4a23      	ldr	r2, [pc, #140]	; (8001270 <HAL_GPIO_Init+0x300>)
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011e6:	4b22      	ldr	r3, [pc, #136]	; (8001270 <HAL_GPIO_Init+0x300>)
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	43db      	mvns	r3, r3
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	4013      	ands	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d003      	beq.n	800120a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	4313      	orrs	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800120a:	4a19      	ldr	r2, [pc, #100]	; (8001270 <HAL_GPIO_Init+0x300>)
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001210:	4b17      	ldr	r3, [pc, #92]	; (8001270 <HAL_GPIO_Init+0x300>)
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	43db      	mvns	r3, r3
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	4013      	ands	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001228:	2b00      	cmp	r3, #0
 800122a:	d003      	beq.n	8001234 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	4313      	orrs	r3, r2
 8001232:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001234:	4a0e      	ldr	r2, [pc, #56]	; (8001270 <HAL_GPIO_Init+0x300>)
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	3301      	adds	r3, #1
 800123e:	61fb      	str	r3, [r7, #28]
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	2b0f      	cmp	r3, #15
 8001244:	f67f aea2 	bls.w	8000f8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001248:	bf00      	nop
 800124a:	3724      	adds	r7, #36	; 0x24
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr
 8001254:	40023800 	.word	0x40023800
 8001258:	40013800 	.word	0x40013800
 800125c:	40020000 	.word	0x40020000
 8001260:	40020400 	.word	0x40020400
 8001264:	40020800 	.word	0x40020800
 8001268:	40020c00 	.word	0x40020c00
 800126c:	40021000 	.word	0x40021000
 8001270:	40013c00 	.word	0x40013c00

08001274 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	460b      	mov	r3, r1
 800127e:	807b      	strh	r3, [r7, #2]
 8001280:	4613      	mov	r3, r2
 8001282:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001284:	787b      	ldrb	r3, [r7, #1]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d003      	beq.n	8001292 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800128a:	887a      	ldrh	r2, [r7, #2]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001290:	e003      	b.n	800129a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001292:	887b      	ldrh	r3, [r7, #2]
 8001294:	041a      	lsls	r2, r3, #16
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	619a      	str	r2, [r3, #24]
}
 800129a:	bf00      	nop
 800129c:	370c      	adds	r7, #12
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr

080012a6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012a6:	b480      	push	{r7}
 80012a8:	b083      	sub	sp, #12
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
 80012ae:	460b      	mov	r3, r1
 80012b0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	695a      	ldr	r2, [r3, #20]
 80012b6:	887b      	ldrh	r3, [r7, #2]
 80012b8:	401a      	ands	r2, r3
 80012ba:	887b      	ldrh	r3, [r7, #2]
 80012bc:	429a      	cmp	r2, r3
 80012be:	d104      	bne.n	80012ca <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80012c0:	887b      	ldrh	r3, [r7, #2]
 80012c2:	041a      	lsls	r2, r3, #16
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80012c8:	e002      	b.n	80012d0 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80012ca:	887a      	ldrh	r2, [r7, #2]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	619a      	str	r2, [r3, #24]
}
 80012d0:	bf00      	nop
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b086      	sub	sp, #24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d101      	bne.n	80012ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e25b      	b.n	80017a6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d075      	beq.n	80013e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012fa:	4ba3      	ldr	r3, [pc, #652]	; (8001588 <HAL_RCC_OscConfig+0x2ac>)
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	f003 030c 	and.w	r3, r3, #12
 8001302:	2b04      	cmp	r3, #4
 8001304:	d00c      	beq.n	8001320 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001306:	4ba0      	ldr	r3, [pc, #640]	; (8001588 <HAL_RCC_OscConfig+0x2ac>)
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800130e:	2b08      	cmp	r3, #8
 8001310:	d112      	bne.n	8001338 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001312:	4b9d      	ldr	r3, [pc, #628]	; (8001588 <HAL_RCC_OscConfig+0x2ac>)
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800131a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800131e:	d10b      	bne.n	8001338 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001320:	4b99      	ldr	r3, [pc, #612]	; (8001588 <HAL_RCC_OscConfig+0x2ac>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001328:	2b00      	cmp	r3, #0
 800132a:	d05b      	beq.n	80013e4 <HAL_RCC_OscConfig+0x108>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d157      	bne.n	80013e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001334:	2301      	movs	r3, #1
 8001336:	e236      	b.n	80017a6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001340:	d106      	bne.n	8001350 <HAL_RCC_OscConfig+0x74>
 8001342:	4b91      	ldr	r3, [pc, #580]	; (8001588 <HAL_RCC_OscConfig+0x2ac>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a90      	ldr	r2, [pc, #576]	; (8001588 <HAL_RCC_OscConfig+0x2ac>)
 8001348:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800134c:	6013      	str	r3, [r2, #0]
 800134e:	e01d      	b.n	800138c <HAL_RCC_OscConfig+0xb0>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001358:	d10c      	bne.n	8001374 <HAL_RCC_OscConfig+0x98>
 800135a:	4b8b      	ldr	r3, [pc, #556]	; (8001588 <HAL_RCC_OscConfig+0x2ac>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a8a      	ldr	r2, [pc, #552]	; (8001588 <HAL_RCC_OscConfig+0x2ac>)
 8001360:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001364:	6013      	str	r3, [r2, #0]
 8001366:	4b88      	ldr	r3, [pc, #544]	; (8001588 <HAL_RCC_OscConfig+0x2ac>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a87      	ldr	r2, [pc, #540]	; (8001588 <HAL_RCC_OscConfig+0x2ac>)
 800136c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001370:	6013      	str	r3, [r2, #0]
 8001372:	e00b      	b.n	800138c <HAL_RCC_OscConfig+0xb0>
 8001374:	4b84      	ldr	r3, [pc, #528]	; (8001588 <HAL_RCC_OscConfig+0x2ac>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a83      	ldr	r2, [pc, #524]	; (8001588 <HAL_RCC_OscConfig+0x2ac>)
 800137a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800137e:	6013      	str	r3, [r2, #0]
 8001380:	4b81      	ldr	r3, [pc, #516]	; (8001588 <HAL_RCC_OscConfig+0x2ac>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a80      	ldr	r2, [pc, #512]	; (8001588 <HAL_RCC_OscConfig+0x2ac>)
 8001386:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800138a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d013      	beq.n	80013bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001394:	f7ff fcfe 	bl	8000d94 <HAL_GetTick>
 8001398:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800139a:	e008      	b.n	80013ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800139c:	f7ff fcfa 	bl	8000d94 <HAL_GetTick>
 80013a0:	4602      	mov	r2, r0
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	2b64      	cmp	r3, #100	; 0x64
 80013a8:	d901      	bls.n	80013ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80013aa:	2303      	movs	r3, #3
 80013ac:	e1fb      	b.n	80017a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ae:	4b76      	ldr	r3, [pc, #472]	; (8001588 <HAL_RCC_OscConfig+0x2ac>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d0f0      	beq.n	800139c <HAL_RCC_OscConfig+0xc0>
 80013ba:	e014      	b.n	80013e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013bc:	f7ff fcea 	bl	8000d94 <HAL_GetTick>
 80013c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013c2:	e008      	b.n	80013d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013c4:	f7ff fce6 	bl	8000d94 <HAL_GetTick>
 80013c8:	4602      	mov	r2, r0
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	2b64      	cmp	r3, #100	; 0x64
 80013d0:	d901      	bls.n	80013d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013d2:	2303      	movs	r3, #3
 80013d4:	e1e7      	b.n	80017a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013d6:	4b6c      	ldr	r3, [pc, #432]	; (8001588 <HAL_RCC_OscConfig+0x2ac>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d1f0      	bne.n	80013c4 <HAL_RCC_OscConfig+0xe8>
 80013e2:	e000      	b.n	80013e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 0302 	and.w	r3, r3, #2
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d063      	beq.n	80014ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013f2:	4b65      	ldr	r3, [pc, #404]	; (8001588 <HAL_RCC_OscConfig+0x2ac>)
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	f003 030c 	and.w	r3, r3, #12
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d00b      	beq.n	8001416 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013fe:	4b62      	ldr	r3, [pc, #392]	; (8001588 <HAL_RCC_OscConfig+0x2ac>)
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001406:	2b08      	cmp	r3, #8
 8001408:	d11c      	bne.n	8001444 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800140a:	4b5f      	ldr	r3, [pc, #380]	; (8001588 <HAL_RCC_OscConfig+0x2ac>)
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d116      	bne.n	8001444 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001416:	4b5c      	ldr	r3, [pc, #368]	; (8001588 <HAL_RCC_OscConfig+0x2ac>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 0302 	and.w	r3, r3, #2
 800141e:	2b00      	cmp	r3, #0
 8001420:	d005      	beq.n	800142e <HAL_RCC_OscConfig+0x152>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	68db      	ldr	r3, [r3, #12]
 8001426:	2b01      	cmp	r3, #1
 8001428:	d001      	beq.n	800142e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e1bb      	b.n	80017a6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800142e:	4b56      	ldr	r3, [pc, #344]	; (8001588 <HAL_RCC_OscConfig+0x2ac>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	691b      	ldr	r3, [r3, #16]
 800143a:	00db      	lsls	r3, r3, #3
 800143c:	4952      	ldr	r1, [pc, #328]	; (8001588 <HAL_RCC_OscConfig+0x2ac>)
 800143e:	4313      	orrs	r3, r2
 8001440:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001442:	e03a      	b.n	80014ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d020      	beq.n	800148e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800144c:	4b4f      	ldr	r3, [pc, #316]	; (800158c <HAL_RCC_OscConfig+0x2b0>)
 800144e:	2201      	movs	r2, #1
 8001450:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001452:	f7ff fc9f 	bl	8000d94 <HAL_GetTick>
 8001456:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001458:	e008      	b.n	800146c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800145a:	f7ff fc9b 	bl	8000d94 <HAL_GetTick>
 800145e:	4602      	mov	r2, r0
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	2b02      	cmp	r3, #2
 8001466:	d901      	bls.n	800146c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001468:	2303      	movs	r3, #3
 800146a:	e19c      	b.n	80017a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800146c:	4b46      	ldr	r3, [pc, #280]	; (8001588 <HAL_RCC_OscConfig+0x2ac>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 0302 	and.w	r3, r3, #2
 8001474:	2b00      	cmp	r3, #0
 8001476:	d0f0      	beq.n	800145a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001478:	4b43      	ldr	r3, [pc, #268]	; (8001588 <HAL_RCC_OscConfig+0x2ac>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	691b      	ldr	r3, [r3, #16]
 8001484:	00db      	lsls	r3, r3, #3
 8001486:	4940      	ldr	r1, [pc, #256]	; (8001588 <HAL_RCC_OscConfig+0x2ac>)
 8001488:	4313      	orrs	r3, r2
 800148a:	600b      	str	r3, [r1, #0]
 800148c:	e015      	b.n	80014ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800148e:	4b3f      	ldr	r3, [pc, #252]	; (800158c <HAL_RCC_OscConfig+0x2b0>)
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001494:	f7ff fc7e 	bl	8000d94 <HAL_GetTick>
 8001498:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800149a:	e008      	b.n	80014ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800149c:	f7ff fc7a 	bl	8000d94 <HAL_GetTick>
 80014a0:	4602      	mov	r2, r0
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d901      	bls.n	80014ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80014aa:	2303      	movs	r3, #3
 80014ac:	e17b      	b.n	80017a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ae:	4b36      	ldr	r3, [pc, #216]	; (8001588 <HAL_RCC_OscConfig+0x2ac>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d1f0      	bne.n	800149c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0308 	and.w	r3, r3, #8
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d030      	beq.n	8001528 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	695b      	ldr	r3, [r3, #20]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d016      	beq.n	80014fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014ce:	4b30      	ldr	r3, [pc, #192]	; (8001590 <HAL_RCC_OscConfig+0x2b4>)
 80014d0:	2201      	movs	r2, #1
 80014d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014d4:	f7ff fc5e 	bl	8000d94 <HAL_GetTick>
 80014d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014da:	e008      	b.n	80014ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014dc:	f7ff fc5a 	bl	8000d94 <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d901      	bls.n	80014ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e15b      	b.n	80017a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ee:	4b26      	ldr	r3, [pc, #152]	; (8001588 <HAL_RCC_OscConfig+0x2ac>)
 80014f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014f2:	f003 0302 	and.w	r3, r3, #2
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d0f0      	beq.n	80014dc <HAL_RCC_OscConfig+0x200>
 80014fa:	e015      	b.n	8001528 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014fc:	4b24      	ldr	r3, [pc, #144]	; (8001590 <HAL_RCC_OscConfig+0x2b4>)
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001502:	f7ff fc47 	bl	8000d94 <HAL_GetTick>
 8001506:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001508:	e008      	b.n	800151c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800150a:	f7ff fc43 	bl	8000d94 <HAL_GetTick>
 800150e:	4602      	mov	r2, r0
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	2b02      	cmp	r3, #2
 8001516:	d901      	bls.n	800151c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001518:	2303      	movs	r3, #3
 800151a:	e144      	b.n	80017a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800151c:	4b1a      	ldr	r3, [pc, #104]	; (8001588 <HAL_RCC_OscConfig+0x2ac>)
 800151e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001520:	f003 0302 	and.w	r3, r3, #2
 8001524:	2b00      	cmp	r3, #0
 8001526:	d1f0      	bne.n	800150a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 0304 	and.w	r3, r3, #4
 8001530:	2b00      	cmp	r3, #0
 8001532:	f000 80a0 	beq.w	8001676 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001536:	2300      	movs	r3, #0
 8001538:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800153a:	4b13      	ldr	r3, [pc, #76]	; (8001588 <HAL_RCC_OscConfig+0x2ac>)
 800153c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d10f      	bne.n	8001566 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	60bb      	str	r3, [r7, #8]
 800154a:	4b0f      	ldr	r3, [pc, #60]	; (8001588 <HAL_RCC_OscConfig+0x2ac>)
 800154c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154e:	4a0e      	ldr	r2, [pc, #56]	; (8001588 <HAL_RCC_OscConfig+0x2ac>)
 8001550:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001554:	6413      	str	r3, [r2, #64]	; 0x40
 8001556:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <HAL_RCC_OscConfig+0x2ac>)
 8001558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800155e:	60bb      	str	r3, [r7, #8]
 8001560:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001562:	2301      	movs	r3, #1
 8001564:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001566:	4b0b      	ldr	r3, [pc, #44]	; (8001594 <HAL_RCC_OscConfig+0x2b8>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800156e:	2b00      	cmp	r3, #0
 8001570:	d121      	bne.n	80015b6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001572:	4b08      	ldr	r3, [pc, #32]	; (8001594 <HAL_RCC_OscConfig+0x2b8>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a07      	ldr	r2, [pc, #28]	; (8001594 <HAL_RCC_OscConfig+0x2b8>)
 8001578:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800157c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800157e:	f7ff fc09 	bl	8000d94 <HAL_GetTick>
 8001582:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001584:	e011      	b.n	80015aa <HAL_RCC_OscConfig+0x2ce>
 8001586:	bf00      	nop
 8001588:	40023800 	.word	0x40023800
 800158c:	42470000 	.word	0x42470000
 8001590:	42470e80 	.word	0x42470e80
 8001594:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001598:	f7ff fbfc 	bl	8000d94 <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e0fd      	b.n	80017a6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015aa:	4b81      	ldr	r3, [pc, #516]	; (80017b0 <HAL_RCC_OscConfig+0x4d4>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d0f0      	beq.n	8001598 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d106      	bne.n	80015cc <HAL_RCC_OscConfig+0x2f0>
 80015be:	4b7d      	ldr	r3, [pc, #500]	; (80017b4 <HAL_RCC_OscConfig+0x4d8>)
 80015c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c2:	4a7c      	ldr	r2, [pc, #496]	; (80017b4 <HAL_RCC_OscConfig+0x4d8>)
 80015c4:	f043 0301 	orr.w	r3, r3, #1
 80015c8:	6713      	str	r3, [r2, #112]	; 0x70
 80015ca:	e01c      	b.n	8001606 <HAL_RCC_OscConfig+0x32a>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	2b05      	cmp	r3, #5
 80015d2:	d10c      	bne.n	80015ee <HAL_RCC_OscConfig+0x312>
 80015d4:	4b77      	ldr	r3, [pc, #476]	; (80017b4 <HAL_RCC_OscConfig+0x4d8>)
 80015d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015d8:	4a76      	ldr	r2, [pc, #472]	; (80017b4 <HAL_RCC_OscConfig+0x4d8>)
 80015da:	f043 0304 	orr.w	r3, r3, #4
 80015de:	6713      	str	r3, [r2, #112]	; 0x70
 80015e0:	4b74      	ldr	r3, [pc, #464]	; (80017b4 <HAL_RCC_OscConfig+0x4d8>)
 80015e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015e4:	4a73      	ldr	r2, [pc, #460]	; (80017b4 <HAL_RCC_OscConfig+0x4d8>)
 80015e6:	f043 0301 	orr.w	r3, r3, #1
 80015ea:	6713      	str	r3, [r2, #112]	; 0x70
 80015ec:	e00b      	b.n	8001606 <HAL_RCC_OscConfig+0x32a>
 80015ee:	4b71      	ldr	r3, [pc, #452]	; (80017b4 <HAL_RCC_OscConfig+0x4d8>)
 80015f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015f2:	4a70      	ldr	r2, [pc, #448]	; (80017b4 <HAL_RCC_OscConfig+0x4d8>)
 80015f4:	f023 0301 	bic.w	r3, r3, #1
 80015f8:	6713      	str	r3, [r2, #112]	; 0x70
 80015fa:	4b6e      	ldr	r3, [pc, #440]	; (80017b4 <HAL_RCC_OscConfig+0x4d8>)
 80015fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015fe:	4a6d      	ldr	r2, [pc, #436]	; (80017b4 <HAL_RCC_OscConfig+0x4d8>)
 8001600:	f023 0304 	bic.w	r3, r3, #4
 8001604:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d015      	beq.n	800163a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800160e:	f7ff fbc1 	bl	8000d94 <HAL_GetTick>
 8001612:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001614:	e00a      	b.n	800162c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001616:	f7ff fbbd 	bl	8000d94 <HAL_GetTick>
 800161a:	4602      	mov	r2, r0
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	f241 3288 	movw	r2, #5000	; 0x1388
 8001624:	4293      	cmp	r3, r2
 8001626:	d901      	bls.n	800162c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	e0bc      	b.n	80017a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800162c:	4b61      	ldr	r3, [pc, #388]	; (80017b4 <HAL_RCC_OscConfig+0x4d8>)
 800162e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001630:	f003 0302 	and.w	r3, r3, #2
 8001634:	2b00      	cmp	r3, #0
 8001636:	d0ee      	beq.n	8001616 <HAL_RCC_OscConfig+0x33a>
 8001638:	e014      	b.n	8001664 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800163a:	f7ff fbab 	bl	8000d94 <HAL_GetTick>
 800163e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001640:	e00a      	b.n	8001658 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001642:	f7ff fba7 	bl	8000d94 <HAL_GetTick>
 8001646:	4602      	mov	r2, r0
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001650:	4293      	cmp	r3, r2
 8001652:	d901      	bls.n	8001658 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e0a6      	b.n	80017a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001658:	4b56      	ldr	r3, [pc, #344]	; (80017b4 <HAL_RCC_OscConfig+0x4d8>)
 800165a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800165c:	f003 0302 	and.w	r3, r3, #2
 8001660:	2b00      	cmp	r3, #0
 8001662:	d1ee      	bne.n	8001642 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001664:	7dfb      	ldrb	r3, [r7, #23]
 8001666:	2b01      	cmp	r3, #1
 8001668:	d105      	bne.n	8001676 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800166a:	4b52      	ldr	r3, [pc, #328]	; (80017b4 <HAL_RCC_OscConfig+0x4d8>)
 800166c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166e:	4a51      	ldr	r2, [pc, #324]	; (80017b4 <HAL_RCC_OscConfig+0x4d8>)
 8001670:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001674:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	699b      	ldr	r3, [r3, #24]
 800167a:	2b00      	cmp	r3, #0
 800167c:	f000 8092 	beq.w	80017a4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001680:	4b4c      	ldr	r3, [pc, #304]	; (80017b4 <HAL_RCC_OscConfig+0x4d8>)
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	f003 030c 	and.w	r3, r3, #12
 8001688:	2b08      	cmp	r3, #8
 800168a:	d05c      	beq.n	8001746 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	699b      	ldr	r3, [r3, #24]
 8001690:	2b02      	cmp	r3, #2
 8001692:	d141      	bne.n	8001718 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001694:	4b48      	ldr	r3, [pc, #288]	; (80017b8 <HAL_RCC_OscConfig+0x4dc>)
 8001696:	2200      	movs	r2, #0
 8001698:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800169a:	f7ff fb7b 	bl	8000d94 <HAL_GetTick>
 800169e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016a0:	e008      	b.n	80016b4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016a2:	f7ff fb77 	bl	8000d94 <HAL_GetTick>
 80016a6:	4602      	mov	r2, r0
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	d901      	bls.n	80016b4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80016b0:	2303      	movs	r3, #3
 80016b2:	e078      	b.n	80017a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016b4:	4b3f      	ldr	r3, [pc, #252]	; (80017b4 <HAL_RCC_OscConfig+0x4d8>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d1f0      	bne.n	80016a2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	69da      	ldr	r2, [r3, #28]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6a1b      	ldr	r3, [r3, #32]
 80016c8:	431a      	orrs	r2, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ce:	019b      	lsls	r3, r3, #6
 80016d0:	431a      	orrs	r2, r3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d6:	085b      	lsrs	r3, r3, #1
 80016d8:	3b01      	subs	r3, #1
 80016da:	041b      	lsls	r3, r3, #16
 80016dc:	431a      	orrs	r2, r3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e2:	061b      	lsls	r3, r3, #24
 80016e4:	4933      	ldr	r1, [pc, #204]	; (80017b4 <HAL_RCC_OscConfig+0x4d8>)
 80016e6:	4313      	orrs	r3, r2
 80016e8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016ea:	4b33      	ldr	r3, [pc, #204]	; (80017b8 <HAL_RCC_OscConfig+0x4dc>)
 80016ec:	2201      	movs	r2, #1
 80016ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f0:	f7ff fb50 	bl	8000d94 <HAL_GetTick>
 80016f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016f6:	e008      	b.n	800170a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016f8:	f7ff fb4c 	bl	8000d94 <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	2b02      	cmp	r3, #2
 8001704:	d901      	bls.n	800170a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e04d      	b.n	80017a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800170a:	4b2a      	ldr	r3, [pc, #168]	; (80017b4 <HAL_RCC_OscConfig+0x4d8>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d0f0      	beq.n	80016f8 <HAL_RCC_OscConfig+0x41c>
 8001716:	e045      	b.n	80017a4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001718:	4b27      	ldr	r3, [pc, #156]	; (80017b8 <HAL_RCC_OscConfig+0x4dc>)
 800171a:	2200      	movs	r2, #0
 800171c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800171e:	f7ff fb39 	bl	8000d94 <HAL_GetTick>
 8001722:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001724:	e008      	b.n	8001738 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001726:	f7ff fb35 	bl	8000d94 <HAL_GetTick>
 800172a:	4602      	mov	r2, r0
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	2b02      	cmp	r3, #2
 8001732:	d901      	bls.n	8001738 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001734:	2303      	movs	r3, #3
 8001736:	e036      	b.n	80017a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001738:	4b1e      	ldr	r3, [pc, #120]	; (80017b4 <HAL_RCC_OscConfig+0x4d8>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001740:	2b00      	cmp	r3, #0
 8001742:	d1f0      	bne.n	8001726 <HAL_RCC_OscConfig+0x44a>
 8001744:	e02e      	b.n	80017a4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	699b      	ldr	r3, [r3, #24]
 800174a:	2b01      	cmp	r3, #1
 800174c:	d101      	bne.n	8001752 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e029      	b.n	80017a6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001752:	4b18      	ldr	r3, [pc, #96]	; (80017b4 <HAL_RCC_OscConfig+0x4d8>)
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	69db      	ldr	r3, [r3, #28]
 8001762:	429a      	cmp	r2, r3
 8001764:	d11c      	bne.n	80017a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001770:	429a      	cmp	r2, r3
 8001772:	d115      	bne.n	80017a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001774:	68fa      	ldr	r2, [r7, #12]
 8001776:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800177a:	4013      	ands	r3, r2
 800177c:	687a      	ldr	r2, [r7, #4]
 800177e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001780:	4293      	cmp	r3, r2
 8001782:	d10d      	bne.n	80017a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800178e:	429a      	cmp	r2, r3
 8001790:	d106      	bne.n	80017a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800179c:	429a      	cmp	r2, r3
 800179e:	d001      	beq.n	80017a4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e000      	b.n	80017a6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80017a4:	2300      	movs	r3, #0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3718      	adds	r7, #24
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	40007000 	.word	0x40007000
 80017b4:	40023800 	.word	0x40023800
 80017b8:	42470060 	.word	0x42470060

080017bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d101      	bne.n	80017d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e0cc      	b.n	800196a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017d0:	4b68      	ldr	r3, [pc, #416]	; (8001974 <HAL_RCC_ClockConfig+0x1b8>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 030f 	and.w	r3, r3, #15
 80017d8:	683a      	ldr	r2, [r7, #0]
 80017da:	429a      	cmp	r2, r3
 80017dc:	d90c      	bls.n	80017f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017de:	4b65      	ldr	r3, [pc, #404]	; (8001974 <HAL_RCC_ClockConfig+0x1b8>)
 80017e0:	683a      	ldr	r2, [r7, #0]
 80017e2:	b2d2      	uxtb	r2, r2
 80017e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017e6:	4b63      	ldr	r3, [pc, #396]	; (8001974 <HAL_RCC_ClockConfig+0x1b8>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 030f 	and.w	r3, r3, #15
 80017ee:	683a      	ldr	r2, [r7, #0]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d001      	beq.n	80017f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e0b8      	b.n	800196a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0302 	and.w	r3, r3, #2
 8001800:	2b00      	cmp	r3, #0
 8001802:	d020      	beq.n	8001846 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0304 	and.w	r3, r3, #4
 800180c:	2b00      	cmp	r3, #0
 800180e:	d005      	beq.n	800181c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001810:	4b59      	ldr	r3, [pc, #356]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	4a58      	ldr	r2, [pc, #352]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 8001816:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800181a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0308 	and.w	r3, r3, #8
 8001824:	2b00      	cmp	r3, #0
 8001826:	d005      	beq.n	8001834 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001828:	4b53      	ldr	r3, [pc, #332]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	4a52      	ldr	r2, [pc, #328]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 800182e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001832:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001834:	4b50      	ldr	r3, [pc, #320]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	494d      	ldr	r1, [pc, #308]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 8001842:	4313      	orrs	r3, r2
 8001844:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	2b00      	cmp	r3, #0
 8001850:	d044      	beq.n	80018dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	2b01      	cmp	r3, #1
 8001858:	d107      	bne.n	800186a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800185a:	4b47      	ldr	r3, [pc, #284]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d119      	bne.n	800189a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e07f      	b.n	800196a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	2b02      	cmp	r3, #2
 8001870:	d003      	beq.n	800187a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001876:	2b03      	cmp	r3, #3
 8001878:	d107      	bne.n	800188a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800187a:	4b3f      	ldr	r3, [pc, #252]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d109      	bne.n	800189a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e06f      	b.n	800196a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800188a:	4b3b      	ldr	r3, [pc, #236]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0302 	and.w	r3, r3, #2
 8001892:	2b00      	cmp	r3, #0
 8001894:	d101      	bne.n	800189a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e067      	b.n	800196a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800189a:	4b37      	ldr	r3, [pc, #220]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	f023 0203 	bic.w	r2, r3, #3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	4934      	ldr	r1, [pc, #208]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 80018a8:	4313      	orrs	r3, r2
 80018aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018ac:	f7ff fa72 	bl	8000d94 <HAL_GetTick>
 80018b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018b2:	e00a      	b.n	80018ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018b4:	f7ff fa6e 	bl	8000d94 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	f241 3288 	movw	r2, #5000	; 0x1388
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e04f      	b.n	800196a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ca:	4b2b      	ldr	r3, [pc, #172]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	f003 020c 	and.w	r2, r3, #12
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	429a      	cmp	r2, r3
 80018da:	d1eb      	bne.n	80018b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018dc:	4b25      	ldr	r3, [pc, #148]	; (8001974 <HAL_RCC_ClockConfig+0x1b8>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 030f 	and.w	r3, r3, #15
 80018e4:	683a      	ldr	r2, [r7, #0]
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d20c      	bcs.n	8001904 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ea:	4b22      	ldr	r3, [pc, #136]	; (8001974 <HAL_RCC_ClockConfig+0x1b8>)
 80018ec:	683a      	ldr	r2, [r7, #0]
 80018ee:	b2d2      	uxtb	r2, r2
 80018f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018f2:	4b20      	ldr	r3, [pc, #128]	; (8001974 <HAL_RCC_ClockConfig+0x1b8>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 030f 	and.w	r3, r3, #15
 80018fa:	683a      	ldr	r2, [r7, #0]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d001      	beq.n	8001904 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e032      	b.n	800196a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0304 	and.w	r3, r3, #4
 800190c:	2b00      	cmp	r3, #0
 800190e:	d008      	beq.n	8001922 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001910:	4b19      	ldr	r3, [pc, #100]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	4916      	ldr	r1, [pc, #88]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 800191e:	4313      	orrs	r3, r2
 8001920:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0308 	and.w	r3, r3, #8
 800192a:	2b00      	cmp	r3, #0
 800192c:	d009      	beq.n	8001942 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800192e:	4b12      	ldr	r3, [pc, #72]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	691b      	ldr	r3, [r3, #16]
 800193a:	00db      	lsls	r3, r3, #3
 800193c:	490e      	ldr	r1, [pc, #56]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 800193e:	4313      	orrs	r3, r2
 8001940:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001942:	f000 f821 	bl	8001988 <HAL_RCC_GetSysClockFreq>
 8001946:	4601      	mov	r1, r0
 8001948:	4b0b      	ldr	r3, [pc, #44]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	091b      	lsrs	r3, r3, #4
 800194e:	f003 030f 	and.w	r3, r3, #15
 8001952:	4a0a      	ldr	r2, [pc, #40]	; (800197c <HAL_RCC_ClockConfig+0x1c0>)
 8001954:	5cd3      	ldrb	r3, [r2, r3]
 8001956:	fa21 f303 	lsr.w	r3, r1, r3
 800195a:	4a09      	ldr	r2, [pc, #36]	; (8001980 <HAL_RCC_ClockConfig+0x1c4>)
 800195c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800195e:	4b09      	ldr	r3, [pc, #36]	; (8001984 <HAL_RCC_ClockConfig+0x1c8>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4618      	mov	r0, r3
 8001964:	f7ff f8f2 	bl	8000b4c <HAL_InitTick>

  return HAL_OK;
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	3710      	adds	r7, #16
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	40023c00 	.word	0x40023c00
 8001978:	40023800 	.word	0x40023800
 800197c:	080059f8 	.word	0x080059f8
 8001980:	20000000 	.word	0x20000000
 8001984:	20000004 	.word	0x20000004

08001988 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800198e:	2300      	movs	r3, #0
 8001990:	607b      	str	r3, [r7, #4]
 8001992:	2300      	movs	r3, #0
 8001994:	60fb      	str	r3, [r7, #12]
 8001996:	2300      	movs	r3, #0
 8001998:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800199a:	2300      	movs	r3, #0
 800199c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800199e:	4b63      	ldr	r3, [pc, #396]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f003 030c 	and.w	r3, r3, #12
 80019a6:	2b04      	cmp	r3, #4
 80019a8:	d007      	beq.n	80019ba <HAL_RCC_GetSysClockFreq+0x32>
 80019aa:	2b08      	cmp	r3, #8
 80019ac:	d008      	beq.n	80019c0 <HAL_RCC_GetSysClockFreq+0x38>
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	f040 80b4 	bne.w	8001b1c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019b4:	4b5e      	ldr	r3, [pc, #376]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80019b6:	60bb      	str	r3, [r7, #8]
       break;
 80019b8:	e0b3      	b.n	8001b22 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019ba:	4b5e      	ldr	r3, [pc, #376]	; (8001b34 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80019bc:	60bb      	str	r3, [r7, #8]
      break;
 80019be:	e0b0      	b.n	8001b22 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019c0:	4b5a      	ldr	r3, [pc, #360]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019c8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019ca:	4b58      	ldr	r3, [pc, #352]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d04a      	beq.n	8001a6c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019d6:	4b55      	ldr	r3, [pc, #340]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	099b      	lsrs	r3, r3, #6
 80019dc:	f04f 0400 	mov.w	r4, #0
 80019e0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80019e4:	f04f 0200 	mov.w	r2, #0
 80019e8:	ea03 0501 	and.w	r5, r3, r1
 80019ec:	ea04 0602 	and.w	r6, r4, r2
 80019f0:	4629      	mov	r1, r5
 80019f2:	4632      	mov	r2, r6
 80019f4:	f04f 0300 	mov.w	r3, #0
 80019f8:	f04f 0400 	mov.w	r4, #0
 80019fc:	0154      	lsls	r4, r2, #5
 80019fe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001a02:	014b      	lsls	r3, r1, #5
 8001a04:	4619      	mov	r1, r3
 8001a06:	4622      	mov	r2, r4
 8001a08:	1b49      	subs	r1, r1, r5
 8001a0a:	eb62 0206 	sbc.w	r2, r2, r6
 8001a0e:	f04f 0300 	mov.w	r3, #0
 8001a12:	f04f 0400 	mov.w	r4, #0
 8001a16:	0194      	lsls	r4, r2, #6
 8001a18:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001a1c:	018b      	lsls	r3, r1, #6
 8001a1e:	1a5b      	subs	r3, r3, r1
 8001a20:	eb64 0402 	sbc.w	r4, r4, r2
 8001a24:	f04f 0100 	mov.w	r1, #0
 8001a28:	f04f 0200 	mov.w	r2, #0
 8001a2c:	00e2      	lsls	r2, r4, #3
 8001a2e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001a32:	00d9      	lsls	r1, r3, #3
 8001a34:	460b      	mov	r3, r1
 8001a36:	4614      	mov	r4, r2
 8001a38:	195b      	adds	r3, r3, r5
 8001a3a:	eb44 0406 	adc.w	r4, r4, r6
 8001a3e:	f04f 0100 	mov.w	r1, #0
 8001a42:	f04f 0200 	mov.w	r2, #0
 8001a46:	0262      	lsls	r2, r4, #9
 8001a48:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001a4c:	0259      	lsls	r1, r3, #9
 8001a4e:	460b      	mov	r3, r1
 8001a50:	4614      	mov	r4, r2
 8001a52:	4618      	mov	r0, r3
 8001a54:	4621      	mov	r1, r4
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f04f 0400 	mov.w	r4, #0
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	4623      	mov	r3, r4
 8001a60:	f7fe fc16 	bl	8000290 <__aeabi_uldivmod>
 8001a64:	4603      	mov	r3, r0
 8001a66:	460c      	mov	r4, r1
 8001a68:	60fb      	str	r3, [r7, #12]
 8001a6a:	e049      	b.n	8001b00 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a6c:	4b2f      	ldr	r3, [pc, #188]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	099b      	lsrs	r3, r3, #6
 8001a72:	f04f 0400 	mov.w	r4, #0
 8001a76:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001a7a:	f04f 0200 	mov.w	r2, #0
 8001a7e:	ea03 0501 	and.w	r5, r3, r1
 8001a82:	ea04 0602 	and.w	r6, r4, r2
 8001a86:	4629      	mov	r1, r5
 8001a88:	4632      	mov	r2, r6
 8001a8a:	f04f 0300 	mov.w	r3, #0
 8001a8e:	f04f 0400 	mov.w	r4, #0
 8001a92:	0154      	lsls	r4, r2, #5
 8001a94:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001a98:	014b      	lsls	r3, r1, #5
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	4622      	mov	r2, r4
 8001a9e:	1b49      	subs	r1, r1, r5
 8001aa0:	eb62 0206 	sbc.w	r2, r2, r6
 8001aa4:	f04f 0300 	mov.w	r3, #0
 8001aa8:	f04f 0400 	mov.w	r4, #0
 8001aac:	0194      	lsls	r4, r2, #6
 8001aae:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001ab2:	018b      	lsls	r3, r1, #6
 8001ab4:	1a5b      	subs	r3, r3, r1
 8001ab6:	eb64 0402 	sbc.w	r4, r4, r2
 8001aba:	f04f 0100 	mov.w	r1, #0
 8001abe:	f04f 0200 	mov.w	r2, #0
 8001ac2:	00e2      	lsls	r2, r4, #3
 8001ac4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001ac8:	00d9      	lsls	r1, r3, #3
 8001aca:	460b      	mov	r3, r1
 8001acc:	4614      	mov	r4, r2
 8001ace:	195b      	adds	r3, r3, r5
 8001ad0:	eb44 0406 	adc.w	r4, r4, r6
 8001ad4:	f04f 0100 	mov.w	r1, #0
 8001ad8:	f04f 0200 	mov.w	r2, #0
 8001adc:	02a2      	lsls	r2, r4, #10
 8001ade:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001ae2:	0299      	lsls	r1, r3, #10
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	4614      	mov	r4, r2
 8001ae8:	4618      	mov	r0, r3
 8001aea:	4621      	mov	r1, r4
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f04f 0400 	mov.w	r4, #0
 8001af2:	461a      	mov	r2, r3
 8001af4:	4623      	mov	r3, r4
 8001af6:	f7fe fbcb 	bl	8000290 <__aeabi_uldivmod>
 8001afa:	4603      	mov	r3, r0
 8001afc:	460c      	mov	r4, r1
 8001afe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b00:	4b0a      	ldr	r3, [pc, #40]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	0c1b      	lsrs	r3, r3, #16
 8001b06:	f003 0303 	and.w	r3, r3, #3
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001b10:	68fa      	ldr	r2, [r7, #12]
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b18:	60bb      	str	r3, [r7, #8]
      break;
 8001b1a:	e002      	b.n	8001b22 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b1c:	4b04      	ldr	r3, [pc, #16]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001b1e:	60bb      	str	r3, [r7, #8]
      break;
 8001b20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b22:	68bb      	ldr	r3, [r7, #8]
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3714      	adds	r7, #20
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	00f42400 	.word	0x00f42400
 8001b34:	007a1200 	.word	0x007a1200

08001b38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b3c:	4b03      	ldr	r3, [pc, #12]	; (8001b4c <HAL_RCC_GetHCLKFreq+0x14>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	20000000 	.word	0x20000000

08001b50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b54:	f7ff fff0 	bl	8001b38 <HAL_RCC_GetHCLKFreq>
 8001b58:	4601      	mov	r1, r0
 8001b5a:	4b05      	ldr	r3, [pc, #20]	; (8001b70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	0a9b      	lsrs	r3, r3, #10
 8001b60:	f003 0307 	and.w	r3, r3, #7
 8001b64:	4a03      	ldr	r2, [pc, #12]	; (8001b74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b66:	5cd3      	ldrb	r3, [r2, r3]
 8001b68:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	40023800 	.word	0x40023800
 8001b74:	08005a08 	.word	0x08005a08

08001b78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b7c:	f7ff ffdc 	bl	8001b38 <HAL_RCC_GetHCLKFreq>
 8001b80:	4601      	mov	r1, r0
 8001b82:	4b05      	ldr	r3, [pc, #20]	; (8001b98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	0b5b      	lsrs	r3, r3, #13
 8001b88:	f003 0307 	and.w	r3, r3, #7
 8001b8c:	4a03      	ldr	r2, [pc, #12]	; (8001b9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b8e:	5cd3      	ldrb	r3, [r2, r3]
 8001b90:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	40023800 	.word	0x40023800
 8001b9c:	08005a08 	.word	0x08005a08

08001ba0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	220f      	movs	r2, #15
 8001bae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001bb0:	4b12      	ldr	r3, [pc, #72]	; (8001bfc <HAL_RCC_GetClockConfig+0x5c>)
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	f003 0203 	and.w	r2, r3, #3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001bbc:	4b0f      	ldr	r3, [pc, #60]	; (8001bfc <HAL_RCC_GetClockConfig+0x5c>)
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001bc8:	4b0c      	ldr	r3, [pc, #48]	; (8001bfc <HAL_RCC_GetClockConfig+0x5c>)
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001bd4:	4b09      	ldr	r3, [pc, #36]	; (8001bfc <HAL_RCC_GetClockConfig+0x5c>)
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	08db      	lsrs	r3, r3, #3
 8001bda:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001be2:	4b07      	ldr	r3, [pc, #28]	; (8001c00 <HAL_RCC_GetClockConfig+0x60>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 020f 	and.w	r2, r3, #15
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	601a      	str	r2, [r3, #0]
}
 8001bee:	bf00      	nop
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	40023800 	.word	0x40023800
 8001c00:	40023c00 	.word	0x40023c00

08001c04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d101      	bne.n	8001c16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e01d      	b.n	8001c52 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d106      	bne.n	8001c30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2200      	movs	r2, #0
 8001c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f000 f815 	bl	8001c5a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2202      	movs	r2, #2
 8001c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	3304      	adds	r3, #4
 8001c40:	4619      	mov	r1, r3
 8001c42:	4610      	mov	r0, r2
 8001c44:	f000 f968 	bl	8001f18 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	b083      	sub	sp, #12
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c62:	bf00      	nop
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr

08001c6e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	b085      	sub	sp, #20
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	68da      	ldr	r2, [r3, #12]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f042 0201 	orr.w	r2, r2, #1
 8001c84:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	f003 0307 	and.w	r3, r3, #7
 8001c90:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2b06      	cmp	r3, #6
 8001c96:	d007      	beq.n	8001ca8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f042 0201 	orr.w	r2, r2, #1
 8001ca6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3714      	adds	r7, #20
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr

08001cb6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b082      	sub	sp, #8
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	691b      	ldr	r3, [r3, #16]
 8001cc4:	f003 0302 	and.w	r3, r3, #2
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d122      	bne.n	8001d12 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	68db      	ldr	r3, [r3, #12]
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d11b      	bne.n	8001d12 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f06f 0202 	mvn.w	r2, #2
 8001ce2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	699b      	ldr	r3, [r3, #24]
 8001cf0:	f003 0303 	and.w	r3, r3, #3
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d003      	beq.n	8001d00 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f000 f8ee 	bl	8001eda <HAL_TIM_IC_CaptureCallback>
 8001cfe:	e005      	b.n	8001d0c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f000 f8e0 	bl	8001ec6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f000 f8f1 	bl	8001eee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	691b      	ldr	r3, [r3, #16]
 8001d18:	f003 0304 	and.w	r3, r3, #4
 8001d1c:	2b04      	cmp	r3, #4
 8001d1e:	d122      	bne.n	8001d66 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	68db      	ldr	r3, [r3, #12]
 8001d26:	f003 0304 	and.w	r3, r3, #4
 8001d2a:	2b04      	cmp	r3, #4
 8001d2c:	d11b      	bne.n	8001d66 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f06f 0204 	mvn.w	r2, #4
 8001d36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2202      	movs	r2, #2
 8001d3c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	699b      	ldr	r3, [r3, #24]
 8001d44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d003      	beq.n	8001d54 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f000 f8c4 	bl	8001eda <HAL_TIM_IC_CaptureCallback>
 8001d52:	e005      	b.n	8001d60 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f000 f8b6 	bl	8001ec6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f000 f8c7 	bl	8001eee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2200      	movs	r2, #0
 8001d64:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	691b      	ldr	r3, [r3, #16]
 8001d6c:	f003 0308 	and.w	r3, r3, #8
 8001d70:	2b08      	cmp	r3, #8
 8001d72:	d122      	bne.n	8001dba <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	f003 0308 	and.w	r3, r3, #8
 8001d7e:	2b08      	cmp	r3, #8
 8001d80:	d11b      	bne.n	8001dba <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f06f 0208 	mvn.w	r2, #8
 8001d8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2204      	movs	r2, #4
 8001d90:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	69db      	ldr	r3, [r3, #28]
 8001d98:	f003 0303 	and.w	r3, r3, #3
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d003      	beq.n	8001da8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f000 f89a 	bl	8001eda <HAL_TIM_IC_CaptureCallback>
 8001da6:	e005      	b.n	8001db4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f000 f88c 	bl	8001ec6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f000 f89d 	bl	8001eee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	691b      	ldr	r3, [r3, #16]
 8001dc0:	f003 0310 	and.w	r3, r3, #16
 8001dc4:	2b10      	cmp	r3, #16
 8001dc6:	d122      	bne.n	8001e0e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	f003 0310 	and.w	r3, r3, #16
 8001dd2:	2b10      	cmp	r3, #16
 8001dd4:	d11b      	bne.n	8001e0e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f06f 0210 	mvn.w	r2, #16
 8001dde:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2208      	movs	r2, #8
 8001de4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	69db      	ldr	r3, [r3, #28]
 8001dec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d003      	beq.n	8001dfc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f000 f870 	bl	8001eda <HAL_TIM_IC_CaptureCallback>
 8001dfa:	e005      	b.n	8001e08 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f000 f862 	bl	8001ec6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f000 f873 	bl	8001eee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	691b      	ldr	r3, [r3, #16]
 8001e14:	f003 0301 	and.w	r3, r3, #1
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d10e      	bne.n	8001e3a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d107      	bne.n	8001e3a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f06f 0201 	mvn.w	r2, #1
 8001e32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f7fe fdff 	bl	8000a38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	691b      	ldr	r3, [r3, #16]
 8001e40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e44:	2b80      	cmp	r3, #128	; 0x80
 8001e46:	d10e      	bne.n	8001e66 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e52:	2b80      	cmp	r3, #128	; 0x80
 8001e54:	d107      	bne.n	8001e66 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f000 f8e3 	bl	800202c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	691b      	ldr	r3, [r3, #16]
 8001e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e70:	2b40      	cmp	r3, #64	; 0x40
 8001e72:	d10e      	bne.n	8001e92 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e7e:	2b40      	cmp	r3, #64	; 0x40
 8001e80:	d107      	bne.n	8001e92 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f000 f838 	bl	8001f02 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	691b      	ldr	r3, [r3, #16]
 8001e98:	f003 0320 	and.w	r3, r3, #32
 8001e9c:	2b20      	cmp	r3, #32
 8001e9e:	d10e      	bne.n	8001ebe <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	f003 0320 	and.w	r3, r3, #32
 8001eaa:	2b20      	cmp	r3, #32
 8001eac:	d107      	bne.n	8001ebe <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f06f 0220 	mvn.w	r2, #32
 8001eb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f000 f8ad 	bl	8002018 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ebe:	bf00      	nop
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	b083      	sub	sp, #12
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ece:	bf00      	nop
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr

08001eda <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001eda:	b480      	push	{r7}
 8001edc:	b083      	sub	sp, #12
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ee2:	bf00      	nop
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr

08001eee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	b083      	sub	sp, #12
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ef6:	bf00      	nop
 8001ef8:	370c      	adds	r7, #12
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr

08001f02 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f02:	b480      	push	{r7}
 8001f04:	b083      	sub	sp, #12
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f0a:	bf00      	nop
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
	...

08001f18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b085      	sub	sp, #20
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	4a34      	ldr	r2, [pc, #208]	; (8001ffc <TIM_Base_SetConfig+0xe4>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d00f      	beq.n	8001f50 <TIM_Base_SetConfig+0x38>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f36:	d00b      	beq.n	8001f50 <TIM_Base_SetConfig+0x38>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4a31      	ldr	r2, [pc, #196]	; (8002000 <TIM_Base_SetConfig+0xe8>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d007      	beq.n	8001f50 <TIM_Base_SetConfig+0x38>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	4a30      	ldr	r2, [pc, #192]	; (8002004 <TIM_Base_SetConfig+0xec>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d003      	beq.n	8001f50 <TIM_Base_SetConfig+0x38>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	4a2f      	ldr	r2, [pc, #188]	; (8002008 <TIM_Base_SetConfig+0xf0>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d108      	bne.n	8001f62 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	68fa      	ldr	r2, [r7, #12]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a25      	ldr	r2, [pc, #148]	; (8001ffc <TIM_Base_SetConfig+0xe4>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d01b      	beq.n	8001fa2 <TIM_Base_SetConfig+0x8a>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f70:	d017      	beq.n	8001fa2 <TIM_Base_SetConfig+0x8a>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a22      	ldr	r2, [pc, #136]	; (8002000 <TIM_Base_SetConfig+0xe8>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d013      	beq.n	8001fa2 <TIM_Base_SetConfig+0x8a>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a21      	ldr	r2, [pc, #132]	; (8002004 <TIM_Base_SetConfig+0xec>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d00f      	beq.n	8001fa2 <TIM_Base_SetConfig+0x8a>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a20      	ldr	r2, [pc, #128]	; (8002008 <TIM_Base_SetConfig+0xf0>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d00b      	beq.n	8001fa2 <TIM_Base_SetConfig+0x8a>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a1f      	ldr	r2, [pc, #124]	; (800200c <TIM_Base_SetConfig+0xf4>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d007      	beq.n	8001fa2 <TIM_Base_SetConfig+0x8a>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a1e      	ldr	r2, [pc, #120]	; (8002010 <TIM_Base_SetConfig+0xf8>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d003      	beq.n	8001fa2 <TIM_Base_SetConfig+0x8a>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a1d      	ldr	r2, [pc, #116]	; (8002014 <TIM_Base_SetConfig+0xfc>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d108      	bne.n	8001fb4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fa8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	68fa      	ldr	r2, [r7, #12]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	695b      	ldr	r3, [r3, #20]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	68fa      	ldr	r2, [r7, #12]
 8001fc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	689a      	ldr	r2, [r3, #8]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4a08      	ldr	r2, [pc, #32]	; (8001ffc <TIM_Base_SetConfig+0xe4>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d103      	bne.n	8001fe8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	691a      	ldr	r2, [r3, #16]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2201      	movs	r2, #1
 8001fec:	615a      	str	r2, [r3, #20]
}
 8001fee:	bf00      	nop
 8001ff0:	3714      	adds	r7, #20
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	40010000 	.word	0x40010000
 8002000:	40000400 	.word	0x40000400
 8002004:	40000800 	.word	0x40000800
 8002008:	40000c00 	.word	0x40000c00
 800200c:	40014000 	.word	0x40014000
 8002010:	40014400 	.word	0x40014400
 8002014:	40014800 	.word	0x40014800

08002018 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002020:	bf00      	nop
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002034:	bf00      	nop
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d101      	bne.n	8002052 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e03f      	b.n	80020d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002058:	b2db      	uxtb	r3, r3
 800205a:	2b00      	cmp	r3, #0
 800205c:	d106      	bne.n	800206c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f7fe fd28 	bl	8000abc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2224      	movs	r2, #36	; 0x24
 8002070:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	68da      	ldr	r2, [r3, #12]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002082:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f000 f90b 	bl	80022a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	691a      	ldr	r2, [r3, #16]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002098:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	695a      	ldr	r2, [r3, #20]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80020a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	68da      	ldr	r2, [r3, #12]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80020b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2220      	movs	r2, #32
 80020c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2220      	movs	r2, #32
 80020cc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}

080020da <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	b088      	sub	sp, #32
 80020de:	af02      	add	r7, sp, #8
 80020e0:	60f8      	str	r0, [r7, #12]
 80020e2:	60b9      	str	r1, [r7, #8]
 80020e4:	603b      	str	r3, [r7, #0]
 80020e6:	4613      	mov	r3, r2
 80020e8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80020ea:	2300      	movs	r3, #0
 80020ec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	2b20      	cmp	r3, #32
 80020f8:	f040 8083 	bne.w	8002202 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d002      	beq.n	8002108 <HAL_UART_Transmit+0x2e>
 8002102:	88fb      	ldrh	r3, [r7, #6]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d101      	bne.n	800210c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e07b      	b.n	8002204 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002112:	2b01      	cmp	r3, #1
 8002114:	d101      	bne.n	800211a <HAL_UART_Transmit+0x40>
 8002116:	2302      	movs	r3, #2
 8002118:	e074      	b.n	8002204 <HAL_UART_Transmit+0x12a>
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2201      	movs	r2, #1
 800211e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2200      	movs	r2, #0
 8002126:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2221      	movs	r2, #33	; 0x21
 800212c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002130:	f7fe fe30 	bl	8000d94 <HAL_GetTick>
 8002134:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	88fa      	ldrh	r2, [r7, #6]
 800213a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	88fa      	ldrh	r2, [r7, #6]
 8002140:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2200      	movs	r2, #0
 8002146:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800214a:	e042      	b.n	80021d2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002150:	b29b      	uxth	r3, r3
 8002152:	3b01      	subs	r3, #1
 8002154:	b29a      	uxth	r2, r3
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002162:	d122      	bne.n	80021aa <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	9300      	str	r3, [sp, #0]
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	2200      	movs	r2, #0
 800216c:	2180      	movs	r1, #128	; 0x80
 800216e:	68f8      	ldr	r0, [r7, #12]
 8002170:	f000 f84c 	bl	800220c <UART_WaitOnFlagUntilTimeout>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e042      	b.n	8002204 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	881b      	ldrh	r3, [r3, #0]
 8002186:	461a      	mov	r2, r3
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002190:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d103      	bne.n	80021a2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	3302      	adds	r3, #2
 800219e:	60bb      	str	r3, [r7, #8]
 80021a0:	e017      	b.n	80021d2 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	3301      	adds	r3, #1
 80021a6:	60bb      	str	r3, [r7, #8]
 80021a8:	e013      	b.n	80021d2 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	9300      	str	r3, [sp, #0]
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	2200      	movs	r2, #0
 80021b2:	2180      	movs	r1, #128	; 0x80
 80021b4:	68f8      	ldr	r0, [r7, #12]
 80021b6:	f000 f829 	bl	800220c <UART_WaitOnFlagUntilTimeout>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80021c0:	2303      	movs	r3, #3
 80021c2:	e01f      	b.n	8002204 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	1c5a      	adds	r2, r3, #1
 80021c8:	60ba      	str	r2, [r7, #8]
 80021ca:	781a      	ldrb	r2, [r3, #0]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d1b7      	bne.n	800214c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	9300      	str	r3, [sp, #0]
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	2200      	movs	r2, #0
 80021e4:	2140      	movs	r1, #64	; 0x40
 80021e6:	68f8      	ldr	r0, [r7, #12]
 80021e8:	f000 f810 	bl	800220c <UART_WaitOnFlagUntilTimeout>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e006      	b.n	8002204 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2220      	movs	r2, #32
 80021fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80021fe:	2300      	movs	r3, #0
 8002200:	e000      	b.n	8002204 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002202:	2302      	movs	r3, #2
  }
}
 8002204:	4618      	mov	r0, r3
 8002206:	3718      	adds	r7, #24
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}

0800220c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	60b9      	str	r1, [r7, #8]
 8002216:	603b      	str	r3, [r7, #0]
 8002218:	4613      	mov	r3, r2
 800221a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800221c:	e02c      	b.n	8002278 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800221e:	69bb      	ldr	r3, [r7, #24]
 8002220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002224:	d028      	beq.n	8002278 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d007      	beq.n	800223c <UART_WaitOnFlagUntilTimeout+0x30>
 800222c:	f7fe fdb2 	bl	8000d94 <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	429a      	cmp	r2, r3
 800223a:	d21d      	bcs.n	8002278 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	68da      	ldr	r2, [r3, #12]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800224a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	695a      	ldr	r2, [r3, #20]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f022 0201 	bic.w	r2, r2, #1
 800225a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2220      	movs	r2, #32
 8002260:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2220      	movs	r2, #32
 8002268:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e00f      	b.n	8002298 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	4013      	ands	r3, r2
 8002282:	68ba      	ldr	r2, [r7, #8]
 8002284:	429a      	cmp	r2, r3
 8002286:	bf0c      	ite	eq
 8002288:	2301      	moveq	r3, #1
 800228a:	2300      	movne	r3, #0
 800228c:	b2db      	uxtb	r3, r3
 800228e:	461a      	mov	r2, r3
 8002290:	79fb      	ldrb	r3, [r7, #7]
 8002292:	429a      	cmp	r2, r3
 8002294:	d0c3      	beq.n	800221e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002296:	2300      	movs	r3, #0
}
 8002298:	4618      	mov	r0, r3
 800229a:	3710      	adds	r7, #16
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}

080022a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80022a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022a4:	b085      	sub	sp, #20
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	691b      	ldr	r3, [r3, #16]
 80022b0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	68da      	ldr	r2, [r3, #12]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	430a      	orrs	r2, r1
 80022be:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	689a      	ldr	r2, [r3, #8]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	691b      	ldr	r3, [r3, #16]
 80022c8:	431a      	orrs	r2, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	695b      	ldr	r3, [r3, #20]
 80022ce:	431a      	orrs	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	69db      	ldr	r3, [r3, #28]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80022e2:	f023 030c 	bic.w	r3, r3, #12
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	6812      	ldr	r2, [r2, #0]
 80022ea:	68f9      	ldr	r1, [r7, #12]
 80022ec:	430b      	orrs	r3, r1
 80022ee:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	695b      	ldr	r3, [r3, #20]
 80022f6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	699a      	ldr	r2, [r3, #24]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	430a      	orrs	r2, r1
 8002304:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	69db      	ldr	r3, [r3, #28]
 800230a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800230e:	f040 818b 	bne.w	8002628 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4ac1      	ldr	r2, [pc, #772]	; (800261c <UART_SetConfig+0x37c>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d005      	beq.n	8002328 <UART_SetConfig+0x88>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4abf      	ldr	r2, [pc, #764]	; (8002620 <UART_SetConfig+0x380>)
 8002322:	4293      	cmp	r3, r2
 8002324:	f040 80bd 	bne.w	80024a2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002328:	f7ff fc26 	bl	8001b78 <HAL_RCC_GetPCLK2Freq>
 800232c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	461d      	mov	r5, r3
 8002332:	f04f 0600 	mov.w	r6, #0
 8002336:	46a8      	mov	r8, r5
 8002338:	46b1      	mov	r9, r6
 800233a:	eb18 0308 	adds.w	r3, r8, r8
 800233e:	eb49 0409 	adc.w	r4, r9, r9
 8002342:	4698      	mov	r8, r3
 8002344:	46a1      	mov	r9, r4
 8002346:	eb18 0805 	adds.w	r8, r8, r5
 800234a:	eb49 0906 	adc.w	r9, r9, r6
 800234e:	f04f 0100 	mov.w	r1, #0
 8002352:	f04f 0200 	mov.w	r2, #0
 8002356:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800235a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800235e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002362:	4688      	mov	r8, r1
 8002364:	4691      	mov	r9, r2
 8002366:	eb18 0005 	adds.w	r0, r8, r5
 800236a:	eb49 0106 	adc.w	r1, r9, r6
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	461d      	mov	r5, r3
 8002374:	f04f 0600 	mov.w	r6, #0
 8002378:	196b      	adds	r3, r5, r5
 800237a:	eb46 0406 	adc.w	r4, r6, r6
 800237e:	461a      	mov	r2, r3
 8002380:	4623      	mov	r3, r4
 8002382:	f7fd ff85 	bl	8000290 <__aeabi_uldivmod>
 8002386:	4603      	mov	r3, r0
 8002388:	460c      	mov	r4, r1
 800238a:	461a      	mov	r2, r3
 800238c:	4ba5      	ldr	r3, [pc, #660]	; (8002624 <UART_SetConfig+0x384>)
 800238e:	fba3 2302 	umull	r2, r3, r3, r2
 8002392:	095b      	lsrs	r3, r3, #5
 8002394:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	461d      	mov	r5, r3
 800239c:	f04f 0600 	mov.w	r6, #0
 80023a0:	46a9      	mov	r9, r5
 80023a2:	46b2      	mov	sl, r6
 80023a4:	eb19 0309 	adds.w	r3, r9, r9
 80023a8:	eb4a 040a 	adc.w	r4, sl, sl
 80023ac:	4699      	mov	r9, r3
 80023ae:	46a2      	mov	sl, r4
 80023b0:	eb19 0905 	adds.w	r9, r9, r5
 80023b4:	eb4a 0a06 	adc.w	sl, sl, r6
 80023b8:	f04f 0100 	mov.w	r1, #0
 80023bc:	f04f 0200 	mov.w	r2, #0
 80023c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80023c4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80023c8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80023cc:	4689      	mov	r9, r1
 80023ce:	4692      	mov	sl, r2
 80023d0:	eb19 0005 	adds.w	r0, r9, r5
 80023d4:	eb4a 0106 	adc.w	r1, sl, r6
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	461d      	mov	r5, r3
 80023de:	f04f 0600 	mov.w	r6, #0
 80023e2:	196b      	adds	r3, r5, r5
 80023e4:	eb46 0406 	adc.w	r4, r6, r6
 80023e8:	461a      	mov	r2, r3
 80023ea:	4623      	mov	r3, r4
 80023ec:	f7fd ff50 	bl	8000290 <__aeabi_uldivmod>
 80023f0:	4603      	mov	r3, r0
 80023f2:	460c      	mov	r4, r1
 80023f4:	461a      	mov	r2, r3
 80023f6:	4b8b      	ldr	r3, [pc, #556]	; (8002624 <UART_SetConfig+0x384>)
 80023f8:	fba3 1302 	umull	r1, r3, r3, r2
 80023fc:	095b      	lsrs	r3, r3, #5
 80023fe:	2164      	movs	r1, #100	; 0x64
 8002400:	fb01 f303 	mul.w	r3, r1, r3
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	00db      	lsls	r3, r3, #3
 8002408:	3332      	adds	r3, #50	; 0x32
 800240a:	4a86      	ldr	r2, [pc, #536]	; (8002624 <UART_SetConfig+0x384>)
 800240c:	fba2 2303 	umull	r2, r3, r2, r3
 8002410:	095b      	lsrs	r3, r3, #5
 8002412:	005b      	lsls	r3, r3, #1
 8002414:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002418:	4498      	add	r8, r3
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	461d      	mov	r5, r3
 800241e:	f04f 0600 	mov.w	r6, #0
 8002422:	46a9      	mov	r9, r5
 8002424:	46b2      	mov	sl, r6
 8002426:	eb19 0309 	adds.w	r3, r9, r9
 800242a:	eb4a 040a 	adc.w	r4, sl, sl
 800242e:	4699      	mov	r9, r3
 8002430:	46a2      	mov	sl, r4
 8002432:	eb19 0905 	adds.w	r9, r9, r5
 8002436:	eb4a 0a06 	adc.w	sl, sl, r6
 800243a:	f04f 0100 	mov.w	r1, #0
 800243e:	f04f 0200 	mov.w	r2, #0
 8002442:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002446:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800244a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800244e:	4689      	mov	r9, r1
 8002450:	4692      	mov	sl, r2
 8002452:	eb19 0005 	adds.w	r0, r9, r5
 8002456:	eb4a 0106 	adc.w	r1, sl, r6
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	461d      	mov	r5, r3
 8002460:	f04f 0600 	mov.w	r6, #0
 8002464:	196b      	adds	r3, r5, r5
 8002466:	eb46 0406 	adc.w	r4, r6, r6
 800246a:	461a      	mov	r2, r3
 800246c:	4623      	mov	r3, r4
 800246e:	f7fd ff0f 	bl	8000290 <__aeabi_uldivmod>
 8002472:	4603      	mov	r3, r0
 8002474:	460c      	mov	r4, r1
 8002476:	461a      	mov	r2, r3
 8002478:	4b6a      	ldr	r3, [pc, #424]	; (8002624 <UART_SetConfig+0x384>)
 800247a:	fba3 1302 	umull	r1, r3, r3, r2
 800247e:	095b      	lsrs	r3, r3, #5
 8002480:	2164      	movs	r1, #100	; 0x64
 8002482:	fb01 f303 	mul.w	r3, r1, r3
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	00db      	lsls	r3, r3, #3
 800248a:	3332      	adds	r3, #50	; 0x32
 800248c:	4a65      	ldr	r2, [pc, #404]	; (8002624 <UART_SetConfig+0x384>)
 800248e:	fba2 2303 	umull	r2, r3, r2, r3
 8002492:	095b      	lsrs	r3, r3, #5
 8002494:	f003 0207 	and.w	r2, r3, #7
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4442      	add	r2, r8
 800249e:	609a      	str	r2, [r3, #8]
 80024a0:	e26f      	b.n	8002982 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80024a2:	f7ff fb55 	bl	8001b50 <HAL_RCC_GetPCLK1Freq>
 80024a6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	461d      	mov	r5, r3
 80024ac:	f04f 0600 	mov.w	r6, #0
 80024b0:	46a8      	mov	r8, r5
 80024b2:	46b1      	mov	r9, r6
 80024b4:	eb18 0308 	adds.w	r3, r8, r8
 80024b8:	eb49 0409 	adc.w	r4, r9, r9
 80024bc:	4698      	mov	r8, r3
 80024be:	46a1      	mov	r9, r4
 80024c0:	eb18 0805 	adds.w	r8, r8, r5
 80024c4:	eb49 0906 	adc.w	r9, r9, r6
 80024c8:	f04f 0100 	mov.w	r1, #0
 80024cc:	f04f 0200 	mov.w	r2, #0
 80024d0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80024d4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80024d8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80024dc:	4688      	mov	r8, r1
 80024de:	4691      	mov	r9, r2
 80024e0:	eb18 0005 	adds.w	r0, r8, r5
 80024e4:	eb49 0106 	adc.w	r1, r9, r6
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	461d      	mov	r5, r3
 80024ee:	f04f 0600 	mov.w	r6, #0
 80024f2:	196b      	adds	r3, r5, r5
 80024f4:	eb46 0406 	adc.w	r4, r6, r6
 80024f8:	461a      	mov	r2, r3
 80024fa:	4623      	mov	r3, r4
 80024fc:	f7fd fec8 	bl	8000290 <__aeabi_uldivmod>
 8002500:	4603      	mov	r3, r0
 8002502:	460c      	mov	r4, r1
 8002504:	461a      	mov	r2, r3
 8002506:	4b47      	ldr	r3, [pc, #284]	; (8002624 <UART_SetConfig+0x384>)
 8002508:	fba3 2302 	umull	r2, r3, r3, r2
 800250c:	095b      	lsrs	r3, r3, #5
 800250e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	461d      	mov	r5, r3
 8002516:	f04f 0600 	mov.w	r6, #0
 800251a:	46a9      	mov	r9, r5
 800251c:	46b2      	mov	sl, r6
 800251e:	eb19 0309 	adds.w	r3, r9, r9
 8002522:	eb4a 040a 	adc.w	r4, sl, sl
 8002526:	4699      	mov	r9, r3
 8002528:	46a2      	mov	sl, r4
 800252a:	eb19 0905 	adds.w	r9, r9, r5
 800252e:	eb4a 0a06 	adc.w	sl, sl, r6
 8002532:	f04f 0100 	mov.w	r1, #0
 8002536:	f04f 0200 	mov.w	r2, #0
 800253a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800253e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002542:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002546:	4689      	mov	r9, r1
 8002548:	4692      	mov	sl, r2
 800254a:	eb19 0005 	adds.w	r0, r9, r5
 800254e:	eb4a 0106 	adc.w	r1, sl, r6
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	461d      	mov	r5, r3
 8002558:	f04f 0600 	mov.w	r6, #0
 800255c:	196b      	adds	r3, r5, r5
 800255e:	eb46 0406 	adc.w	r4, r6, r6
 8002562:	461a      	mov	r2, r3
 8002564:	4623      	mov	r3, r4
 8002566:	f7fd fe93 	bl	8000290 <__aeabi_uldivmod>
 800256a:	4603      	mov	r3, r0
 800256c:	460c      	mov	r4, r1
 800256e:	461a      	mov	r2, r3
 8002570:	4b2c      	ldr	r3, [pc, #176]	; (8002624 <UART_SetConfig+0x384>)
 8002572:	fba3 1302 	umull	r1, r3, r3, r2
 8002576:	095b      	lsrs	r3, r3, #5
 8002578:	2164      	movs	r1, #100	; 0x64
 800257a:	fb01 f303 	mul.w	r3, r1, r3
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	00db      	lsls	r3, r3, #3
 8002582:	3332      	adds	r3, #50	; 0x32
 8002584:	4a27      	ldr	r2, [pc, #156]	; (8002624 <UART_SetConfig+0x384>)
 8002586:	fba2 2303 	umull	r2, r3, r2, r3
 800258a:	095b      	lsrs	r3, r3, #5
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002592:	4498      	add	r8, r3
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	461d      	mov	r5, r3
 8002598:	f04f 0600 	mov.w	r6, #0
 800259c:	46a9      	mov	r9, r5
 800259e:	46b2      	mov	sl, r6
 80025a0:	eb19 0309 	adds.w	r3, r9, r9
 80025a4:	eb4a 040a 	adc.w	r4, sl, sl
 80025a8:	4699      	mov	r9, r3
 80025aa:	46a2      	mov	sl, r4
 80025ac:	eb19 0905 	adds.w	r9, r9, r5
 80025b0:	eb4a 0a06 	adc.w	sl, sl, r6
 80025b4:	f04f 0100 	mov.w	r1, #0
 80025b8:	f04f 0200 	mov.w	r2, #0
 80025bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80025c0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80025c4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80025c8:	4689      	mov	r9, r1
 80025ca:	4692      	mov	sl, r2
 80025cc:	eb19 0005 	adds.w	r0, r9, r5
 80025d0:	eb4a 0106 	adc.w	r1, sl, r6
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	461d      	mov	r5, r3
 80025da:	f04f 0600 	mov.w	r6, #0
 80025de:	196b      	adds	r3, r5, r5
 80025e0:	eb46 0406 	adc.w	r4, r6, r6
 80025e4:	461a      	mov	r2, r3
 80025e6:	4623      	mov	r3, r4
 80025e8:	f7fd fe52 	bl	8000290 <__aeabi_uldivmod>
 80025ec:	4603      	mov	r3, r0
 80025ee:	460c      	mov	r4, r1
 80025f0:	461a      	mov	r2, r3
 80025f2:	4b0c      	ldr	r3, [pc, #48]	; (8002624 <UART_SetConfig+0x384>)
 80025f4:	fba3 1302 	umull	r1, r3, r3, r2
 80025f8:	095b      	lsrs	r3, r3, #5
 80025fa:	2164      	movs	r1, #100	; 0x64
 80025fc:	fb01 f303 	mul.w	r3, r1, r3
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	00db      	lsls	r3, r3, #3
 8002604:	3332      	adds	r3, #50	; 0x32
 8002606:	4a07      	ldr	r2, [pc, #28]	; (8002624 <UART_SetConfig+0x384>)
 8002608:	fba2 2303 	umull	r2, r3, r2, r3
 800260c:	095b      	lsrs	r3, r3, #5
 800260e:	f003 0207 	and.w	r2, r3, #7
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4442      	add	r2, r8
 8002618:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800261a:	e1b2      	b.n	8002982 <UART_SetConfig+0x6e2>
 800261c:	40011000 	.word	0x40011000
 8002620:	40011400 	.word	0x40011400
 8002624:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4ad7      	ldr	r2, [pc, #860]	; (800298c <UART_SetConfig+0x6ec>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d005      	beq.n	800263e <UART_SetConfig+0x39e>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4ad6      	ldr	r2, [pc, #856]	; (8002990 <UART_SetConfig+0x6f0>)
 8002638:	4293      	cmp	r3, r2
 800263a:	f040 80d1 	bne.w	80027e0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800263e:	f7ff fa9b 	bl	8001b78 <HAL_RCC_GetPCLK2Freq>
 8002642:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	469a      	mov	sl, r3
 8002648:	f04f 0b00 	mov.w	fp, #0
 800264c:	46d0      	mov	r8, sl
 800264e:	46d9      	mov	r9, fp
 8002650:	eb18 0308 	adds.w	r3, r8, r8
 8002654:	eb49 0409 	adc.w	r4, r9, r9
 8002658:	4698      	mov	r8, r3
 800265a:	46a1      	mov	r9, r4
 800265c:	eb18 080a 	adds.w	r8, r8, sl
 8002660:	eb49 090b 	adc.w	r9, r9, fp
 8002664:	f04f 0100 	mov.w	r1, #0
 8002668:	f04f 0200 	mov.w	r2, #0
 800266c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002670:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002674:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002678:	4688      	mov	r8, r1
 800267a:	4691      	mov	r9, r2
 800267c:	eb1a 0508 	adds.w	r5, sl, r8
 8002680:	eb4b 0609 	adc.w	r6, fp, r9
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	4619      	mov	r1, r3
 800268a:	f04f 0200 	mov.w	r2, #0
 800268e:	f04f 0300 	mov.w	r3, #0
 8002692:	f04f 0400 	mov.w	r4, #0
 8002696:	0094      	lsls	r4, r2, #2
 8002698:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800269c:	008b      	lsls	r3, r1, #2
 800269e:	461a      	mov	r2, r3
 80026a0:	4623      	mov	r3, r4
 80026a2:	4628      	mov	r0, r5
 80026a4:	4631      	mov	r1, r6
 80026a6:	f7fd fdf3 	bl	8000290 <__aeabi_uldivmod>
 80026aa:	4603      	mov	r3, r0
 80026ac:	460c      	mov	r4, r1
 80026ae:	461a      	mov	r2, r3
 80026b0:	4bb8      	ldr	r3, [pc, #736]	; (8002994 <UART_SetConfig+0x6f4>)
 80026b2:	fba3 2302 	umull	r2, r3, r3, r2
 80026b6:	095b      	lsrs	r3, r3, #5
 80026b8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	469b      	mov	fp, r3
 80026c0:	f04f 0c00 	mov.w	ip, #0
 80026c4:	46d9      	mov	r9, fp
 80026c6:	46e2      	mov	sl, ip
 80026c8:	eb19 0309 	adds.w	r3, r9, r9
 80026cc:	eb4a 040a 	adc.w	r4, sl, sl
 80026d0:	4699      	mov	r9, r3
 80026d2:	46a2      	mov	sl, r4
 80026d4:	eb19 090b 	adds.w	r9, r9, fp
 80026d8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80026dc:	f04f 0100 	mov.w	r1, #0
 80026e0:	f04f 0200 	mov.w	r2, #0
 80026e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80026e8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80026ec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80026f0:	4689      	mov	r9, r1
 80026f2:	4692      	mov	sl, r2
 80026f4:	eb1b 0509 	adds.w	r5, fp, r9
 80026f8:	eb4c 060a 	adc.w	r6, ip, sl
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	4619      	mov	r1, r3
 8002702:	f04f 0200 	mov.w	r2, #0
 8002706:	f04f 0300 	mov.w	r3, #0
 800270a:	f04f 0400 	mov.w	r4, #0
 800270e:	0094      	lsls	r4, r2, #2
 8002710:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002714:	008b      	lsls	r3, r1, #2
 8002716:	461a      	mov	r2, r3
 8002718:	4623      	mov	r3, r4
 800271a:	4628      	mov	r0, r5
 800271c:	4631      	mov	r1, r6
 800271e:	f7fd fdb7 	bl	8000290 <__aeabi_uldivmod>
 8002722:	4603      	mov	r3, r0
 8002724:	460c      	mov	r4, r1
 8002726:	461a      	mov	r2, r3
 8002728:	4b9a      	ldr	r3, [pc, #616]	; (8002994 <UART_SetConfig+0x6f4>)
 800272a:	fba3 1302 	umull	r1, r3, r3, r2
 800272e:	095b      	lsrs	r3, r3, #5
 8002730:	2164      	movs	r1, #100	; 0x64
 8002732:	fb01 f303 	mul.w	r3, r1, r3
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	011b      	lsls	r3, r3, #4
 800273a:	3332      	adds	r3, #50	; 0x32
 800273c:	4a95      	ldr	r2, [pc, #596]	; (8002994 <UART_SetConfig+0x6f4>)
 800273e:	fba2 2303 	umull	r2, r3, r2, r3
 8002742:	095b      	lsrs	r3, r3, #5
 8002744:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002748:	4498      	add	r8, r3
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	469b      	mov	fp, r3
 800274e:	f04f 0c00 	mov.w	ip, #0
 8002752:	46d9      	mov	r9, fp
 8002754:	46e2      	mov	sl, ip
 8002756:	eb19 0309 	adds.w	r3, r9, r9
 800275a:	eb4a 040a 	adc.w	r4, sl, sl
 800275e:	4699      	mov	r9, r3
 8002760:	46a2      	mov	sl, r4
 8002762:	eb19 090b 	adds.w	r9, r9, fp
 8002766:	eb4a 0a0c 	adc.w	sl, sl, ip
 800276a:	f04f 0100 	mov.w	r1, #0
 800276e:	f04f 0200 	mov.w	r2, #0
 8002772:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002776:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800277a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800277e:	4689      	mov	r9, r1
 8002780:	4692      	mov	sl, r2
 8002782:	eb1b 0509 	adds.w	r5, fp, r9
 8002786:	eb4c 060a 	adc.w	r6, ip, sl
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	4619      	mov	r1, r3
 8002790:	f04f 0200 	mov.w	r2, #0
 8002794:	f04f 0300 	mov.w	r3, #0
 8002798:	f04f 0400 	mov.w	r4, #0
 800279c:	0094      	lsls	r4, r2, #2
 800279e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80027a2:	008b      	lsls	r3, r1, #2
 80027a4:	461a      	mov	r2, r3
 80027a6:	4623      	mov	r3, r4
 80027a8:	4628      	mov	r0, r5
 80027aa:	4631      	mov	r1, r6
 80027ac:	f7fd fd70 	bl	8000290 <__aeabi_uldivmod>
 80027b0:	4603      	mov	r3, r0
 80027b2:	460c      	mov	r4, r1
 80027b4:	461a      	mov	r2, r3
 80027b6:	4b77      	ldr	r3, [pc, #476]	; (8002994 <UART_SetConfig+0x6f4>)
 80027b8:	fba3 1302 	umull	r1, r3, r3, r2
 80027bc:	095b      	lsrs	r3, r3, #5
 80027be:	2164      	movs	r1, #100	; 0x64
 80027c0:	fb01 f303 	mul.w	r3, r1, r3
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	011b      	lsls	r3, r3, #4
 80027c8:	3332      	adds	r3, #50	; 0x32
 80027ca:	4a72      	ldr	r2, [pc, #456]	; (8002994 <UART_SetConfig+0x6f4>)
 80027cc:	fba2 2303 	umull	r2, r3, r2, r3
 80027d0:	095b      	lsrs	r3, r3, #5
 80027d2:	f003 020f 	and.w	r2, r3, #15
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4442      	add	r2, r8
 80027dc:	609a      	str	r2, [r3, #8]
 80027de:	e0d0      	b.n	8002982 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80027e0:	f7ff f9b6 	bl	8001b50 <HAL_RCC_GetPCLK1Freq>
 80027e4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	469a      	mov	sl, r3
 80027ea:	f04f 0b00 	mov.w	fp, #0
 80027ee:	46d0      	mov	r8, sl
 80027f0:	46d9      	mov	r9, fp
 80027f2:	eb18 0308 	adds.w	r3, r8, r8
 80027f6:	eb49 0409 	adc.w	r4, r9, r9
 80027fa:	4698      	mov	r8, r3
 80027fc:	46a1      	mov	r9, r4
 80027fe:	eb18 080a 	adds.w	r8, r8, sl
 8002802:	eb49 090b 	adc.w	r9, r9, fp
 8002806:	f04f 0100 	mov.w	r1, #0
 800280a:	f04f 0200 	mov.w	r2, #0
 800280e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002812:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002816:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800281a:	4688      	mov	r8, r1
 800281c:	4691      	mov	r9, r2
 800281e:	eb1a 0508 	adds.w	r5, sl, r8
 8002822:	eb4b 0609 	adc.w	r6, fp, r9
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	4619      	mov	r1, r3
 800282c:	f04f 0200 	mov.w	r2, #0
 8002830:	f04f 0300 	mov.w	r3, #0
 8002834:	f04f 0400 	mov.w	r4, #0
 8002838:	0094      	lsls	r4, r2, #2
 800283a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800283e:	008b      	lsls	r3, r1, #2
 8002840:	461a      	mov	r2, r3
 8002842:	4623      	mov	r3, r4
 8002844:	4628      	mov	r0, r5
 8002846:	4631      	mov	r1, r6
 8002848:	f7fd fd22 	bl	8000290 <__aeabi_uldivmod>
 800284c:	4603      	mov	r3, r0
 800284e:	460c      	mov	r4, r1
 8002850:	461a      	mov	r2, r3
 8002852:	4b50      	ldr	r3, [pc, #320]	; (8002994 <UART_SetConfig+0x6f4>)
 8002854:	fba3 2302 	umull	r2, r3, r3, r2
 8002858:	095b      	lsrs	r3, r3, #5
 800285a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	469b      	mov	fp, r3
 8002862:	f04f 0c00 	mov.w	ip, #0
 8002866:	46d9      	mov	r9, fp
 8002868:	46e2      	mov	sl, ip
 800286a:	eb19 0309 	adds.w	r3, r9, r9
 800286e:	eb4a 040a 	adc.w	r4, sl, sl
 8002872:	4699      	mov	r9, r3
 8002874:	46a2      	mov	sl, r4
 8002876:	eb19 090b 	adds.w	r9, r9, fp
 800287a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800287e:	f04f 0100 	mov.w	r1, #0
 8002882:	f04f 0200 	mov.w	r2, #0
 8002886:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800288a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800288e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002892:	4689      	mov	r9, r1
 8002894:	4692      	mov	sl, r2
 8002896:	eb1b 0509 	adds.w	r5, fp, r9
 800289a:	eb4c 060a 	adc.w	r6, ip, sl
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	4619      	mov	r1, r3
 80028a4:	f04f 0200 	mov.w	r2, #0
 80028a8:	f04f 0300 	mov.w	r3, #0
 80028ac:	f04f 0400 	mov.w	r4, #0
 80028b0:	0094      	lsls	r4, r2, #2
 80028b2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80028b6:	008b      	lsls	r3, r1, #2
 80028b8:	461a      	mov	r2, r3
 80028ba:	4623      	mov	r3, r4
 80028bc:	4628      	mov	r0, r5
 80028be:	4631      	mov	r1, r6
 80028c0:	f7fd fce6 	bl	8000290 <__aeabi_uldivmod>
 80028c4:	4603      	mov	r3, r0
 80028c6:	460c      	mov	r4, r1
 80028c8:	461a      	mov	r2, r3
 80028ca:	4b32      	ldr	r3, [pc, #200]	; (8002994 <UART_SetConfig+0x6f4>)
 80028cc:	fba3 1302 	umull	r1, r3, r3, r2
 80028d0:	095b      	lsrs	r3, r3, #5
 80028d2:	2164      	movs	r1, #100	; 0x64
 80028d4:	fb01 f303 	mul.w	r3, r1, r3
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	011b      	lsls	r3, r3, #4
 80028dc:	3332      	adds	r3, #50	; 0x32
 80028de:	4a2d      	ldr	r2, [pc, #180]	; (8002994 <UART_SetConfig+0x6f4>)
 80028e0:	fba2 2303 	umull	r2, r3, r2, r3
 80028e4:	095b      	lsrs	r3, r3, #5
 80028e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028ea:	4498      	add	r8, r3
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	469b      	mov	fp, r3
 80028f0:	f04f 0c00 	mov.w	ip, #0
 80028f4:	46d9      	mov	r9, fp
 80028f6:	46e2      	mov	sl, ip
 80028f8:	eb19 0309 	adds.w	r3, r9, r9
 80028fc:	eb4a 040a 	adc.w	r4, sl, sl
 8002900:	4699      	mov	r9, r3
 8002902:	46a2      	mov	sl, r4
 8002904:	eb19 090b 	adds.w	r9, r9, fp
 8002908:	eb4a 0a0c 	adc.w	sl, sl, ip
 800290c:	f04f 0100 	mov.w	r1, #0
 8002910:	f04f 0200 	mov.w	r2, #0
 8002914:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002918:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800291c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002920:	4689      	mov	r9, r1
 8002922:	4692      	mov	sl, r2
 8002924:	eb1b 0509 	adds.w	r5, fp, r9
 8002928:	eb4c 060a 	adc.w	r6, ip, sl
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	4619      	mov	r1, r3
 8002932:	f04f 0200 	mov.w	r2, #0
 8002936:	f04f 0300 	mov.w	r3, #0
 800293a:	f04f 0400 	mov.w	r4, #0
 800293e:	0094      	lsls	r4, r2, #2
 8002940:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002944:	008b      	lsls	r3, r1, #2
 8002946:	461a      	mov	r2, r3
 8002948:	4623      	mov	r3, r4
 800294a:	4628      	mov	r0, r5
 800294c:	4631      	mov	r1, r6
 800294e:	f7fd fc9f 	bl	8000290 <__aeabi_uldivmod>
 8002952:	4603      	mov	r3, r0
 8002954:	460c      	mov	r4, r1
 8002956:	461a      	mov	r2, r3
 8002958:	4b0e      	ldr	r3, [pc, #56]	; (8002994 <UART_SetConfig+0x6f4>)
 800295a:	fba3 1302 	umull	r1, r3, r3, r2
 800295e:	095b      	lsrs	r3, r3, #5
 8002960:	2164      	movs	r1, #100	; 0x64
 8002962:	fb01 f303 	mul.w	r3, r1, r3
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	011b      	lsls	r3, r3, #4
 800296a:	3332      	adds	r3, #50	; 0x32
 800296c:	4a09      	ldr	r2, [pc, #36]	; (8002994 <UART_SetConfig+0x6f4>)
 800296e:	fba2 2303 	umull	r2, r3, r2, r3
 8002972:	095b      	lsrs	r3, r3, #5
 8002974:	f003 020f 	and.w	r2, r3, #15
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4442      	add	r2, r8
 800297e:	609a      	str	r2, [r3, #8]
}
 8002980:	e7ff      	b.n	8002982 <UART_SetConfig+0x6e2>
 8002982:	bf00      	nop
 8002984:	3714      	adds	r7, #20
 8002986:	46bd      	mov	sp, r7
 8002988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800298c:	40011000 	.word	0x40011000
 8002990:	40011400 	.word	0x40011400
 8002994:	51eb851f 	.word	0x51eb851f

08002998 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002998:	b480      	push	{r7}
 800299a:	b085      	sub	sp, #20
 800299c:	af00      	add	r7, sp, #0
 800299e:	4603      	mov	r3, r0
 80029a0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80029a2:	2300      	movs	r3, #0
 80029a4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80029a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029aa:	2b84      	cmp	r3, #132	; 0x84
 80029ac:	d005      	beq.n	80029ba <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80029ae:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	4413      	add	r3, r2
 80029b6:	3303      	adds	r3, #3
 80029b8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80029ba:	68fb      	ldr	r3, [r7, #12]
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3714      	adds	r7, #20
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80029ce:	f3ef 8305 	mrs	r3, IPSR
 80029d2:	607b      	str	r3, [r7, #4]
  return(result);
 80029d4:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	bf14      	ite	ne
 80029da:	2301      	movne	r3, #1
 80029dc:	2300      	moveq	r3, #0
 80029de:	b2db      	uxtb	r3, r3
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80029f0:	f001 f8fc 	bl	8003bec <vTaskStartScheduler>
  
  return osOK;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	bd80      	pop	{r7, pc}

080029fa <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80029fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029fc:	b089      	sub	sp, #36	; 0x24
 80029fe:	af04      	add	r7, sp, #16
 8002a00:	6078      	str	r0, [r7, #4]
 8002a02:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	695b      	ldr	r3, [r3, #20]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d020      	beq.n	8002a4e <osThreadCreate+0x54>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	699b      	ldr	r3, [r3, #24]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d01c      	beq.n	8002a4e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	685c      	ldr	r4, [r3, #4]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681d      	ldr	r5, [r3, #0]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	691e      	ldr	r6, [r3, #16]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7ff ffb6 	bl	8002998 <makeFreeRtosPriority>
 8002a2c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002a36:	9202      	str	r2, [sp, #8]
 8002a38:	9301      	str	r3, [sp, #4]
 8002a3a:	9100      	str	r1, [sp, #0]
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	4632      	mov	r2, r6
 8002a40:	4629      	mov	r1, r5
 8002a42:	4620      	mov	r0, r4
 8002a44:	f000 ff0f 	bl	8003866 <xTaskCreateStatic>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	60fb      	str	r3, [r7, #12]
 8002a4c:	e01c      	b.n	8002a88 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685c      	ldr	r4, [r3, #4]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002a5a:	b29e      	uxth	r6, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7ff ff98 	bl	8002998 <makeFreeRtosPriority>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	f107 030c 	add.w	r3, r7, #12
 8002a6e:	9301      	str	r3, [sp, #4]
 8002a70:	9200      	str	r2, [sp, #0]
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	4632      	mov	r2, r6
 8002a76:	4629      	mov	r1, r5
 8002a78:	4620      	mov	r0, r4
 8002a7a:	f000 ff4e 	bl	800391a <xTaskCreate>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d001      	beq.n	8002a88 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002a84:	2300      	movs	r3, #0
 8002a86:	e000      	b.n	8002a8a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002a88:	68fb      	ldr	r3, [r7, #12]
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3714      	adds	r7, #20
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a92 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002a92:	b580      	push	{r7, lr}
 8002a94:	b084      	sub	sp, #16
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d001      	beq.n	8002aa8 <osDelay+0x16>
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	e000      	b.n	8002aaa <osDelay+0x18>
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f001 f86a 	bl	8003b84 <vTaskDelay>
  
  return osOK;
 8002ab0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3710      	adds	r7, #16
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b086      	sub	sp, #24
 8002abe:	af02      	add	r7, sp, #8
 8002ac0:	6078      	str	r0, [r7, #4]
 8002ac2:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d010      	beq.n	8002aee <osSemaphoreCreate+0x34>
    if (count == 1) {
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d10b      	bne.n	8002aea <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685a      	ldr	r2, [r3, #4]
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	9300      	str	r3, [sp, #0]
 8002ada:	4613      	mov	r3, r2
 8002adc:	2200      	movs	r2, #0
 8002ade:	2100      	movs	r1, #0
 8002ae0:	2001      	movs	r0, #1
 8002ae2:	f000 f9bd 	bl	8002e60 <xQueueGenericCreateStatic>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	e016      	b.n	8002b18 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8002aea:	2300      	movs	r3, #0
 8002aec:	e014      	b.n	8002b18 <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d110      	bne.n	8002b16 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 8002af4:	2203      	movs	r2, #3
 8002af6:	2100      	movs	r1, #0
 8002af8:	2001      	movs	r0, #1
 8002afa:	f000 fa24 	bl	8002f46 <xQueueGenericCreate>
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d005      	beq.n	8002b12 <osSemaphoreCreate+0x58>
 8002b06:	2300      	movs	r3, #0
 8002b08:	2200      	movs	r2, #0
 8002b0a:	2100      	movs	r1, #0
 8002b0c:	68f8      	ldr	r0, [r7, #12]
 8002b0e:	f000 fa79 	bl	8003004 <xQueueGenericSend>
      return sema;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	e000      	b.n	8002b18 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8002b16:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3710      	adds	r7, #16
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d101      	bne.n	8002b38 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8002b34:	2380      	movs	r3, #128	; 0x80
 8002b36:	e03a      	b.n	8002bae <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b42:	d103      	bne.n	8002b4c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8002b44:	f04f 33ff 	mov.w	r3, #4294967295
 8002b48:	60fb      	str	r3, [r7, #12]
 8002b4a:	e009      	b.n	8002b60 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d006      	beq.n	8002b60 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d101      	bne.n	8002b60 <osSemaphoreWait+0x40>
      ticks = 1;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8002b60:	f7ff ff32 	bl	80029c8 <inHandlerMode>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d017      	beq.n	8002b9a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8002b6a:	f107 0308 	add.w	r3, r7, #8
 8002b6e:	461a      	mov	r2, r3
 8002b70:	2100      	movs	r1, #0
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f000 fcd2 	bl	800351c <xQueueReceiveFromISR>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d001      	beq.n	8002b82 <osSemaphoreWait+0x62>
      return osErrorOS;
 8002b7e:	23ff      	movs	r3, #255	; 0xff
 8002b80:	e015      	b.n	8002bae <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d011      	beq.n	8002bac <osSemaphoreWait+0x8c>
 8002b88:	4b0b      	ldr	r3, [pc, #44]	; (8002bb8 <osSemaphoreWait+0x98>)
 8002b8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b8e:	601a      	str	r2, [r3, #0]
 8002b90:	f3bf 8f4f 	dsb	sy
 8002b94:	f3bf 8f6f 	isb	sy
 8002b98:	e008      	b.n	8002bac <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8002b9a:	68f9      	ldr	r1, [r7, #12]
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f000 fbb5 	bl	800330c <xQueueSemaphoreTake>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d001      	beq.n	8002bac <osSemaphoreWait+0x8c>
    return osErrorOS;
 8002ba8:	23ff      	movs	r3, #255	; 0xff
 8002baa:	e000      	b.n	8002bae <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3710      	adds	r7, #16
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	e000ed04 	.word	0xe000ed04

08002bbc <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8002bcc:	f7ff fefc 	bl	80029c8 <inHandlerMode>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d016      	beq.n	8002c04 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8002bd6:	f107 0308 	add.w	r3, r7, #8
 8002bda:	4619      	mov	r1, r3
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f000 fb0b 	bl	80031f8 <xQueueGiveFromISR>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d001      	beq.n	8002bec <osSemaphoreRelease+0x30>
      return osErrorOS;
 8002be8:	23ff      	movs	r3, #255	; 0xff
 8002bea:	e017      	b.n	8002c1c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d013      	beq.n	8002c1a <osSemaphoreRelease+0x5e>
 8002bf2:	4b0c      	ldr	r3, [pc, #48]	; (8002c24 <osSemaphoreRelease+0x68>)
 8002bf4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bf8:	601a      	str	r2, [r3, #0]
 8002bfa:	f3bf 8f4f 	dsb	sy
 8002bfe:	f3bf 8f6f 	isb	sy
 8002c02:	e00a      	b.n	8002c1a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8002c04:	2300      	movs	r3, #0
 8002c06:	2200      	movs	r2, #0
 8002c08:	2100      	movs	r1, #0
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f000 f9fa 	bl	8003004 <xQueueGenericSend>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d001      	beq.n	8002c1a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8002c16:	23ff      	movs	r3, #255	; 0xff
 8002c18:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3710      	adds	r7, #16
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	e000ed04 	.word	0xe000ed04

08002c28 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f103 0208 	add.w	r2, r3, #8
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c40:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f103 0208 	add.w	r2, r3, #8
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f103 0208 	add.w	r2, r3, #8
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002c5c:	bf00      	nop
 8002c5e:	370c      	adds	r7, #12
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr

08002c68 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002c76:	bf00      	nop
 8002c78:	370c      	adds	r7, #12
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr

08002c82 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002c82:	b480      	push	{r7}
 8002c84:	b085      	sub	sp, #20
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
 8002c8a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	68fa      	ldr	r2, [r7, #12]
 8002c96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	689a      	ldr	r2, [r3, #8]
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	683a      	ldr	r2, [r7, #0]
 8002ca6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	683a      	ldr	r2, [r7, #0]
 8002cac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	1c5a      	adds	r2, r3, #1
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	601a      	str	r2, [r3, #0]
}
 8002cbe:	bf00      	nop
 8002cc0:	3714      	adds	r7, #20
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr

08002cca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002cca:	b480      	push	{r7}
 8002ccc:	b085      	sub	sp, #20
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
 8002cd2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ce0:	d103      	bne.n	8002cea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	60fb      	str	r3, [r7, #12]
 8002ce8:	e00c      	b.n	8002d04 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	3308      	adds	r3, #8
 8002cee:	60fb      	str	r3, [r7, #12]
 8002cf0:	e002      	b.n	8002cf8 <vListInsert+0x2e>
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	60fb      	str	r3, [r7, #12]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	68ba      	ldr	r2, [r7, #8]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d2f6      	bcs.n	8002cf2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	685a      	ldr	r2, [r3, #4]
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	683a      	ldr	r2, [r7, #0]
 8002d12:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	68fa      	ldr	r2, [r7, #12]
 8002d18:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	683a      	ldr	r2, [r7, #0]
 8002d1e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	1c5a      	adds	r2, r3, #1
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	601a      	str	r2, [r3, #0]
}
 8002d30:	bf00      	nop
 8002d32:	3714      	adds	r7, #20
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b085      	sub	sp, #20
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	691b      	ldr	r3, [r3, #16]
 8002d48:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	6892      	ldr	r2, [r2, #8]
 8002d52:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	6852      	ldr	r2, [r2, #4]
 8002d5c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d103      	bne.n	8002d70 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	689a      	ldr	r2, [r3, #8]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	1e5a      	subs	r2, r3, #1
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3714      	adds	r7, #20
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d109      	bne.n	8002db8 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002da8:	f383 8811 	msr	BASEPRI, r3
 8002dac:	f3bf 8f6f 	isb	sy
 8002db0:	f3bf 8f4f 	dsb	sy
 8002db4:	60bb      	str	r3, [r7, #8]
 8002db6:	e7fe      	b.n	8002db6 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8002db8:	f001 fe68 	bl	8004a8c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dc4:	68f9      	ldr	r1, [r7, #12]
 8002dc6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002dc8:	fb01 f303 	mul.w	r3, r1, r3
 8002dcc:	441a      	add	r2, r3
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002de8:	3b01      	subs	r3, #1
 8002dea:	68f9      	ldr	r1, [r7, #12]
 8002dec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002dee:	fb01 f303 	mul.w	r3, r1, r3
 8002df2:	441a      	add	r2, r3
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	22ff      	movs	r2, #255	; 0xff
 8002dfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	22ff      	movs	r2, #255	; 0xff
 8002e04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d114      	bne.n	8002e38 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	691b      	ldr	r3, [r3, #16]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d01a      	beq.n	8002e4c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	3310      	adds	r3, #16
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f001 f924 	bl	8004068 <xTaskRemoveFromEventList>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d012      	beq.n	8002e4c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002e26:	4b0d      	ldr	r3, [pc, #52]	; (8002e5c <xQueueGenericReset+0xcc>)
 8002e28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e2c:	601a      	str	r2, [r3, #0]
 8002e2e:	f3bf 8f4f 	dsb	sy
 8002e32:	f3bf 8f6f 	isb	sy
 8002e36:	e009      	b.n	8002e4c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	3310      	adds	r3, #16
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7ff fef3 	bl	8002c28 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	3324      	adds	r3, #36	; 0x24
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7ff feee 	bl	8002c28 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002e4c:	f001 fe4c 	bl	8004ae8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002e50:	2301      	movs	r3, #1
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3710      	adds	r7, #16
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	e000ed04 	.word	0xe000ed04

08002e60 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b08e      	sub	sp, #56	; 0x38
 8002e64:	af02      	add	r7, sp, #8
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	60b9      	str	r1, [r7, #8]
 8002e6a:	607a      	str	r2, [r7, #4]
 8002e6c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d109      	bne.n	8002e88 <xQueueGenericCreateStatic+0x28>
 8002e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e78:	f383 8811 	msr	BASEPRI, r3
 8002e7c:	f3bf 8f6f 	isb	sy
 8002e80:	f3bf 8f4f 	dsb	sy
 8002e84:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e86:	e7fe      	b.n	8002e86 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d109      	bne.n	8002ea2 <xQueueGenericCreateStatic+0x42>
 8002e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e92:	f383 8811 	msr	BASEPRI, r3
 8002e96:	f3bf 8f6f 	isb	sy
 8002e9a:	f3bf 8f4f 	dsb	sy
 8002e9e:	627b      	str	r3, [r7, #36]	; 0x24
 8002ea0:	e7fe      	b.n	8002ea0 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d002      	beq.n	8002eae <xQueueGenericCreateStatic+0x4e>
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d001      	beq.n	8002eb2 <xQueueGenericCreateStatic+0x52>
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e000      	b.n	8002eb4 <xQueueGenericCreateStatic+0x54>
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d109      	bne.n	8002ecc <xQueueGenericCreateStatic+0x6c>
 8002eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ebc:	f383 8811 	msr	BASEPRI, r3
 8002ec0:	f3bf 8f6f 	isb	sy
 8002ec4:	f3bf 8f4f 	dsb	sy
 8002ec8:	623b      	str	r3, [r7, #32]
 8002eca:	e7fe      	b.n	8002eca <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d102      	bne.n	8002ed8 <xQueueGenericCreateStatic+0x78>
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d101      	bne.n	8002edc <xQueueGenericCreateStatic+0x7c>
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e000      	b.n	8002ede <xQueueGenericCreateStatic+0x7e>
 8002edc:	2300      	movs	r3, #0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d109      	bne.n	8002ef6 <xQueueGenericCreateStatic+0x96>
 8002ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ee6:	f383 8811 	msr	BASEPRI, r3
 8002eea:	f3bf 8f6f 	isb	sy
 8002eee:	f3bf 8f4f 	dsb	sy
 8002ef2:	61fb      	str	r3, [r7, #28]
 8002ef4:	e7fe      	b.n	8002ef4 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002ef6:	2348      	movs	r3, #72	; 0x48
 8002ef8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	2b48      	cmp	r3, #72	; 0x48
 8002efe:	d009      	beq.n	8002f14 <xQueueGenericCreateStatic+0xb4>
 8002f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f04:	f383 8811 	msr	BASEPRI, r3
 8002f08:	f3bf 8f6f 	isb	sy
 8002f0c:	f3bf 8f4f 	dsb	sy
 8002f10:	61bb      	str	r3, [r7, #24]
 8002f12:	e7fe      	b.n	8002f12 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002f14:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d00d      	beq.n	8002f3c <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002f28:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f2e:	9300      	str	r3, [sp, #0]
 8002f30:	4613      	mov	r3, r2
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	68b9      	ldr	r1, [r7, #8]
 8002f36:	68f8      	ldr	r0, [r7, #12]
 8002f38:	f000 f844 	bl	8002fc4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3730      	adds	r7, #48	; 0x30
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}

08002f46 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002f46:	b580      	push	{r7, lr}
 8002f48:	b08a      	sub	sp, #40	; 0x28
 8002f4a:	af02      	add	r7, sp, #8
 8002f4c:	60f8      	str	r0, [r7, #12]
 8002f4e:	60b9      	str	r1, [r7, #8]
 8002f50:	4613      	mov	r3, r2
 8002f52:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d109      	bne.n	8002f6e <xQueueGenericCreate+0x28>
 8002f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f5e:	f383 8811 	msr	BASEPRI, r3
 8002f62:	f3bf 8f6f 	isb	sy
 8002f66:	f3bf 8f4f 	dsb	sy
 8002f6a:	613b      	str	r3, [r7, #16]
 8002f6c:	e7fe      	b.n	8002f6c <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d102      	bne.n	8002f7a <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002f74:	2300      	movs	r3, #0
 8002f76:	61fb      	str	r3, [r7, #28]
 8002f78:	e004      	b.n	8002f84 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	68ba      	ldr	r2, [r7, #8]
 8002f7e:	fb02 f303 	mul.w	r3, r2, r3
 8002f82:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	3348      	adds	r3, #72	; 0x48
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f001 fe99 	bl	8004cc0 <pvPortMalloc>
 8002f8e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d011      	beq.n	8002fba <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	3348      	adds	r3, #72	; 0x48
 8002f9e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002fa8:	79fa      	ldrb	r2, [r7, #7]
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	9300      	str	r3, [sp, #0]
 8002fae:	4613      	mov	r3, r2
 8002fb0:	697a      	ldr	r2, [r7, #20]
 8002fb2:	68b9      	ldr	r1, [r7, #8]
 8002fb4:	68f8      	ldr	r0, [r7, #12]
 8002fb6:	f000 f805 	bl	8002fc4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002fba:	69bb      	ldr	r3, [r7, #24]
	}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3720      	adds	r7, #32
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	60b9      	str	r1, [r7, #8]
 8002fce:	607a      	str	r2, [r7, #4]
 8002fd0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d103      	bne.n	8002fe0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002fd8:	69bb      	ldr	r3, [r7, #24]
 8002fda:	69ba      	ldr	r2, [r7, #24]
 8002fdc:	601a      	str	r2, [r3, #0]
 8002fde:	e002      	b.n	8002fe6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	68fa      	ldr	r2, [r7, #12]
 8002fea:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	68ba      	ldr	r2, [r7, #8]
 8002ff0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002ff2:	2101      	movs	r1, #1
 8002ff4:	69b8      	ldr	r0, [r7, #24]
 8002ff6:	f7ff fecb 	bl	8002d90 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002ffa:	bf00      	nop
 8002ffc:	3710      	adds	r7, #16
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
	...

08003004 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b08e      	sub	sp, #56	; 0x38
 8003008:	af00      	add	r7, sp, #0
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	60b9      	str	r1, [r7, #8]
 800300e:	607a      	str	r2, [r7, #4]
 8003010:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003012:	2300      	movs	r3, #0
 8003014:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800301a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800301c:	2b00      	cmp	r3, #0
 800301e:	d109      	bne.n	8003034 <xQueueGenericSend+0x30>
 8003020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003024:	f383 8811 	msr	BASEPRI, r3
 8003028:	f3bf 8f6f 	isb	sy
 800302c:	f3bf 8f4f 	dsb	sy
 8003030:	62bb      	str	r3, [r7, #40]	; 0x28
 8003032:	e7fe      	b.n	8003032 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d103      	bne.n	8003042 <xQueueGenericSend+0x3e>
 800303a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800303c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303e:	2b00      	cmp	r3, #0
 8003040:	d101      	bne.n	8003046 <xQueueGenericSend+0x42>
 8003042:	2301      	movs	r3, #1
 8003044:	e000      	b.n	8003048 <xQueueGenericSend+0x44>
 8003046:	2300      	movs	r3, #0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d109      	bne.n	8003060 <xQueueGenericSend+0x5c>
 800304c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003050:	f383 8811 	msr	BASEPRI, r3
 8003054:	f3bf 8f6f 	isb	sy
 8003058:	f3bf 8f4f 	dsb	sy
 800305c:	627b      	str	r3, [r7, #36]	; 0x24
 800305e:	e7fe      	b.n	800305e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	2b02      	cmp	r3, #2
 8003064:	d103      	bne.n	800306e <xQueueGenericSend+0x6a>
 8003066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800306a:	2b01      	cmp	r3, #1
 800306c:	d101      	bne.n	8003072 <xQueueGenericSend+0x6e>
 800306e:	2301      	movs	r3, #1
 8003070:	e000      	b.n	8003074 <xQueueGenericSend+0x70>
 8003072:	2300      	movs	r3, #0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d109      	bne.n	800308c <xQueueGenericSend+0x88>
 8003078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800307c:	f383 8811 	msr	BASEPRI, r3
 8003080:	f3bf 8f6f 	isb	sy
 8003084:	f3bf 8f4f 	dsb	sy
 8003088:	623b      	str	r3, [r7, #32]
 800308a:	e7fe      	b.n	800308a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800308c:	f001 f9a2 	bl	80043d4 <xTaskGetSchedulerState>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d102      	bne.n	800309c <xQueueGenericSend+0x98>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d101      	bne.n	80030a0 <xQueueGenericSend+0x9c>
 800309c:	2301      	movs	r3, #1
 800309e:	e000      	b.n	80030a2 <xQueueGenericSend+0x9e>
 80030a0:	2300      	movs	r3, #0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d109      	bne.n	80030ba <xQueueGenericSend+0xb6>
 80030a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030aa:	f383 8811 	msr	BASEPRI, r3
 80030ae:	f3bf 8f6f 	isb	sy
 80030b2:	f3bf 8f4f 	dsb	sy
 80030b6:	61fb      	str	r3, [r7, #28]
 80030b8:	e7fe      	b.n	80030b8 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80030ba:	f001 fce7 	bl	8004a8c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80030be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d302      	bcc.n	80030d0 <xQueueGenericSend+0xcc>
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d129      	bne.n	8003124 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80030d0:	683a      	ldr	r2, [r7, #0]
 80030d2:	68b9      	ldr	r1, [r7, #8]
 80030d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030d6:	f000 fab6 	bl	8003646 <prvCopyDataToQueue>
 80030da:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80030dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d010      	beq.n	8003106 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80030e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e6:	3324      	adds	r3, #36	; 0x24
 80030e8:	4618      	mov	r0, r3
 80030ea:	f000 ffbd 	bl	8004068 <xTaskRemoveFromEventList>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d013      	beq.n	800311c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80030f4:	4b3f      	ldr	r3, [pc, #252]	; (80031f4 <xQueueGenericSend+0x1f0>)
 80030f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030fa:	601a      	str	r2, [r3, #0]
 80030fc:	f3bf 8f4f 	dsb	sy
 8003100:	f3bf 8f6f 	isb	sy
 8003104:	e00a      	b.n	800311c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003108:	2b00      	cmp	r3, #0
 800310a:	d007      	beq.n	800311c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800310c:	4b39      	ldr	r3, [pc, #228]	; (80031f4 <xQueueGenericSend+0x1f0>)
 800310e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003112:	601a      	str	r2, [r3, #0]
 8003114:	f3bf 8f4f 	dsb	sy
 8003118:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800311c:	f001 fce4 	bl	8004ae8 <vPortExitCritical>
				return pdPASS;
 8003120:	2301      	movs	r3, #1
 8003122:	e063      	b.n	80031ec <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d103      	bne.n	8003132 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800312a:	f001 fcdd 	bl	8004ae8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800312e:	2300      	movs	r3, #0
 8003130:	e05c      	b.n	80031ec <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003134:	2b00      	cmp	r3, #0
 8003136:	d106      	bne.n	8003146 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003138:	f107 0314 	add.w	r3, r7, #20
 800313c:	4618      	mov	r0, r3
 800313e:	f000 fff5 	bl	800412c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003142:	2301      	movs	r3, #1
 8003144:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003146:	f001 fccf 	bl	8004ae8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800314a:	f000 fdad 	bl	8003ca8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800314e:	f001 fc9d 	bl	8004a8c <vPortEnterCritical>
 8003152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003154:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003158:	b25b      	sxtb	r3, r3
 800315a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800315e:	d103      	bne.n	8003168 <xQueueGenericSend+0x164>
 8003160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003162:	2200      	movs	r2, #0
 8003164:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800316a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800316e:	b25b      	sxtb	r3, r3
 8003170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003174:	d103      	bne.n	800317e <xQueueGenericSend+0x17a>
 8003176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003178:	2200      	movs	r2, #0
 800317a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800317e:	f001 fcb3 	bl	8004ae8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003182:	1d3a      	adds	r2, r7, #4
 8003184:	f107 0314 	add.w	r3, r7, #20
 8003188:	4611      	mov	r1, r2
 800318a:	4618      	mov	r0, r3
 800318c:	f000 ffe4 	bl	8004158 <xTaskCheckForTimeOut>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d124      	bne.n	80031e0 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003196:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003198:	f000 fb4d 	bl	8003836 <prvIsQueueFull>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d018      	beq.n	80031d4 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80031a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a4:	3310      	adds	r3, #16
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	4611      	mov	r1, r2
 80031aa:	4618      	mov	r0, r3
 80031ac:	f000 ff38 	bl	8004020 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80031b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80031b2:	f000 fad8 	bl	8003766 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80031b6:	f000 fd85 	bl	8003cc4 <xTaskResumeAll>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	f47f af7c 	bne.w	80030ba <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80031c2:	4b0c      	ldr	r3, [pc, #48]	; (80031f4 <xQueueGenericSend+0x1f0>)
 80031c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031c8:	601a      	str	r2, [r3, #0]
 80031ca:	f3bf 8f4f 	dsb	sy
 80031ce:	f3bf 8f6f 	isb	sy
 80031d2:	e772      	b.n	80030ba <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80031d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80031d6:	f000 fac6 	bl	8003766 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80031da:	f000 fd73 	bl	8003cc4 <xTaskResumeAll>
 80031de:	e76c      	b.n	80030ba <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80031e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80031e2:	f000 fac0 	bl	8003766 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80031e6:	f000 fd6d 	bl	8003cc4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80031ea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3738      	adds	r7, #56	; 0x38
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	e000ed04 	.word	0xe000ed04

080031f8 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b08e      	sub	sp, #56	; 0x38
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8003206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003208:	2b00      	cmp	r3, #0
 800320a:	d109      	bne.n	8003220 <xQueueGiveFromISR+0x28>
 800320c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003210:	f383 8811 	msr	BASEPRI, r3
 8003214:	f3bf 8f6f 	isb	sy
 8003218:	f3bf 8f4f 	dsb	sy
 800321c:	623b      	str	r3, [r7, #32]
 800321e:	e7fe      	b.n	800321e <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003224:	2b00      	cmp	r3, #0
 8003226:	d009      	beq.n	800323c <xQueueGiveFromISR+0x44>
 8003228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800322c:	f383 8811 	msr	BASEPRI, r3
 8003230:	f3bf 8f6f 	isb	sy
 8003234:	f3bf 8f4f 	dsb	sy
 8003238:	61fb      	str	r3, [r7, #28]
 800323a:	e7fe      	b.n	800323a <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800323c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d103      	bne.n	800324c <xQueueGiveFromISR+0x54>
 8003244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d101      	bne.n	8003250 <xQueueGiveFromISR+0x58>
 800324c:	2301      	movs	r3, #1
 800324e:	e000      	b.n	8003252 <xQueueGiveFromISR+0x5a>
 8003250:	2300      	movs	r3, #0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d109      	bne.n	800326a <xQueueGiveFromISR+0x72>
 8003256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800325a:	f383 8811 	msr	BASEPRI, r3
 800325e:	f3bf 8f6f 	isb	sy
 8003262:	f3bf 8f4f 	dsb	sy
 8003266:	61bb      	str	r3, [r7, #24]
 8003268:	e7fe      	b.n	8003268 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800326a:	f001 fceb 	bl	8004c44 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800326e:	f3ef 8211 	mrs	r2, BASEPRI
 8003272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003276:	f383 8811 	msr	BASEPRI, r3
 800327a:	f3bf 8f6f 	isb	sy
 800327e:	f3bf 8f4f 	dsb	sy
 8003282:	617a      	str	r2, [r7, #20]
 8003284:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003286:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003288:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800328a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800328c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800328e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003294:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003296:	429a      	cmp	r2, r3
 8003298:	d22b      	bcs.n	80032f2 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800329a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800329c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80032a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a6:	1c5a      	adds	r2, r3, #1
 80032a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032aa:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80032ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80032b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032b4:	d112      	bne.n	80032dc <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80032b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d016      	beq.n	80032ec <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80032be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032c0:	3324      	adds	r3, #36	; 0x24
 80032c2:	4618      	mov	r0, r3
 80032c4:	f000 fed0 	bl	8004068 <xTaskRemoveFromEventList>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d00e      	beq.n	80032ec <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d00b      	beq.n	80032ec <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	2201      	movs	r2, #1
 80032d8:	601a      	str	r2, [r3, #0]
 80032da:	e007      	b.n	80032ec <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80032dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80032e0:	3301      	adds	r3, #1
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	b25a      	sxtb	r2, r3
 80032e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80032ec:	2301      	movs	r3, #1
 80032ee:	637b      	str	r3, [r7, #52]	; 0x34
 80032f0:	e001      	b.n	80032f6 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80032f2:	2300      	movs	r3, #0
 80032f4:	637b      	str	r3, [r7, #52]	; 0x34
 80032f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032f8:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003302:	4618      	mov	r0, r3
 8003304:	3738      	adds	r7, #56	; 0x38
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
	...

0800330c <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b08e      	sub	sp, #56	; 0x38
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003316:	2300      	movs	r3, #0
 8003318:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800331e:	2300      	movs	r3, #0
 8003320:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003324:	2b00      	cmp	r3, #0
 8003326:	d109      	bne.n	800333c <xQueueSemaphoreTake+0x30>
	__asm volatile
 8003328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800332c:	f383 8811 	msr	BASEPRI, r3
 8003330:	f3bf 8f6f 	isb	sy
 8003334:	f3bf 8f4f 	dsb	sy
 8003338:	623b      	str	r3, [r7, #32]
 800333a:	e7fe      	b.n	800333a <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800333c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800333e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003340:	2b00      	cmp	r3, #0
 8003342:	d009      	beq.n	8003358 <xQueueSemaphoreTake+0x4c>
 8003344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003348:	f383 8811 	msr	BASEPRI, r3
 800334c:	f3bf 8f6f 	isb	sy
 8003350:	f3bf 8f4f 	dsb	sy
 8003354:	61fb      	str	r3, [r7, #28]
 8003356:	e7fe      	b.n	8003356 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003358:	f001 f83c 	bl	80043d4 <xTaskGetSchedulerState>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d102      	bne.n	8003368 <xQueueSemaphoreTake+0x5c>
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d101      	bne.n	800336c <xQueueSemaphoreTake+0x60>
 8003368:	2301      	movs	r3, #1
 800336a:	e000      	b.n	800336e <xQueueSemaphoreTake+0x62>
 800336c:	2300      	movs	r3, #0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d109      	bne.n	8003386 <xQueueSemaphoreTake+0x7a>
 8003372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003376:	f383 8811 	msr	BASEPRI, r3
 800337a:	f3bf 8f6f 	isb	sy
 800337e:	f3bf 8f4f 	dsb	sy
 8003382:	61bb      	str	r3, [r7, #24]
 8003384:	e7fe      	b.n	8003384 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003386:	f001 fb81 	bl	8004a8c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800338a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800338c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800338e:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003392:	2b00      	cmp	r3, #0
 8003394:	d024      	beq.n	80033e0 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003398:	1e5a      	subs	r2, r3, #1
 800339a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800339c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800339e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d104      	bne.n	80033b0 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80033a6:	f001 f9cf 	bl	8004748 <pvTaskIncrementMutexHeldCount>
 80033aa:	4602      	mov	r2, r0
 80033ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ae:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80033b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033b2:	691b      	ldr	r3, [r3, #16]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d00f      	beq.n	80033d8 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80033b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ba:	3310      	adds	r3, #16
 80033bc:	4618      	mov	r0, r3
 80033be:	f000 fe53 	bl	8004068 <xTaskRemoveFromEventList>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d007      	beq.n	80033d8 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80033c8:	4b53      	ldr	r3, [pc, #332]	; (8003518 <xQueueSemaphoreTake+0x20c>)
 80033ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033ce:	601a      	str	r2, [r3, #0]
 80033d0:	f3bf 8f4f 	dsb	sy
 80033d4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80033d8:	f001 fb86 	bl	8004ae8 <vPortExitCritical>
				return pdPASS;
 80033dc:	2301      	movs	r3, #1
 80033de:	e096      	b.n	800350e <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d110      	bne.n	8003408 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80033e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d009      	beq.n	8003400 <xQueueSemaphoreTake+0xf4>
 80033ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033f0:	f383 8811 	msr	BASEPRI, r3
 80033f4:	f3bf 8f6f 	isb	sy
 80033f8:	f3bf 8f4f 	dsb	sy
 80033fc:	617b      	str	r3, [r7, #20]
 80033fe:	e7fe      	b.n	80033fe <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003400:	f001 fb72 	bl	8004ae8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003404:	2300      	movs	r3, #0
 8003406:	e082      	b.n	800350e <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800340a:	2b00      	cmp	r3, #0
 800340c:	d106      	bne.n	800341c <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800340e:	f107 030c 	add.w	r3, r7, #12
 8003412:	4618      	mov	r0, r3
 8003414:	f000 fe8a 	bl	800412c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003418:	2301      	movs	r3, #1
 800341a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800341c:	f001 fb64 	bl	8004ae8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003420:	f000 fc42 	bl	8003ca8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003424:	f001 fb32 	bl	8004a8c <vPortEnterCritical>
 8003428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800342a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800342e:	b25b      	sxtb	r3, r3
 8003430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003434:	d103      	bne.n	800343e <xQueueSemaphoreTake+0x132>
 8003436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003438:	2200      	movs	r2, #0
 800343a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800343e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003440:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003444:	b25b      	sxtb	r3, r3
 8003446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800344a:	d103      	bne.n	8003454 <xQueueSemaphoreTake+0x148>
 800344c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800344e:	2200      	movs	r2, #0
 8003450:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003454:	f001 fb48 	bl	8004ae8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003458:	463a      	mov	r2, r7
 800345a:	f107 030c 	add.w	r3, r7, #12
 800345e:	4611      	mov	r1, r2
 8003460:	4618      	mov	r0, r3
 8003462:	f000 fe79 	bl	8004158 <xTaskCheckForTimeOut>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d132      	bne.n	80034d2 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800346c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800346e:	f000 f9cc 	bl	800380a <prvIsQueueEmpty>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d026      	beq.n	80034c6 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d109      	bne.n	8003494 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8003480:	f001 fb04 	bl	8004a8c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	4618      	mov	r0, r3
 800348a:	f000 ffc1 	bl	8004410 <xTaskPriorityInherit>
 800348e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003490:	f001 fb2a 	bl	8004ae8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003496:	3324      	adds	r3, #36	; 0x24
 8003498:	683a      	ldr	r2, [r7, #0]
 800349a:	4611      	mov	r1, r2
 800349c:	4618      	mov	r0, r3
 800349e:	f000 fdbf 	bl	8004020 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80034a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80034a4:	f000 f95f 	bl	8003766 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80034a8:	f000 fc0c 	bl	8003cc4 <xTaskResumeAll>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	f47f af69 	bne.w	8003386 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 80034b4:	4b18      	ldr	r3, [pc, #96]	; (8003518 <xQueueSemaphoreTake+0x20c>)
 80034b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034ba:	601a      	str	r2, [r3, #0]
 80034bc:	f3bf 8f4f 	dsb	sy
 80034c0:	f3bf 8f6f 	isb	sy
 80034c4:	e75f      	b.n	8003386 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80034c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80034c8:	f000 f94d 	bl	8003766 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80034cc:	f000 fbfa 	bl	8003cc4 <xTaskResumeAll>
 80034d0:	e759      	b.n	8003386 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80034d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80034d4:	f000 f947 	bl	8003766 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80034d8:	f000 fbf4 	bl	8003cc4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80034dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80034de:	f000 f994 	bl	800380a <prvIsQueueEmpty>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	f43f af4e 	beq.w	8003386 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80034ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d00d      	beq.n	800350c <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 80034f0:	f001 facc 	bl	8004a8c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80034f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80034f6:	f000 f88e 	bl	8003616 <prvGetDisinheritPriorityAfterTimeout>
 80034fa:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80034fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003502:	4618      	mov	r0, r3
 8003504:	f001 f888 	bl	8004618 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003508:	f001 faee 	bl	8004ae8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800350c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800350e:	4618      	mov	r0, r3
 8003510:	3738      	adds	r7, #56	; 0x38
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	e000ed04 	.word	0xe000ed04

0800351c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b08e      	sub	sp, #56	; 0x38
 8003520:	af00      	add	r7, sp, #0
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	60b9      	str	r1, [r7, #8]
 8003526:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800352c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800352e:	2b00      	cmp	r3, #0
 8003530:	d109      	bne.n	8003546 <xQueueReceiveFromISR+0x2a>
 8003532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003536:	f383 8811 	msr	BASEPRI, r3
 800353a:	f3bf 8f6f 	isb	sy
 800353e:	f3bf 8f4f 	dsb	sy
 8003542:	623b      	str	r3, [r7, #32]
 8003544:	e7fe      	b.n	8003544 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d103      	bne.n	8003554 <xQueueReceiveFromISR+0x38>
 800354c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800354e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003550:	2b00      	cmp	r3, #0
 8003552:	d101      	bne.n	8003558 <xQueueReceiveFromISR+0x3c>
 8003554:	2301      	movs	r3, #1
 8003556:	e000      	b.n	800355a <xQueueReceiveFromISR+0x3e>
 8003558:	2300      	movs	r3, #0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d109      	bne.n	8003572 <xQueueReceiveFromISR+0x56>
 800355e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003562:	f383 8811 	msr	BASEPRI, r3
 8003566:	f3bf 8f6f 	isb	sy
 800356a:	f3bf 8f4f 	dsb	sy
 800356e:	61fb      	str	r3, [r7, #28]
 8003570:	e7fe      	b.n	8003570 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003572:	f001 fb67 	bl	8004c44 <vPortValidateInterruptPriority>
	__asm volatile
 8003576:	f3ef 8211 	mrs	r2, BASEPRI
 800357a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800357e:	f383 8811 	msr	BASEPRI, r3
 8003582:	f3bf 8f6f 	isb	sy
 8003586:	f3bf 8f4f 	dsb	sy
 800358a:	61ba      	str	r2, [r7, #24]
 800358c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800358e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003590:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003596:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800359a:	2b00      	cmp	r3, #0
 800359c:	d02f      	beq.n	80035fe <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800359e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80035a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80035a8:	68b9      	ldr	r1, [r7, #8]
 80035aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80035ac:	f000 f8b5 	bl	800371a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80035b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035b2:	1e5a      	subs	r2, r3, #1
 80035b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035b6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80035b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80035bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c0:	d112      	bne.n	80035e8 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80035c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d016      	beq.n	80035f8 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80035ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035cc:	3310      	adds	r3, #16
 80035ce:	4618      	mov	r0, r3
 80035d0:	f000 fd4a 	bl	8004068 <xTaskRemoveFromEventList>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d00e      	beq.n	80035f8 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d00b      	beq.n	80035f8 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	601a      	str	r2, [r3, #0]
 80035e6:	e007      	b.n	80035f8 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80035e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80035ec:	3301      	adds	r3, #1
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	b25a      	sxtb	r2, r3
 80035f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80035f8:	2301      	movs	r3, #1
 80035fa:	637b      	str	r3, [r7, #52]	; 0x34
 80035fc:	e001      	b.n	8003602 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 80035fe:	2300      	movs	r3, #0
 8003600:	637b      	str	r3, [r7, #52]	; 0x34
 8003602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003604:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800360c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800360e:	4618      	mov	r0, r3
 8003610:	3738      	adds	r7, #56	; 0x38
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}

08003616 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003616:	b480      	push	{r7}
 8003618:	b085      	sub	sp, #20
 800361a:	af00      	add	r7, sp, #0
 800361c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003622:	2b00      	cmp	r3, #0
 8003624:	d006      	beq.n	8003634 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f1c3 0307 	rsb	r3, r3, #7
 8003630:	60fb      	str	r3, [r7, #12]
 8003632:	e001      	b.n	8003638 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003634:	2300      	movs	r3, #0
 8003636:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003638:	68fb      	ldr	r3, [r7, #12]
	}
 800363a:	4618      	mov	r0, r3
 800363c:	3714      	adds	r7, #20
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr

08003646 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003646:	b580      	push	{r7, lr}
 8003648:	b086      	sub	sp, #24
 800364a:	af00      	add	r7, sp, #0
 800364c:	60f8      	str	r0, [r7, #12]
 800364e:	60b9      	str	r1, [r7, #8]
 8003650:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003652:	2300      	movs	r3, #0
 8003654:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800365a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003660:	2b00      	cmp	r3, #0
 8003662:	d10d      	bne.n	8003680 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d14d      	bne.n	8003708 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	4618      	mov	r0, r3
 8003672:	f000 ff4d 	bl	8004510 <xTaskPriorityDisinherit>
 8003676:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2200      	movs	r2, #0
 800367c:	609a      	str	r2, [r3, #8]
 800367e:	e043      	b.n	8003708 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d119      	bne.n	80036ba <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	6858      	ldr	r0, [r3, #4]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368e:	461a      	mov	r2, r3
 8003690:	68b9      	ldr	r1, [r7, #8]
 8003692:	f001 fd15 	bl	80050c0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	685a      	ldr	r2, [r3, #4]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369e:	441a      	add	r2, r3
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	685a      	ldr	r2, [r3, #4]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d32b      	bcc.n	8003708 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	605a      	str	r2, [r3, #4]
 80036b8:	e026      	b.n	8003708 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	68d8      	ldr	r0, [r3, #12]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c2:	461a      	mov	r2, r3
 80036c4:	68b9      	ldr	r1, [r7, #8]
 80036c6:	f001 fcfb 	bl	80050c0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	68da      	ldr	r2, [r3, #12]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d2:	425b      	negs	r3, r3
 80036d4:	441a      	add	r2, r3
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	68da      	ldr	r2, [r3, #12]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d207      	bcs.n	80036f6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	689a      	ldr	r2, [r3, #8]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ee:	425b      	negs	r3, r3
 80036f0:	441a      	add	r2, r3
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d105      	bne.n	8003708 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d002      	beq.n	8003708 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	3b01      	subs	r3, #1
 8003706:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	1c5a      	adds	r2, r3, #1
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003710:	697b      	ldr	r3, [r7, #20]
}
 8003712:	4618      	mov	r0, r3
 8003714:	3718      	adds	r7, #24
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}

0800371a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800371a:	b580      	push	{r7, lr}
 800371c:	b082      	sub	sp, #8
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
 8003722:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003728:	2b00      	cmp	r3, #0
 800372a:	d018      	beq.n	800375e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	68da      	ldr	r2, [r3, #12]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003734:	441a      	add	r2, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	68da      	ldr	r2, [r3, #12]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	429a      	cmp	r2, r3
 8003744:	d303      	bcc.n	800374e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	68d9      	ldr	r1, [r3, #12]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003756:	461a      	mov	r2, r3
 8003758:	6838      	ldr	r0, [r7, #0]
 800375a:	f001 fcb1 	bl	80050c0 <memcpy>
	}
}
 800375e:	bf00      	nop
 8003760:	3708      	adds	r7, #8
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}

08003766 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003766:	b580      	push	{r7, lr}
 8003768:	b084      	sub	sp, #16
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800376e:	f001 f98d 	bl	8004a8c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003778:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800377a:	e011      	b.n	80037a0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003780:	2b00      	cmp	r3, #0
 8003782:	d012      	beq.n	80037aa <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	3324      	adds	r3, #36	; 0x24
 8003788:	4618      	mov	r0, r3
 800378a:	f000 fc6d 	bl	8004068 <xTaskRemoveFromEventList>
 800378e:	4603      	mov	r3, r0
 8003790:	2b00      	cmp	r3, #0
 8003792:	d001      	beq.n	8003798 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003794:	f000 fd40 	bl	8004218 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003798:	7bfb      	ldrb	r3, [r7, #15]
 800379a:	3b01      	subs	r3, #1
 800379c:	b2db      	uxtb	r3, r3
 800379e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80037a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	dce9      	bgt.n	800377c <prvUnlockQueue+0x16>
 80037a8:	e000      	b.n	80037ac <prvUnlockQueue+0x46>
					break;
 80037aa:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	22ff      	movs	r2, #255	; 0xff
 80037b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80037b4:	f001 f998 	bl	8004ae8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80037b8:	f001 f968 	bl	8004a8c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80037c2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80037c4:	e011      	b.n	80037ea <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d012      	beq.n	80037f4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	3310      	adds	r3, #16
 80037d2:	4618      	mov	r0, r3
 80037d4:	f000 fc48 	bl	8004068 <xTaskRemoveFromEventList>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d001      	beq.n	80037e2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80037de:	f000 fd1b 	bl	8004218 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80037e2:	7bbb      	ldrb	r3, [r7, #14]
 80037e4:	3b01      	subs	r3, #1
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80037ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	dce9      	bgt.n	80037c6 <prvUnlockQueue+0x60>
 80037f2:	e000      	b.n	80037f6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80037f4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	22ff      	movs	r2, #255	; 0xff
 80037fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80037fe:	f001 f973 	bl	8004ae8 <vPortExitCritical>
}
 8003802:	bf00      	nop
 8003804:	3710      	adds	r7, #16
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}

0800380a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800380a:	b580      	push	{r7, lr}
 800380c:	b084      	sub	sp, #16
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003812:	f001 f93b 	bl	8004a8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800381a:	2b00      	cmp	r3, #0
 800381c:	d102      	bne.n	8003824 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800381e:	2301      	movs	r3, #1
 8003820:	60fb      	str	r3, [r7, #12]
 8003822:	e001      	b.n	8003828 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003824:	2300      	movs	r3, #0
 8003826:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003828:	f001 f95e 	bl	8004ae8 <vPortExitCritical>

	return xReturn;
 800382c:	68fb      	ldr	r3, [r7, #12]
}
 800382e:	4618      	mov	r0, r3
 8003830:	3710      	adds	r7, #16
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}

08003836 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003836:	b580      	push	{r7, lr}
 8003838:	b084      	sub	sp, #16
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800383e:	f001 f925 	bl	8004a8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800384a:	429a      	cmp	r2, r3
 800384c:	d102      	bne.n	8003854 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800384e:	2301      	movs	r3, #1
 8003850:	60fb      	str	r3, [r7, #12]
 8003852:	e001      	b.n	8003858 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003854:	2300      	movs	r3, #0
 8003856:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003858:	f001 f946 	bl	8004ae8 <vPortExitCritical>

	return xReturn;
 800385c:	68fb      	ldr	r3, [r7, #12]
}
 800385e:	4618      	mov	r0, r3
 8003860:	3710      	adds	r7, #16
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}

08003866 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003866:	b580      	push	{r7, lr}
 8003868:	b08e      	sub	sp, #56	; 0x38
 800386a:	af04      	add	r7, sp, #16
 800386c:	60f8      	str	r0, [r7, #12]
 800386e:	60b9      	str	r1, [r7, #8]
 8003870:	607a      	str	r2, [r7, #4]
 8003872:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003876:	2b00      	cmp	r3, #0
 8003878:	d109      	bne.n	800388e <xTaskCreateStatic+0x28>
	__asm volatile
 800387a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800387e:	f383 8811 	msr	BASEPRI, r3
 8003882:	f3bf 8f6f 	isb	sy
 8003886:	f3bf 8f4f 	dsb	sy
 800388a:	623b      	str	r3, [r7, #32]
 800388c:	e7fe      	b.n	800388c <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800388e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003890:	2b00      	cmp	r3, #0
 8003892:	d109      	bne.n	80038a8 <xTaskCreateStatic+0x42>
 8003894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003898:	f383 8811 	msr	BASEPRI, r3
 800389c:	f3bf 8f6f 	isb	sy
 80038a0:	f3bf 8f4f 	dsb	sy
 80038a4:	61fb      	str	r3, [r7, #28]
 80038a6:	e7fe      	b.n	80038a6 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80038a8:	2354      	movs	r3, #84	; 0x54
 80038aa:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	2b54      	cmp	r3, #84	; 0x54
 80038b0:	d009      	beq.n	80038c6 <xTaskCreateStatic+0x60>
 80038b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b6:	f383 8811 	msr	BASEPRI, r3
 80038ba:	f3bf 8f6f 	isb	sy
 80038be:	f3bf 8f4f 	dsb	sy
 80038c2:	61bb      	str	r3, [r7, #24]
 80038c4:	e7fe      	b.n	80038c4 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80038c6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80038c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d01e      	beq.n	800390c <xTaskCreateStatic+0xa6>
 80038ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d01b      	beq.n	800390c <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80038d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038d6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80038d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038dc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80038de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e0:	2202      	movs	r2, #2
 80038e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80038e6:	2300      	movs	r3, #0
 80038e8:	9303      	str	r3, [sp, #12]
 80038ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ec:	9302      	str	r3, [sp, #8]
 80038ee:	f107 0314 	add.w	r3, r7, #20
 80038f2:	9301      	str	r3, [sp, #4]
 80038f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038f6:	9300      	str	r3, [sp, #0]
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	68b9      	ldr	r1, [r7, #8]
 80038fe:	68f8      	ldr	r0, [r7, #12]
 8003900:	f000 f850 	bl	80039a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003904:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003906:	f000 f8d3 	bl	8003ab0 <prvAddNewTaskToReadyList>
 800390a:	e001      	b.n	8003910 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800390c:	2300      	movs	r3, #0
 800390e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003910:	697b      	ldr	r3, [r7, #20]
	}
 8003912:	4618      	mov	r0, r3
 8003914:	3728      	adds	r7, #40	; 0x28
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}

0800391a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800391a:	b580      	push	{r7, lr}
 800391c:	b08c      	sub	sp, #48	; 0x30
 800391e:	af04      	add	r7, sp, #16
 8003920:	60f8      	str	r0, [r7, #12]
 8003922:	60b9      	str	r1, [r7, #8]
 8003924:	603b      	str	r3, [r7, #0]
 8003926:	4613      	mov	r3, r2
 8003928:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800392a:	88fb      	ldrh	r3, [r7, #6]
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	4618      	mov	r0, r3
 8003930:	f001 f9c6 	bl	8004cc0 <pvPortMalloc>
 8003934:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d00e      	beq.n	800395a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800393c:	2054      	movs	r0, #84	; 0x54
 800393e:	f001 f9bf 	bl	8004cc0 <pvPortMalloc>
 8003942:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d003      	beq.n	8003952 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	697a      	ldr	r2, [r7, #20]
 800394e:	631a      	str	r2, [r3, #48]	; 0x30
 8003950:	e005      	b.n	800395e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003952:	6978      	ldr	r0, [r7, #20]
 8003954:	f001 fa76 	bl	8004e44 <vPortFree>
 8003958:	e001      	b.n	800395e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800395a:	2300      	movs	r3, #0
 800395c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d017      	beq.n	8003994 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	2200      	movs	r2, #0
 8003968:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800396c:	88fa      	ldrh	r2, [r7, #6]
 800396e:	2300      	movs	r3, #0
 8003970:	9303      	str	r3, [sp, #12]
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	9302      	str	r3, [sp, #8]
 8003976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003978:	9301      	str	r3, [sp, #4]
 800397a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800397c:	9300      	str	r3, [sp, #0]
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	68b9      	ldr	r1, [r7, #8]
 8003982:	68f8      	ldr	r0, [r7, #12]
 8003984:	f000 f80e 	bl	80039a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003988:	69f8      	ldr	r0, [r7, #28]
 800398a:	f000 f891 	bl	8003ab0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800398e:	2301      	movs	r3, #1
 8003990:	61bb      	str	r3, [r7, #24]
 8003992:	e002      	b.n	800399a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003994:	f04f 33ff 	mov.w	r3, #4294967295
 8003998:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800399a:	69bb      	ldr	r3, [r7, #24]
	}
 800399c:	4618      	mov	r0, r3
 800399e:	3720      	adds	r7, #32
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b088      	sub	sp, #32
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	60b9      	str	r1, [r7, #8]
 80039ae:	607a      	str	r2, [r7, #4]
 80039b0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80039b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80039bc:	3b01      	subs	r3, #1
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	4413      	add	r3, r2
 80039c2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	f023 0307 	bic.w	r3, r3, #7
 80039ca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	f003 0307 	and.w	r3, r3, #7
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d009      	beq.n	80039ea <prvInitialiseNewTask+0x46>
 80039d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039da:	f383 8811 	msr	BASEPRI, r3
 80039de:	f3bf 8f6f 	isb	sy
 80039e2:	f3bf 8f4f 	dsb	sy
 80039e6:	617b      	str	r3, [r7, #20]
 80039e8:	e7fe      	b.n	80039e8 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d01f      	beq.n	8003a30 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80039f0:	2300      	movs	r3, #0
 80039f2:	61fb      	str	r3, [r7, #28]
 80039f4:	e012      	b.n	8003a1c <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80039f6:	68ba      	ldr	r2, [r7, #8]
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	4413      	add	r3, r2
 80039fc:	7819      	ldrb	r1, [r3, #0]
 80039fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	4413      	add	r3, r2
 8003a04:	3334      	adds	r3, #52	; 0x34
 8003a06:	460a      	mov	r2, r1
 8003a08:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003a0a:	68ba      	ldr	r2, [r7, #8]
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	4413      	add	r3, r2
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d006      	beq.n	8003a24 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	3301      	adds	r3, #1
 8003a1a:	61fb      	str	r3, [r7, #28]
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	2b0f      	cmp	r3, #15
 8003a20:	d9e9      	bls.n	80039f6 <prvInitialiseNewTask+0x52>
 8003a22:	e000      	b.n	8003a26 <prvInitialiseNewTask+0x82>
			{
				break;
 8003a24:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a2e:	e003      	b.n	8003a38 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a3a:	2b06      	cmp	r3, #6
 8003a3c:	d901      	bls.n	8003a42 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003a3e:	2306      	movs	r3, #6
 8003a40:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a46:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a4c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a50:	2200      	movs	r2, #0
 8003a52:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a56:	3304      	adds	r3, #4
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f7ff f905 	bl	8002c68 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a60:	3318      	adds	r3, #24
 8003a62:	4618      	mov	r0, r3
 8003a64:	f7ff f900 	bl	8002c68 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a6c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a70:	f1c3 0207 	rsb	r2, r3, #7
 8003a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a76:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a7c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a80:	2200      	movs	r2, #0
 8003a82:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a86:	2200      	movs	r2, #0
 8003a88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003a8c:	683a      	ldr	r2, [r7, #0]
 8003a8e:	68f9      	ldr	r1, [r7, #12]
 8003a90:	69b8      	ldr	r0, [r7, #24]
 8003a92:	f000 fed3 	bl	800483c <pxPortInitialiseStack>
 8003a96:	4602      	mov	r2, r0
 8003a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a9a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d002      	beq.n	8003aa8 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003aa6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003aa8:	bf00      	nop
 8003aaa:	3720      	adds	r7, #32
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003ab8:	f000 ffe8 	bl	8004a8c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003abc:	4b2a      	ldr	r3, [pc, #168]	; (8003b68 <prvAddNewTaskToReadyList+0xb8>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	3301      	adds	r3, #1
 8003ac2:	4a29      	ldr	r2, [pc, #164]	; (8003b68 <prvAddNewTaskToReadyList+0xb8>)
 8003ac4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003ac6:	4b29      	ldr	r3, [pc, #164]	; (8003b6c <prvAddNewTaskToReadyList+0xbc>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d109      	bne.n	8003ae2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003ace:	4a27      	ldr	r2, [pc, #156]	; (8003b6c <prvAddNewTaskToReadyList+0xbc>)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003ad4:	4b24      	ldr	r3, [pc, #144]	; (8003b68 <prvAddNewTaskToReadyList+0xb8>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d110      	bne.n	8003afe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003adc:	f000 fbc0 	bl	8004260 <prvInitialiseTaskLists>
 8003ae0:	e00d      	b.n	8003afe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003ae2:	4b23      	ldr	r3, [pc, #140]	; (8003b70 <prvAddNewTaskToReadyList+0xc0>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d109      	bne.n	8003afe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003aea:	4b20      	ldr	r3, [pc, #128]	; (8003b6c <prvAddNewTaskToReadyList+0xbc>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d802      	bhi.n	8003afe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003af8:	4a1c      	ldr	r2, [pc, #112]	; (8003b6c <prvAddNewTaskToReadyList+0xbc>)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003afe:	4b1d      	ldr	r3, [pc, #116]	; (8003b74 <prvAddNewTaskToReadyList+0xc4>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	3301      	adds	r3, #1
 8003b04:	4a1b      	ldr	r2, [pc, #108]	; (8003b74 <prvAddNewTaskToReadyList+0xc4>)
 8003b06:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	409a      	lsls	r2, r3
 8003b10:	4b19      	ldr	r3, [pc, #100]	; (8003b78 <prvAddNewTaskToReadyList+0xc8>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	4a18      	ldr	r2, [pc, #96]	; (8003b78 <prvAddNewTaskToReadyList+0xc8>)
 8003b18:	6013      	str	r3, [r2, #0]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b1e:	4613      	mov	r3, r2
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	4413      	add	r3, r2
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	4a15      	ldr	r2, [pc, #84]	; (8003b7c <prvAddNewTaskToReadyList+0xcc>)
 8003b28:	441a      	add	r2, r3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	3304      	adds	r3, #4
 8003b2e:	4619      	mov	r1, r3
 8003b30:	4610      	mov	r0, r2
 8003b32:	f7ff f8a6 	bl	8002c82 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003b36:	f000 ffd7 	bl	8004ae8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003b3a:	4b0d      	ldr	r3, [pc, #52]	; (8003b70 <prvAddNewTaskToReadyList+0xc0>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d00e      	beq.n	8003b60 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003b42:	4b0a      	ldr	r3, [pc, #40]	; (8003b6c <prvAddNewTaskToReadyList+0xbc>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d207      	bcs.n	8003b60 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003b50:	4b0b      	ldr	r3, [pc, #44]	; (8003b80 <prvAddNewTaskToReadyList+0xd0>)
 8003b52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b56:	601a      	str	r2, [r3, #0]
 8003b58:	f3bf 8f4f 	dsb	sy
 8003b5c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b60:	bf00      	nop
 8003b62:	3708      	adds	r7, #8
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	200003e8 	.word	0x200003e8
 8003b6c:	200002e8 	.word	0x200002e8
 8003b70:	200003f4 	.word	0x200003f4
 8003b74:	20000404 	.word	0x20000404
 8003b78:	200003f0 	.word	0x200003f0
 8003b7c:	200002ec 	.word	0x200002ec
 8003b80:	e000ed04 	.word	0xe000ed04

08003b84 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d016      	beq.n	8003bc4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003b96:	4b13      	ldr	r3, [pc, #76]	; (8003be4 <vTaskDelay+0x60>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d009      	beq.n	8003bb2 <vTaskDelay+0x2e>
 8003b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ba2:	f383 8811 	msr	BASEPRI, r3
 8003ba6:	f3bf 8f6f 	isb	sy
 8003baa:	f3bf 8f4f 	dsb	sy
 8003bae:	60bb      	str	r3, [r7, #8]
 8003bb0:	e7fe      	b.n	8003bb0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8003bb2:	f000 f879 	bl	8003ca8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003bb6:	2100      	movs	r1, #0
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f000 fdd9 	bl	8004770 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003bbe:	f000 f881 	bl	8003cc4 <xTaskResumeAll>
 8003bc2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d107      	bne.n	8003bda <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8003bca:	4b07      	ldr	r3, [pc, #28]	; (8003be8 <vTaskDelay+0x64>)
 8003bcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bd0:	601a      	str	r2, [r3, #0]
 8003bd2:	f3bf 8f4f 	dsb	sy
 8003bd6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003bda:	bf00      	nop
 8003bdc:	3710      	adds	r7, #16
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	20000410 	.word	0x20000410
 8003be8:	e000ed04 	.word	0xe000ed04

08003bec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b08a      	sub	sp, #40	; 0x28
 8003bf0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003bfa:	463a      	mov	r2, r7
 8003bfc:	1d39      	adds	r1, r7, #4
 8003bfe:	f107 0308 	add.w	r3, r7, #8
 8003c02:	4618      	mov	r0, r3
 8003c04:	f7fc fcc4 	bl	8000590 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003c08:	6839      	ldr	r1, [r7, #0]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	68ba      	ldr	r2, [r7, #8]
 8003c0e:	9202      	str	r2, [sp, #8]
 8003c10:	9301      	str	r3, [sp, #4]
 8003c12:	2300      	movs	r3, #0
 8003c14:	9300      	str	r3, [sp, #0]
 8003c16:	2300      	movs	r3, #0
 8003c18:	460a      	mov	r2, r1
 8003c1a:	491d      	ldr	r1, [pc, #116]	; (8003c90 <vTaskStartScheduler+0xa4>)
 8003c1c:	481d      	ldr	r0, [pc, #116]	; (8003c94 <vTaskStartScheduler+0xa8>)
 8003c1e:	f7ff fe22 	bl	8003866 <xTaskCreateStatic>
 8003c22:	4602      	mov	r2, r0
 8003c24:	4b1c      	ldr	r3, [pc, #112]	; (8003c98 <vTaskStartScheduler+0xac>)
 8003c26:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003c28:	4b1b      	ldr	r3, [pc, #108]	; (8003c98 <vTaskStartScheduler+0xac>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d002      	beq.n	8003c36 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003c30:	2301      	movs	r3, #1
 8003c32:	617b      	str	r3, [r7, #20]
 8003c34:	e001      	b.n	8003c3a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003c36:	2300      	movs	r3, #0
 8003c38:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d115      	bne.n	8003c6c <vTaskStartScheduler+0x80>
 8003c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c44:	f383 8811 	msr	BASEPRI, r3
 8003c48:	f3bf 8f6f 	isb	sy
 8003c4c:	f3bf 8f4f 	dsb	sy
 8003c50:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003c52:	4b12      	ldr	r3, [pc, #72]	; (8003c9c <vTaskStartScheduler+0xb0>)
 8003c54:	f04f 32ff 	mov.w	r2, #4294967295
 8003c58:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003c5a:	4b11      	ldr	r3, [pc, #68]	; (8003ca0 <vTaskStartScheduler+0xb4>)
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003c60:	4b10      	ldr	r3, [pc, #64]	; (8003ca4 <vTaskStartScheduler+0xb8>)
 8003c62:	2200      	movs	r2, #0
 8003c64:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003c66:	f000 fe73 	bl	8004950 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003c6a:	e00d      	b.n	8003c88 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c72:	d109      	bne.n	8003c88 <vTaskStartScheduler+0x9c>
 8003c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c78:	f383 8811 	msr	BASEPRI, r3
 8003c7c:	f3bf 8f6f 	isb	sy
 8003c80:	f3bf 8f4f 	dsb	sy
 8003c84:	60fb      	str	r3, [r7, #12]
 8003c86:	e7fe      	b.n	8003c86 <vTaskStartScheduler+0x9a>
}
 8003c88:	bf00      	nop
 8003c8a:	3718      	adds	r7, #24
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	080059f0 	.word	0x080059f0
 8003c94:	08004231 	.word	0x08004231
 8003c98:	2000040c 	.word	0x2000040c
 8003c9c:	20000408 	.word	0x20000408
 8003ca0:	200003f4 	.word	0x200003f4
 8003ca4:	200003ec 	.word	0x200003ec

08003ca8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003ca8:	b480      	push	{r7}
 8003caa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003cac:	4b04      	ldr	r3, [pc, #16]	; (8003cc0 <vTaskSuspendAll+0x18>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	4a03      	ldr	r2, [pc, #12]	; (8003cc0 <vTaskSuspendAll+0x18>)
 8003cb4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8003cb6:	bf00      	nop
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr
 8003cc0:	20000410 	.word	0x20000410

08003cc4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b084      	sub	sp, #16
 8003cc8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003cd2:	4b41      	ldr	r3, [pc, #260]	; (8003dd8 <xTaskResumeAll+0x114>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d109      	bne.n	8003cee <xTaskResumeAll+0x2a>
 8003cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cde:	f383 8811 	msr	BASEPRI, r3
 8003ce2:	f3bf 8f6f 	isb	sy
 8003ce6:	f3bf 8f4f 	dsb	sy
 8003cea:	603b      	str	r3, [r7, #0]
 8003cec:	e7fe      	b.n	8003cec <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003cee:	f000 fecd 	bl	8004a8c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003cf2:	4b39      	ldr	r3, [pc, #228]	; (8003dd8 <xTaskResumeAll+0x114>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	3b01      	subs	r3, #1
 8003cf8:	4a37      	ldr	r2, [pc, #220]	; (8003dd8 <xTaskResumeAll+0x114>)
 8003cfa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003cfc:	4b36      	ldr	r3, [pc, #216]	; (8003dd8 <xTaskResumeAll+0x114>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d161      	bne.n	8003dc8 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003d04:	4b35      	ldr	r3, [pc, #212]	; (8003ddc <xTaskResumeAll+0x118>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d05d      	beq.n	8003dc8 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d0c:	e02e      	b.n	8003d6c <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d0e:	4b34      	ldr	r3, [pc, #208]	; (8003de0 <xTaskResumeAll+0x11c>)
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	3318      	adds	r3, #24
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f7ff f80e 	bl	8002d3c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	3304      	adds	r3, #4
 8003d24:	4618      	mov	r0, r3
 8003d26:	f7ff f809 	bl	8002d3c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d2e:	2201      	movs	r2, #1
 8003d30:	409a      	lsls	r2, r3
 8003d32:	4b2c      	ldr	r3, [pc, #176]	; (8003de4 <xTaskResumeAll+0x120>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	4a2a      	ldr	r2, [pc, #168]	; (8003de4 <xTaskResumeAll+0x120>)
 8003d3a:	6013      	str	r3, [r2, #0]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d40:	4613      	mov	r3, r2
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	4413      	add	r3, r2
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	4a27      	ldr	r2, [pc, #156]	; (8003de8 <xTaskResumeAll+0x124>)
 8003d4a:	441a      	add	r2, r3
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	3304      	adds	r3, #4
 8003d50:	4619      	mov	r1, r3
 8003d52:	4610      	mov	r0, r2
 8003d54:	f7fe ff95 	bl	8002c82 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d5c:	4b23      	ldr	r3, [pc, #140]	; (8003dec <xTaskResumeAll+0x128>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d302      	bcc.n	8003d6c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8003d66:	4b22      	ldr	r3, [pc, #136]	; (8003df0 <xTaskResumeAll+0x12c>)
 8003d68:	2201      	movs	r2, #1
 8003d6a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d6c:	4b1c      	ldr	r3, [pc, #112]	; (8003de0 <xTaskResumeAll+0x11c>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d1cc      	bne.n	8003d0e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d001      	beq.n	8003d7e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003d7a:	f000 fb0b 	bl	8004394 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003d7e:	4b1d      	ldr	r3, [pc, #116]	; (8003df4 <xTaskResumeAll+0x130>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d010      	beq.n	8003dac <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003d8a:	f000 f837 	bl	8003dfc <xTaskIncrementTick>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d002      	beq.n	8003d9a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8003d94:	4b16      	ldr	r3, [pc, #88]	; (8003df0 <xTaskResumeAll+0x12c>)
 8003d96:	2201      	movs	r2, #1
 8003d98:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	3b01      	subs	r3, #1
 8003d9e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d1f1      	bne.n	8003d8a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8003da6:	4b13      	ldr	r3, [pc, #76]	; (8003df4 <xTaskResumeAll+0x130>)
 8003da8:	2200      	movs	r2, #0
 8003daa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003dac:	4b10      	ldr	r3, [pc, #64]	; (8003df0 <xTaskResumeAll+0x12c>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d009      	beq.n	8003dc8 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003db4:	2301      	movs	r3, #1
 8003db6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003db8:	4b0f      	ldr	r3, [pc, #60]	; (8003df8 <xTaskResumeAll+0x134>)
 8003dba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dbe:	601a      	str	r2, [r3, #0]
 8003dc0:	f3bf 8f4f 	dsb	sy
 8003dc4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003dc8:	f000 fe8e 	bl	8004ae8 <vPortExitCritical>

	return xAlreadyYielded;
 8003dcc:	68bb      	ldr	r3, [r7, #8]
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3710      	adds	r7, #16
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	20000410 	.word	0x20000410
 8003ddc:	200003e8 	.word	0x200003e8
 8003de0:	200003a8 	.word	0x200003a8
 8003de4:	200003f0 	.word	0x200003f0
 8003de8:	200002ec 	.word	0x200002ec
 8003dec:	200002e8 	.word	0x200002e8
 8003df0:	200003fc 	.word	0x200003fc
 8003df4:	200003f8 	.word	0x200003f8
 8003df8:	e000ed04 	.word	0xe000ed04

08003dfc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b086      	sub	sp, #24
 8003e00:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003e02:	2300      	movs	r3, #0
 8003e04:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e06:	4b4e      	ldr	r3, [pc, #312]	; (8003f40 <xTaskIncrementTick+0x144>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	f040 8087 	bne.w	8003f1e <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003e10:	4b4c      	ldr	r3, [pc, #304]	; (8003f44 <xTaskIncrementTick+0x148>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	3301      	adds	r3, #1
 8003e16:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003e18:	4a4a      	ldr	r2, [pc, #296]	; (8003f44 <xTaskIncrementTick+0x148>)
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d11f      	bne.n	8003e64 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003e24:	4b48      	ldr	r3, [pc, #288]	; (8003f48 <xTaskIncrementTick+0x14c>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d009      	beq.n	8003e42 <xTaskIncrementTick+0x46>
 8003e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e32:	f383 8811 	msr	BASEPRI, r3
 8003e36:	f3bf 8f6f 	isb	sy
 8003e3a:	f3bf 8f4f 	dsb	sy
 8003e3e:	603b      	str	r3, [r7, #0]
 8003e40:	e7fe      	b.n	8003e40 <xTaskIncrementTick+0x44>
 8003e42:	4b41      	ldr	r3, [pc, #260]	; (8003f48 <xTaskIncrementTick+0x14c>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	60fb      	str	r3, [r7, #12]
 8003e48:	4b40      	ldr	r3, [pc, #256]	; (8003f4c <xTaskIncrementTick+0x150>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a3e      	ldr	r2, [pc, #248]	; (8003f48 <xTaskIncrementTick+0x14c>)
 8003e4e:	6013      	str	r3, [r2, #0]
 8003e50:	4a3e      	ldr	r2, [pc, #248]	; (8003f4c <xTaskIncrementTick+0x150>)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	6013      	str	r3, [r2, #0]
 8003e56:	4b3e      	ldr	r3, [pc, #248]	; (8003f50 <xTaskIncrementTick+0x154>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	3301      	adds	r3, #1
 8003e5c:	4a3c      	ldr	r2, [pc, #240]	; (8003f50 <xTaskIncrementTick+0x154>)
 8003e5e:	6013      	str	r3, [r2, #0]
 8003e60:	f000 fa98 	bl	8004394 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003e64:	4b3b      	ldr	r3, [pc, #236]	; (8003f54 <xTaskIncrementTick+0x158>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	693a      	ldr	r2, [r7, #16]
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d348      	bcc.n	8003f00 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e6e:	4b36      	ldr	r3, [pc, #216]	; (8003f48 <xTaskIncrementTick+0x14c>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d104      	bne.n	8003e82 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e78:	4b36      	ldr	r3, [pc, #216]	; (8003f54 <xTaskIncrementTick+0x158>)
 8003e7a:	f04f 32ff 	mov.w	r2, #4294967295
 8003e7e:	601a      	str	r2, [r3, #0]
					break;
 8003e80:	e03e      	b.n	8003f00 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e82:	4b31      	ldr	r3, [pc, #196]	; (8003f48 <xTaskIncrementTick+0x14c>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003e92:	693a      	ldr	r2, [r7, #16]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d203      	bcs.n	8003ea2 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003e9a:	4a2e      	ldr	r2, [pc, #184]	; (8003f54 <xTaskIncrementTick+0x158>)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003ea0:	e02e      	b.n	8003f00 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	3304      	adds	r3, #4
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f7fe ff48 	bl	8002d3c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d004      	beq.n	8003ebe <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	3318      	adds	r3, #24
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f7fe ff3f 	bl	8002d3c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	409a      	lsls	r2, r3
 8003ec6:	4b24      	ldr	r3, [pc, #144]	; (8003f58 <xTaskIncrementTick+0x15c>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	4a22      	ldr	r2, [pc, #136]	; (8003f58 <xTaskIncrementTick+0x15c>)
 8003ece:	6013      	str	r3, [r2, #0]
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	4413      	add	r3, r2
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	4a1f      	ldr	r2, [pc, #124]	; (8003f5c <xTaskIncrementTick+0x160>)
 8003ede:	441a      	add	r2, r3
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	3304      	adds	r3, #4
 8003ee4:	4619      	mov	r1, r3
 8003ee6:	4610      	mov	r0, r2
 8003ee8:	f7fe fecb 	bl	8002c82 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ef0:	4b1b      	ldr	r3, [pc, #108]	; (8003f60 <xTaskIncrementTick+0x164>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d3b9      	bcc.n	8003e6e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8003efa:	2301      	movs	r3, #1
 8003efc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003efe:	e7b6      	b.n	8003e6e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003f00:	4b17      	ldr	r3, [pc, #92]	; (8003f60 <xTaskIncrementTick+0x164>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f06:	4915      	ldr	r1, [pc, #84]	; (8003f5c <xTaskIncrementTick+0x160>)
 8003f08:	4613      	mov	r3, r2
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	4413      	add	r3, r2
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	440b      	add	r3, r1
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d907      	bls.n	8003f28 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	617b      	str	r3, [r7, #20]
 8003f1c:	e004      	b.n	8003f28 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003f1e:	4b11      	ldr	r3, [pc, #68]	; (8003f64 <xTaskIncrementTick+0x168>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	3301      	adds	r3, #1
 8003f24:	4a0f      	ldr	r2, [pc, #60]	; (8003f64 <xTaskIncrementTick+0x168>)
 8003f26:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003f28:	4b0f      	ldr	r3, [pc, #60]	; (8003f68 <xTaskIncrementTick+0x16c>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d001      	beq.n	8003f34 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8003f30:	2301      	movs	r3, #1
 8003f32:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003f34:	697b      	ldr	r3, [r7, #20]
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3718      	adds	r7, #24
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	20000410 	.word	0x20000410
 8003f44:	200003ec 	.word	0x200003ec
 8003f48:	200003a0 	.word	0x200003a0
 8003f4c:	200003a4 	.word	0x200003a4
 8003f50:	20000400 	.word	0x20000400
 8003f54:	20000408 	.word	0x20000408
 8003f58:	200003f0 	.word	0x200003f0
 8003f5c:	200002ec 	.word	0x200002ec
 8003f60:	200002e8 	.word	0x200002e8
 8003f64:	200003f8 	.word	0x200003f8
 8003f68:	200003fc 	.word	0x200003fc

08003f6c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b087      	sub	sp, #28
 8003f70:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003f72:	4b26      	ldr	r3, [pc, #152]	; (800400c <vTaskSwitchContext+0xa0>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d003      	beq.n	8003f82 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003f7a:	4b25      	ldr	r3, [pc, #148]	; (8004010 <vTaskSwitchContext+0xa4>)
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003f80:	e03e      	b.n	8004000 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8003f82:	4b23      	ldr	r3, [pc, #140]	; (8004010 <vTaskSwitchContext+0xa4>)
 8003f84:	2200      	movs	r2, #0
 8003f86:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f88:	4b22      	ldr	r3, [pc, #136]	; (8004014 <vTaskSwitchContext+0xa8>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	fab3 f383 	clz	r3, r3
 8003f94:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003f96:	7afb      	ldrb	r3, [r7, #11]
 8003f98:	f1c3 031f 	rsb	r3, r3, #31
 8003f9c:	617b      	str	r3, [r7, #20]
 8003f9e:	491e      	ldr	r1, [pc, #120]	; (8004018 <vTaskSwitchContext+0xac>)
 8003fa0:	697a      	ldr	r2, [r7, #20]
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	4413      	add	r3, r2
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	440b      	add	r3, r1
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d109      	bne.n	8003fc6 <vTaskSwitchContext+0x5a>
	__asm volatile
 8003fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb6:	f383 8811 	msr	BASEPRI, r3
 8003fba:	f3bf 8f6f 	isb	sy
 8003fbe:	f3bf 8f4f 	dsb	sy
 8003fc2:	607b      	str	r3, [r7, #4]
 8003fc4:	e7fe      	b.n	8003fc4 <vTaskSwitchContext+0x58>
 8003fc6:	697a      	ldr	r2, [r7, #20]
 8003fc8:	4613      	mov	r3, r2
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	4413      	add	r3, r2
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	4a11      	ldr	r2, [pc, #68]	; (8004018 <vTaskSwitchContext+0xac>)
 8003fd2:	4413      	add	r3, r2
 8003fd4:	613b      	str	r3, [r7, #16]
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	685a      	ldr	r2, [r3, #4]
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	605a      	str	r2, [r3, #4]
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	685a      	ldr	r2, [r3, #4]
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	3308      	adds	r3, #8
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d104      	bne.n	8003ff6 <vTaskSwitchContext+0x8a>
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	685a      	ldr	r2, [r3, #4]
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	605a      	str	r2, [r3, #4]
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	4a07      	ldr	r2, [pc, #28]	; (800401c <vTaskSwitchContext+0xb0>)
 8003ffe:	6013      	str	r3, [r2, #0]
}
 8004000:	bf00      	nop
 8004002:	371c      	adds	r7, #28
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr
 800400c:	20000410 	.word	0x20000410
 8004010:	200003fc 	.word	0x200003fc
 8004014:	200003f0 	.word	0x200003f0
 8004018:	200002ec 	.word	0x200002ec
 800401c:	200002e8 	.word	0x200002e8

08004020 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d109      	bne.n	8004044 <vTaskPlaceOnEventList+0x24>
 8004030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004034:	f383 8811 	msr	BASEPRI, r3
 8004038:	f3bf 8f6f 	isb	sy
 800403c:	f3bf 8f4f 	dsb	sy
 8004040:	60fb      	str	r3, [r7, #12]
 8004042:	e7fe      	b.n	8004042 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004044:	4b07      	ldr	r3, [pc, #28]	; (8004064 <vTaskPlaceOnEventList+0x44>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	3318      	adds	r3, #24
 800404a:	4619      	mov	r1, r3
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f7fe fe3c 	bl	8002cca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004052:	2101      	movs	r1, #1
 8004054:	6838      	ldr	r0, [r7, #0]
 8004056:	f000 fb8b 	bl	8004770 <prvAddCurrentTaskToDelayedList>
}
 800405a:	bf00      	nop
 800405c:	3710      	adds	r7, #16
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	200002e8 	.word	0x200002e8

08004068 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b086      	sub	sp, #24
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d109      	bne.n	8004092 <xTaskRemoveFromEventList+0x2a>
 800407e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004082:	f383 8811 	msr	BASEPRI, r3
 8004086:	f3bf 8f6f 	isb	sy
 800408a:	f3bf 8f4f 	dsb	sy
 800408e:	60fb      	str	r3, [r7, #12]
 8004090:	e7fe      	b.n	8004090 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	3318      	adds	r3, #24
 8004096:	4618      	mov	r0, r3
 8004098:	f7fe fe50 	bl	8002d3c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800409c:	4b1d      	ldr	r3, [pc, #116]	; (8004114 <xTaskRemoveFromEventList+0xac>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d11c      	bne.n	80040de <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	3304      	adds	r3, #4
 80040a8:	4618      	mov	r0, r3
 80040aa:	f7fe fe47 	bl	8002d3c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b2:	2201      	movs	r2, #1
 80040b4:	409a      	lsls	r2, r3
 80040b6:	4b18      	ldr	r3, [pc, #96]	; (8004118 <xTaskRemoveFromEventList+0xb0>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	4a16      	ldr	r2, [pc, #88]	; (8004118 <xTaskRemoveFromEventList+0xb0>)
 80040be:	6013      	str	r3, [r2, #0]
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040c4:	4613      	mov	r3, r2
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	4413      	add	r3, r2
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	4a13      	ldr	r2, [pc, #76]	; (800411c <xTaskRemoveFromEventList+0xb4>)
 80040ce:	441a      	add	r2, r3
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	3304      	adds	r3, #4
 80040d4:	4619      	mov	r1, r3
 80040d6:	4610      	mov	r0, r2
 80040d8:	f7fe fdd3 	bl	8002c82 <vListInsertEnd>
 80040dc:	e005      	b.n	80040ea <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	3318      	adds	r3, #24
 80040e2:	4619      	mov	r1, r3
 80040e4:	480e      	ldr	r0, [pc, #56]	; (8004120 <xTaskRemoveFromEventList+0xb8>)
 80040e6:	f7fe fdcc 	bl	8002c82 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040ee:	4b0d      	ldr	r3, [pc, #52]	; (8004124 <xTaskRemoveFromEventList+0xbc>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d905      	bls.n	8004104 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80040f8:	2301      	movs	r3, #1
 80040fa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80040fc:	4b0a      	ldr	r3, [pc, #40]	; (8004128 <xTaskRemoveFromEventList+0xc0>)
 80040fe:	2201      	movs	r2, #1
 8004100:	601a      	str	r2, [r3, #0]
 8004102:	e001      	b.n	8004108 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8004104:	2300      	movs	r3, #0
 8004106:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004108:	697b      	ldr	r3, [r7, #20]
}
 800410a:	4618      	mov	r0, r3
 800410c:	3718      	adds	r7, #24
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	20000410 	.word	0x20000410
 8004118:	200003f0 	.word	0x200003f0
 800411c:	200002ec 	.word	0x200002ec
 8004120:	200003a8 	.word	0x200003a8
 8004124:	200002e8 	.word	0x200002e8
 8004128:	200003fc 	.word	0x200003fc

0800412c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004134:	4b06      	ldr	r3, [pc, #24]	; (8004150 <vTaskInternalSetTimeOutState+0x24>)
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800413c:	4b05      	ldr	r3, [pc, #20]	; (8004154 <vTaskInternalSetTimeOutState+0x28>)
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	605a      	str	r2, [r3, #4]
}
 8004144:	bf00      	nop
 8004146:	370c      	adds	r7, #12
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr
 8004150:	20000400 	.word	0x20000400
 8004154:	200003ec 	.word	0x200003ec

08004158 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b088      	sub	sp, #32
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d109      	bne.n	800417c <xTaskCheckForTimeOut+0x24>
 8004168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800416c:	f383 8811 	msr	BASEPRI, r3
 8004170:	f3bf 8f6f 	isb	sy
 8004174:	f3bf 8f4f 	dsb	sy
 8004178:	613b      	str	r3, [r7, #16]
 800417a:	e7fe      	b.n	800417a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d109      	bne.n	8004196 <xTaskCheckForTimeOut+0x3e>
 8004182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004186:	f383 8811 	msr	BASEPRI, r3
 800418a:	f3bf 8f6f 	isb	sy
 800418e:	f3bf 8f4f 	dsb	sy
 8004192:	60fb      	str	r3, [r7, #12]
 8004194:	e7fe      	b.n	8004194 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8004196:	f000 fc79 	bl	8004a8c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800419a:	4b1d      	ldr	r3, [pc, #116]	; (8004210 <xTaskCheckForTimeOut+0xb8>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	69ba      	ldr	r2, [r7, #24]
 80041a6:	1ad3      	subs	r3, r2, r3
 80041a8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041b2:	d102      	bne.n	80041ba <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80041b4:	2300      	movs	r3, #0
 80041b6:	61fb      	str	r3, [r7, #28]
 80041b8:	e023      	b.n	8004202 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	4b15      	ldr	r3, [pc, #84]	; (8004214 <xTaskCheckForTimeOut+0xbc>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d007      	beq.n	80041d6 <xTaskCheckForTimeOut+0x7e>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	69ba      	ldr	r2, [r7, #24]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d302      	bcc.n	80041d6 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80041d0:	2301      	movs	r3, #1
 80041d2:	61fb      	str	r3, [r7, #28]
 80041d4:	e015      	b.n	8004202 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	697a      	ldr	r2, [r7, #20]
 80041dc:	429a      	cmp	r2, r3
 80041de:	d20b      	bcs.n	80041f8 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	1ad2      	subs	r2, r2, r3
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f7ff ff9d 	bl	800412c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80041f2:	2300      	movs	r3, #0
 80041f4:	61fb      	str	r3, [r7, #28]
 80041f6:	e004      	b.n	8004202 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	2200      	movs	r2, #0
 80041fc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80041fe:	2301      	movs	r3, #1
 8004200:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004202:	f000 fc71 	bl	8004ae8 <vPortExitCritical>

	return xReturn;
 8004206:	69fb      	ldr	r3, [r7, #28]
}
 8004208:	4618      	mov	r0, r3
 800420a:	3720      	adds	r7, #32
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}
 8004210:	200003ec 	.word	0x200003ec
 8004214:	20000400 	.word	0x20000400

08004218 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004218:	b480      	push	{r7}
 800421a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800421c:	4b03      	ldr	r3, [pc, #12]	; (800422c <vTaskMissedYield+0x14>)
 800421e:	2201      	movs	r2, #1
 8004220:	601a      	str	r2, [r3, #0]
}
 8004222:	bf00      	nop
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr
 800422c:	200003fc 	.word	0x200003fc

08004230 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b082      	sub	sp, #8
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004238:	f000 f852 	bl	80042e0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800423c:	4b06      	ldr	r3, [pc, #24]	; (8004258 <prvIdleTask+0x28>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	2b01      	cmp	r3, #1
 8004242:	d9f9      	bls.n	8004238 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004244:	4b05      	ldr	r3, [pc, #20]	; (800425c <prvIdleTask+0x2c>)
 8004246:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800424a:	601a      	str	r2, [r3, #0]
 800424c:	f3bf 8f4f 	dsb	sy
 8004250:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004254:	e7f0      	b.n	8004238 <prvIdleTask+0x8>
 8004256:	bf00      	nop
 8004258:	200002ec 	.word	0x200002ec
 800425c:	e000ed04 	.word	0xe000ed04

08004260 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b082      	sub	sp, #8
 8004264:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004266:	2300      	movs	r3, #0
 8004268:	607b      	str	r3, [r7, #4]
 800426a:	e00c      	b.n	8004286 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	4613      	mov	r3, r2
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	4413      	add	r3, r2
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	4a12      	ldr	r2, [pc, #72]	; (80042c0 <prvInitialiseTaskLists+0x60>)
 8004278:	4413      	add	r3, r2
 800427a:	4618      	mov	r0, r3
 800427c:	f7fe fcd4 	bl	8002c28 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	3301      	adds	r3, #1
 8004284:	607b      	str	r3, [r7, #4]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2b06      	cmp	r3, #6
 800428a:	d9ef      	bls.n	800426c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800428c:	480d      	ldr	r0, [pc, #52]	; (80042c4 <prvInitialiseTaskLists+0x64>)
 800428e:	f7fe fccb 	bl	8002c28 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004292:	480d      	ldr	r0, [pc, #52]	; (80042c8 <prvInitialiseTaskLists+0x68>)
 8004294:	f7fe fcc8 	bl	8002c28 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004298:	480c      	ldr	r0, [pc, #48]	; (80042cc <prvInitialiseTaskLists+0x6c>)
 800429a:	f7fe fcc5 	bl	8002c28 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800429e:	480c      	ldr	r0, [pc, #48]	; (80042d0 <prvInitialiseTaskLists+0x70>)
 80042a0:	f7fe fcc2 	bl	8002c28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80042a4:	480b      	ldr	r0, [pc, #44]	; (80042d4 <prvInitialiseTaskLists+0x74>)
 80042a6:	f7fe fcbf 	bl	8002c28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80042aa:	4b0b      	ldr	r3, [pc, #44]	; (80042d8 <prvInitialiseTaskLists+0x78>)
 80042ac:	4a05      	ldr	r2, [pc, #20]	; (80042c4 <prvInitialiseTaskLists+0x64>)
 80042ae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80042b0:	4b0a      	ldr	r3, [pc, #40]	; (80042dc <prvInitialiseTaskLists+0x7c>)
 80042b2:	4a05      	ldr	r2, [pc, #20]	; (80042c8 <prvInitialiseTaskLists+0x68>)
 80042b4:	601a      	str	r2, [r3, #0]
}
 80042b6:	bf00      	nop
 80042b8:	3708      	adds	r7, #8
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	200002ec 	.word	0x200002ec
 80042c4:	20000378 	.word	0x20000378
 80042c8:	2000038c 	.word	0x2000038c
 80042cc:	200003a8 	.word	0x200003a8
 80042d0:	200003bc 	.word	0x200003bc
 80042d4:	200003d4 	.word	0x200003d4
 80042d8:	200003a0 	.word	0x200003a0
 80042dc:	200003a4 	.word	0x200003a4

080042e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b082      	sub	sp, #8
 80042e4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80042e6:	e019      	b.n	800431c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80042e8:	f000 fbd0 	bl	8004a8c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042ec:	4b0f      	ldr	r3, [pc, #60]	; (800432c <prvCheckTasksWaitingTermination+0x4c>)
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	3304      	adds	r3, #4
 80042f8:	4618      	mov	r0, r3
 80042fa:	f7fe fd1f 	bl	8002d3c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80042fe:	4b0c      	ldr	r3, [pc, #48]	; (8004330 <prvCheckTasksWaitingTermination+0x50>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	3b01      	subs	r3, #1
 8004304:	4a0a      	ldr	r2, [pc, #40]	; (8004330 <prvCheckTasksWaitingTermination+0x50>)
 8004306:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004308:	4b0a      	ldr	r3, [pc, #40]	; (8004334 <prvCheckTasksWaitingTermination+0x54>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	3b01      	subs	r3, #1
 800430e:	4a09      	ldr	r2, [pc, #36]	; (8004334 <prvCheckTasksWaitingTermination+0x54>)
 8004310:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004312:	f000 fbe9 	bl	8004ae8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f000 f80e 	bl	8004338 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800431c:	4b05      	ldr	r3, [pc, #20]	; (8004334 <prvCheckTasksWaitingTermination+0x54>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d1e1      	bne.n	80042e8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004324:	bf00      	nop
 8004326:	3708      	adds	r7, #8
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}
 800432c:	200003bc 	.word	0x200003bc
 8004330:	200003e8 	.word	0x200003e8
 8004334:	200003d0 	.word	0x200003d0

08004338 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004346:	2b00      	cmp	r3, #0
 8004348:	d108      	bne.n	800435c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800434e:	4618      	mov	r0, r3
 8004350:	f000 fd78 	bl	8004e44 <vPortFree>
				vPortFree( pxTCB );
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f000 fd75 	bl	8004e44 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800435a:	e017      	b.n	800438c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004362:	2b01      	cmp	r3, #1
 8004364:	d103      	bne.n	800436e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f000 fd6c 	bl	8004e44 <vPortFree>
	}
 800436c:	e00e      	b.n	800438c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004374:	2b02      	cmp	r3, #2
 8004376:	d009      	beq.n	800438c <prvDeleteTCB+0x54>
 8004378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800437c:	f383 8811 	msr	BASEPRI, r3
 8004380:	f3bf 8f6f 	isb	sy
 8004384:	f3bf 8f4f 	dsb	sy
 8004388:	60fb      	str	r3, [r7, #12]
 800438a:	e7fe      	b.n	800438a <prvDeleteTCB+0x52>
	}
 800438c:	bf00      	nop
 800438e:	3710      	adds	r7, #16
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}

08004394 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004394:	b480      	push	{r7}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800439a:	4b0c      	ldr	r3, [pc, #48]	; (80043cc <prvResetNextTaskUnblockTime+0x38>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d104      	bne.n	80043ae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80043a4:	4b0a      	ldr	r3, [pc, #40]	; (80043d0 <prvResetNextTaskUnblockTime+0x3c>)
 80043a6:	f04f 32ff 	mov.w	r2, #4294967295
 80043aa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80043ac:	e008      	b.n	80043c0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043ae:	4b07      	ldr	r3, [pc, #28]	; (80043cc <prvResetNextTaskUnblockTime+0x38>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	68db      	ldr	r3, [r3, #12]
 80043b6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	4a04      	ldr	r2, [pc, #16]	; (80043d0 <prvResetNextTaskUnblockTime+0x3c>)
 80043be:	6013      	str	r3, [r2, #0]
}
 80043c0:	bf00      	nop
 80043c2:	370c      	adds	r7, #12
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr
 80043cc:	200003a0 	.word	0x200003a0
 80043d0:	20000408 	.word	0x20000408

080043d4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80043da:	4b0b      	ldr	r3, [pc, #44]	; (8004408 <xTaskGetSchedulerState+0x34>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d102      	bne.n	80043e8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80043e2:	2301      	movs	r3, #1
 80043e4:	607b      	str	r3, [r7, #4]
 80043e6:	e008      	b.n	80043fa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043e8:	4b08      	ldr	r3, [pc, #32]	; (800440c <xTaskGetSchedulerState+0x38>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d102      	bne.n	80043f6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80043f0:	2302      	movs	r3, #2
 80043f2:	607b      	str	r3, [r7, #4]
 80043f4:	e001      	b.n	80043fa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80043f6:	2300      	movs	r3, #0
 80043f8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80043fa:	687b      	ldr	r3, [r7, #4]
	}
 80043fc:	4618      	mov	r0, r3
 80043fe:	370c      	adds	r7, #12
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr
 8004408:	200003f4 	.word	0x200003f4
 800440c:	20000410 	.word	0x20000410

08004410 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800441c:	2300      	movs	r3, #0
 800441e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d069      	beq.n	80044fa <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800442a:	4b36      	ldr	r3, [pc, #216]	; (8004504 <xTaskPriorityInherit+0xf4>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004430:	429a      	cmp	r2, r3
 8004432:	d259      	bcs.n	80044e8 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	699b      	ldr	r3, [r3, #24]
 8004438:	2b00      	cmp	r3, #0
 800443a:	db06      	blt.n	800444a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800443c:	4b31      	ldr	r3, [pc, #196]	; (8004504 <xTaskPriorityInherit+0xf4>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004442:	f1c3 0207 	rsb	r2, r3, #7
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	6959      	ldr	r1, [r3, #20]
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004452:	4613      	mov	r3, r2
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	4413      	add	r3, r2
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	4a2b      	ldr	r2, [pc, #172]	; (8004508 <xTaskPriorityInherit+0xf8>)
 800445c:	4413      	add	r3, r2
 800445e:	4299      	cmp	r1, r3
 8004460:	d13a      	bne.n	80044d8 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	3304      	adds	r3, #4
 8004466:	4618      	mov	r0, r3
 8004468:	f7fe fc68 	bl	8002d3c <uxListRemove>
 800446c:	4603      	mov	r3, r0
 800446e:	2b00      	cmp	r3, #0
 8004470:	d115      	bne.n	800449e <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004476:	4924      	ldr	r1, [pc, #144]	; (8004508 <xTaskPriorityInherit+0xf8>)
 8004478:	4613      	mov	r3, r2
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	4413      	add	r3, r2
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	440b      	add	r3, r1
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d10a      	bne.n	800449e <xTaskPriorityInherit+0x8e>
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800448c:	2201      	movs	r2, #1
 800448e:	fa02 f303 	lsl.w	r3, r2, r3
 8004492:	43da      	mvns	r2, r3
 8004494:	4b1d      	ldr	r3, [pc, #116]	; (800450c <xTaskPriorityInherit+0xfc>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4013      	ands	r3, r2
 800449a:	4a1c      	ldr	r2, [pc, #112]	; (800450c <xTaskPriorityInherit+0xfc>)
 800449c:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800449e:	4b19      	ldr	r3, [pc, #100]	; (8004504 <xTaskPriorityInherit+0xf4>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ac:	2201      	movs	r2, #1
 80044ae:	409a      	lsls	r2, r3
 80044b0:	4b16      	ldr	r3, [pc, #88]	; (800450c <xTaskPriorityInherit+0xfc>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	4a15      	ldr	r2, [pc, #84]	; (800450c <xTaskPriorityInherit+0xfc>)
 80044b8:	6013      	str	r3, [r2, #0]
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044be:	4613      	mov	r3, r2
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	4413      	add	r3, r2
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	4a10      	ldr	r2, [pc, #64]	; (8004508 <xTaskPriorityInherit+0xf8>)
 80044c8:	441a      	add	r2, r3
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	3304      	adds	r3, #4
 80044ce:	4619      	mov	r1, r3
 80044d0:	4610      	mov	r0, r2
 80044d2:	f7fe fbd6 	bl	8002c82 <vListInsertEnd>
 80044d6:	e004      	b.n	80044e2 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80044d8:	4b0a      	ldr	r3, [pc, #40]	; (8004504 <xTaskPriorityInherit+0xf4>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80044e2:	2301      	movs	r3, #1
 80044e4:	60fb      	str	r3, [r7, #12]
 80044e6:	e008      	b.n	80044fa <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044ec:	4b05      	ldr	r3, [pc, #20]	; (8004504 <xTaskPriorityInherit+0xf4>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d201      	bcs.n	80044fa <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80044f6:	2301      	movs	r3, #1
 80044f8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80044fa:	68fb      	ldr	r3, [r7, #12]
	}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3710      	adds	r7, #16
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}
 8004504:	200002e8 	.word	0x200002e8
 8004508:	200002ec 	.word	0x200002ec
 800450c:	200003f0 	.word	0x200003f0

08004510 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004510:	b580      	push	{r7, lr}
 8004512:	b086      	sub	sp, #24
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800451c:	2300      	movs	r3, #0
 800451e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d06c      	beq.n	8004600 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004526:	4b39      	ldr	r3, [pc, #228]	; (800460c <xTaskPriorityDisinherit+0xfc>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	693a      	ldr	r2, [r7, #16]
 800452c:	429a      	cmp	r2, r3
 800452e:	d009      	beq.n	8004544 <xTaskPriorityDisinherit+0x34>
 8004530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004534:	f383 8811 	msr	BASEPRI, r3
 8004538:	f3bf 8f6f 	isb	sy
 800453c:	f3bf 8f4f 	dsb	sy
 8004540:	60fb      	str	r3, [r7, #12]
 8004542:	e7fe      	b.n	8004542 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004548:	2b00      	cmp	r3, #0
 800454a:	d109      	bne.n	8004560 <xTaskPriorityDisinherit+0x50>
 800454c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004550:	f383 8811 	msr	BASEPRI, r3
 8004554:	f3bf 8f6f 	isb	sy
 8004558:	f3bf 8f4f 	dsb	sy
 800455c:	60bb      	str	r3, [r7, #8]
 800455e:	e7fe      	b.n	800455e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004564:	1e5a      	subs	r2, r3, #1
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004572:	429a      	cmp	r2, r3
 8004574:	d044      	beq.n	8004600 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800457a:	2b00      	cmp	r3, #0
 800457c:	d140      	bne.n	8004600 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	3304      	adds	r3, #4
 8004582:	4618      	mov	r0, r3
 8004584:	f7fe fbda 	bl	8002d3c <uxListRemove>
 8004588:	4603      	mov	r3, r0
 800458a:	2b00      	cmp	r3, #0
 800458c:	d115      	bne.n	80045ba <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004592:	491f      	ldr	r1, [pc, #124]	; (8004610 <xTaskPriorityDisinherit+0x100>)
 8004594:	4613      	mov	r3, r2
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	4413      	add	r3, r2
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	440b      	add	r3, r1
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d10a      	bne.n	80045ba <xTaskPriorityDisinherit+0xaa>
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a8:	2201      	movs	r2, #1
 80045aa:	fa02 f303 	lsl.w	r3, r2, r3
 80045ae:	43da      	mvns	r2, r3
 80045b0:	4b18      	ldr	r3, [pc, #96]	; (8004614 <xTaskPriorityDisinherit+0x104>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4013      	ands	r3, r2
 80045b6:	4a17      	ldr	r2, [pc, #92]	; (8004614 <xTaskPriorityDisinherit+0x104>)
 80045b8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c6:	f1c3 0207 	rsb	r2, r3, #7
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d2:	2201      	movs	r2, #1
 80045d4:	409a      	lsls	r2, r3
 80045d6:	4b0f      	ldr	r3, [pc, #60]	; (8004614 <xTaskPriorityDisinherit+0x104>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4313      	orrs	r3, r2
 80045dc:	4a0d      	ldr	r2, [pc, #52]	; (8004614 <xTaskPriorityDisinherit+0x104>)
 80045de:	6013      	str	r3, [r2, #0]
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045e4:	4613      	mov	r3, r2
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	4413      	add	r3, r2
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	4a08      	ldr	r2, [pc, #32]	; (8004610 <xTaskPriorityDisinherit+0x100>)
 80045ee:	441a      	add	r2, r3
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	3304      	adds	r3, #4
 80045f4:	4619      	mov	r1, r3
 80045f6:	4610      	mov	r0, r2
 80045f8:	f7fe fb43 	bl	8002c82 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80045fc:	2301      	movs	r3, #1
 80045fe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004600:	697b      	ldr	r3, [r7, #20]
	}
 8004602:	4618      	mov	r0, r3
 8004604:	3718      	adds	r7, #24
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	200002e8 	.word	0x200002e8
 8004610:	200002ec 	.word	0x200002ec
 8004614:	200003f0 	.word	0x200003f0

08004618 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004618:	b580      	push	{r7, lr}
 800461a:	b088      	sub	sp, #32
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004626:	2301      	movs	r3, #1
 8004628:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2b00      	cmp	r3, #0
 800462e:	f000 8081 	beq.w	8004734 <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004636:	2b00      	cmp	r3, #0
 8004638:	d109      	bne.n	800464e <vTaskPriorityDisinheritAfterTimeout+0x36>
 800463a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800463e:	f383 8811 	msr	BASEPRI, r3
 8004642:	f3bf 8f6f 	isb	sy
 8004646:	f3bf 8f4f 	dsb	sy
 800464a:	60fb      	str	r3, [r7, #12]
 800464c:	e7fe      	b.n	800464c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800464e:	69bb      	ldr	r3, [r7, #24]
 8004650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004652:	683a      	ldr	r2, [r7, #0]
 8004654:	429a      	cmp	r2, r3
 8004656:	d902      	bls.n	800465e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	61fb      	str	r3, [r7, #28]
 800465c:	e002      	b.n	8004664 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800465e:	69bb      	ldr	r3, [r7, #24]
 8004660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004662:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004664:	69bb      	ldr	r3, [r7, #24]
 8004666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004668:	69fa      	ldr	r2, [r7, #28]
 800466a:	429a      	cmp	r2, r3
 800466c:	d062      	beq.n	8004734 <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800466e:	69bb      	ldr	r3, [r7, #24]
 8004670:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004672:	697a      	ldr	r2, [r7, #20]
 8004674:	429a      	cmp	r2, r3
 8004676:	d15d      	bne.n	8004734 <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004678:	4b30      	ldr	r3, [pc, #192]	; (800473c <vTaskPriorityDisinheritAfterTimeout+0x124>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	69ba      	ldr	r2, [r7, #24]
 800467e:	429a      	cmp	r2, r3
 8004680:	d109      	bne.n	8004696 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8004682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004686:	f383 8811 	msr	BASEPRI, r3
 800468a:	f3bf 8f6f 	isb	sy
 800468e:	f3bf 8f4f 	dsb	sy
 8004692:	60bb      	str	r3, [r7, #8]
 8004694:	e7fe      	b.n	8004694 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004696:	69bb      	ldr	r3, [r7, #24]
 8004698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800469a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800469c:	69bb      	ldr	r3, [r7, #24]
 800469e:	69fa      	ldr	r2, [r7, #28]
 80046a0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80046a2:	69bb      	ldr	r3, [r7, #24]
 80046a4:	699b      	ldr	r3, [r3, #24]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	db04      	blt.n	80046b4 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046aa:	69fb      	ldr	r3, [r7, #28]
 80046ac:	f1c3 0207 	rsb	r2, r3, #7
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80046b4:	69bb      	ldr	r3, [r7, #24]
 80046b6:	6959      	ldr	r1, [r3, #20]
 80046b8:	693a      	ldr	r2, [r7, #16]
 80046ba:	4613      	mov	r3, r2
 80046bc:	009b      	lsls	r3, r3, #2
 80046be:	4413      	add	r3, r2
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	4a1f      	ldr	r2, [pc, #124]	; (8004740 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 80046c4:	4413      	add	r3, r2
 80046c6:	4299      	cmp	r1, r3
 80046c8:	d134      	bne.n	8004734 <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	3304      	adds	r3, #4
 80046ce:	4618      	mov	r0, r3
 80046d0:	f7fe fb34 	bl	8002d3c <uxListRemove>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d115      	bne.n	8004706 <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80046da:	69bb      	ldr	r3, [r7, #24]
 80046dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046de:	4918      	ldr	r1, [pc, #96]	; (8004740 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 80046e0:	4613      	mov	r3, r2
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	4413      	add	r3, r2
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	440b      	add	r3, r1
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d10a      	bne.n	8004706 <vTaskPriorityDisinheritAfterTimeout+0xee>
 80046f0:	69bb      	ldr	r3, [r7, #24]
 80046f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f4:	2201      	movs	r2, #1
 80046f6:	fa02 f303 	lsl.w	r3, r2, r3
 80046fa:	43da      	mvns	r2, r3
 80046fc:	4b11      	ldr	r3, [pc, #68]	; (8004744 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4013      	ands	r3, r2
 8004702:	4a10      	ldr	r2, [pc, #64]	; (8004744 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8004704:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004706:	69bb      	ldr	r3, [r7, #24]
 8004708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800470a:	2201      	movs	r2, #1
 800470c:	409a      	lsls	r2, r3
 800470e:	4b0d      	ldr	r3, [pc, #52]	; (8004744 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4313      	orrs	r3, r2
 8004714:	4a0b      	ldr	r2, [pc, #44]	; (8004744 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8004716:	6013      	str	r3, [r2, #0]
 8004718:	69bb      	ldr	r3, [r7, #24]
 800471a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800471c:	4613      	mov	r3, r2
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	4413      	add	r3, r2
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	4a06      	ldr	r2, [pc, #24]	; (8004740 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8004726:	441a      	add	r2, r3
 8004728:	69bb      	ldr	r3, [r7, #24]
 800472a:	3304      	adds	r3, #4
 800472c:	4619      	mov	r1, r3
 800472e:	4610      	mov	r0, r2
 8004730:	f7fe faa7 	bl	8002c82 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004734:	bf00      	nop
 8004736:	3720      	adds	r7, #32
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}
 800473c:	200002e8 	.word	0x200002e8
 8004740:	200002ec 	.word	0x200002ec
 8004744:	200003f0 	.word	0x200003f0

08004748 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004748:	b480      	push	{r7}
 800474a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800474c:	4b07      	ldr	r3, [pc, #28]	; (800476c <pvTaskIncrementMutexHeldCount+0x24>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d004      	beq.n	800475e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004754:	4b05      	ldr	r3, [pc, #20]	; (800476c <pvTaskIncrementMutexHeldCount+0x24>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800475a:	3201      	adds	r2, #1
 800475c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800475e:	4b03      	ldr	r3, [pc, #12]	; (800476c <pvTaskIncrementMutexHeldCount+0x24>)
 8004760:	681b      	ldr	r3, [r3, #0]
	}
 8004762:	4618      	mov	r0, r3
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr
 800476c:	200002e8 	.word	0x200002e8

08004770 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b084      	sub	sp, #16
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800477a:	4b29      	ldr	r3, [pc, #164]	; (8004820 <prvAddCurrentTaskToDelayedList+0xb0>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004780:	4b28      	ldr	r3, [pc, #160]	; (8004824 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	3304      	adds	r3, #4
 8004786:	4618      	mov	r0, r3
 8004788:	f7fe fad8 	bl	8002d3c <uxListRemove>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d10b      	bne.n	80047aa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004792:	4b24      	ldr	r3, [pc, #144]	; (8004824 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004798:	2201      	movs	r2, #1
 800479a:	fa02 f303 	lsl.w	r3, r2, r3
 800479e:	43da      	mvns	r2, r3
 80047a0:	4b21      	ldr	r3, [pc, #132]	; (8004828 <prvAddCurrentTaskToDelayedList+0xb8>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4013      	ands	r3, r2
 80047a6:	4a20      	ldr	r2, [pc, #128]	; (8004828 <prvAddCurrentTaskToDelayedList+0xb8>)
 80047a8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047b0:	d10a      	bne.n	80047c8 <prvAddCurrentTaskToDelayedList+0x58>
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d007      	beq.n	80047c8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047b8:	4b1a      	ldr	r3, [pc, #104]	; (8004824 <prvAddCurrentTaskToDelayedList+0xb4>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	3304      	adds	r3, #4
 80047be:	4619      	mov	r1, r3
 80047c0:	481a      	ldr	r0, [pc, #104]	; (800482c <prvAddCurrentTaskToDelayedList+0xbc>)
 80047c2:	f7fe fa5e 	bl	8002c82 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80047c6:	e026      	b.n	8004816 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80047c8:	68fa      	ldr	r2, [r7, #12]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4413      	add	r3, r2
 80047ce:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80047d0:	4b14      	ldr	r3, [pc, #80]	; (8004824 <prvAddCurrentTaskToDelayedList+0xb4>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	68ba      	ldr	r2, [r7, #8]
 80047d6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80047d8:	68ba      	ldr	r2, [r7, #8]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	429a      	cmp	r2, r3
 80047de:	d209      	bcs.n	80047f4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047e0:	4b13      	ldr	r3, [pc, #76]	; (8004830 <prvAddCurrentTaskToDelayedList+0xc0>)
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	4b0f      	ldr	r3, [pc, #60]	; (8004824 <prvAddCurrentTaskToDelayedList+0xb4>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	3304      	adds	r3, #4
 80047ea:	4619      	mov	r1, r3
 80047ec:	4610      	mov	r0, r2
 80047ee:	f7fe fa6c 	bl	8002cca <vListInsert>
}
 80047f2:	e010      	b.n	8004816 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047f4:	4b0f      	ldr	r3, [pc, #60]	; (8004834 <prvAddCurrentTaskToDelayedList+0xc4>)
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	4b0a      	ldr	r3, [pc, #40]	; (8004824 <prvAddCurrentTaskToDelayedList+0xb4>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	3304      	adds	r3, #4
 80047fe:	4619      	mov	r1, r3
 8004800:	4610      	mov	r0, r2
 8004802:	f7fe fa62 	bl	8002cca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004806:	4b0c      	ldr	r3, [pc, #48]	; (8004838 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	68ba      	ldr	r2, [r7, #8]
 800480c:	429a      	cmp	r2, r3
 800480e:	d202      	bcs.n	8004816 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004810:	4a09      	ldr	r2, [pc, #36]	; (8004838 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	6013      	str	r3, [r2, #0]
}
 8004816:	bf00      	nop
 8004818:	3710      	adds	r7, #16
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}
 800481e:	bf00      	nop
 8004820:	200003ec 	.word	0x200003ec
 8004824:	200002e8 	.word	0x200002e8
 8004828:	200003f0 	.word	0x200003f0
 800482c:	200003d4 	.word	0x200003d4
 8004830:	200003a4 	.word	0x200003a4
 8004834:	200003a0 	.word	0x200003a0
 8004838:	20000408 	.word	0x20000408

0800483c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800483c:	b480      	push	{r7}
 800483e:	b085      	sub	sp, #20
 8004840:	af00      	add	r7, sp, #0
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	3b04      	subs	r3, #4
 800484c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004854:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	3b04      	subs	r3, #4
 800485a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	f023 0201 	bic.w	r2, r3, #1
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	3b04      	subs	r3, #4
 800486a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800486c:	4a0c      	ldr	r2, [pc, #48]	; (80048a0 <pxPortInitialiseStack+0x64>)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	3b14      	subs	r3, #20
 8004876:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	3b04      	subs	r3, #4
 8004882:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f06f 0202 	mvn.w	r2, #2
 800488a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	3b20      	subs	r3, #32
 8004890:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004892:	68fb      	ldr	r3, [r7, #12]
}
 8004894:	4618      	mov	r0, r3
 8004896:	3714      	adds	r7, #20
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr
 80048a0:	080048a5 	.word	0x080048a5

080048a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80048a4:	b480      	push	{r7}
 80048a6:	b085      	sub	sp, #20
 80048a8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80048aa:	2300      	movs	r3, #0
 80048ac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80048ae:	4b11      	ldr	r3, [pc, #68]	; (80048f4 <prvTaskExitError+0x50>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048b6:	d009      	beq.n	80048cc <prvTaskExitError+0x28>
 80048b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048bc:	f383 8811 	msr	BASEPRI, r3
 80048c0:	f3bf 8f6f 	isb	sy
 80048c4:	f3bf 8f4f 	dsb	sy
 80048c8:	60fb      	str	r3, [r7, #12]
 80048ca:	e7fe      	b.n	80048ca <prvTaskExitError+0x26>
 80048cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d0:	f383 8811 	msr	BASEPRI, r3
 80048d4:	f3bf 8f6f 	isb	sy
 80048d8:	f3bf 8f4f 	dsb	sy
 80048dc:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80048de:	bf00      	nop
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d0fc      	beq.n	80048e0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80048e6:	bf00      	nop
 80048e8:	3714      	adds	r7, #20
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr
 80048f2:	bf00      	nop
 80048f4:	2000000c 	.word	0x2000000c
	...

08004900 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004900:	4b07      	ldr	r3, [pc, #28]	; (8004920 <pxCurrentTCBConst2>)
 8004902:	6819      	ldr	r1, [r3, #0]
 8004904:	6808      	ldr	r0, [r1, #0]
 8004906:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800490a:	f380 8809 	msr	PSP, r0
 800490e:	f3bf 8f6f 	isb	sy
 8004912:	f04f 0000 	mov.w	r0, #0
 8004916:	f380 8811 	msr	BASEPRI, r0
 800491a:	4770      	bx	lr
 800491c:	f3af 8000 	nop.w

08004920 <pxCurrentTCBConst2>:
 8004920:	200002e8 	.word	0x200002e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004924:	bf00      	nop
 8004926:	bf00      	nop

08004928 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004928:	4808      	ldr	r0, [pc, #32]	; (800494c <prvPortStartFirstTask+0x24>)
 800492a:	6800      	ldr	r0, [r0, #0]
 800492c:	6800      	ldr	r0, [r0, #0]
 800492e:	f380 8808 	msr	MSP, r0
 8004932:	f04f 0000 	mov.w	r0, #0
 8004936:	f380 8814 	msr	CONTROL, r0
 800493a:	b662      	cpsie	i
 800493c:	b661      	cpsie	f
 800493e:	f3bf 8f4f 	dsb	sy
 8004942:	f3bf 8f6f 	isb	sy
 8004946:	df00      	svc	0
 8004948:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800494a:	bf00      	nop
 800494c:	e000ed08 	.word	0xe000ed08

08004950 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b086      	sub	sp, #24
 8004954:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004956:	4b44      	ldr	r3, [pc, #272]	; (8004a68 <xPortStartScheduler+0x118>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a44      	ldr	r2, [pc, #272]	; (8004a6c <xPortStartScheduler+0x11c>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d109      	bne.n	8004974 <xPortStartScheduler+0x24>
 8004960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004964:	f383 8811 	msr	BASEPRI, r3
 8004968:	f3bf 8f6f 	isb	sy
 800496c:	f3bf 8f4f 	dsb	sy
 8004970:	613b      	str	r3, [r7, #16]
 8004972:	e7fe      	b.n	8004972 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004974:	4b3c      	ldr	r3, [pc, #240]	; (8004a68 <xPortStartScheduler+0x118>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a3d      	ldr	r2, [pc, #244]	; (8004a70 <xPortStartScheduler+0x120>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d109      	bne.n	8004992 <xPortStartScheduler+0x42>
 800497e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004982:	f383 8811 	msr	BASEPRI, r3
 8004986:	f3bf 8f6f 	isb	sy
 800498a:	f3bf 8f4f 	dsb	sy
 800498e:	60fb      	str	r3, [r7, #12]
 8004990:	e7fe      	b.n	8004990 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004992:	4b38      	ldr	r3, [pc, #224]	; (8004a74 <xPortStartScheduler+0x124>)
 8004994:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	781b      	ldrb	r3, [r3, #0]
 800499a:	b2db      	uxtb	r3, r3
 800499c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	22ff      	movs	r2, #255	; 0xff
 80049a2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80049ac:	78fb      	ldrb	r3, [r7, #3]
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80049b4:	b2da      	uxtb	r2, r3
 80049b6:	4b30      	ldr	r3, [pc, #192]	; (8004a78 <xPortStartScheduler+0x128>)
 80049b8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80049ba:	4b30      	ldr	r3, [pc, #192]	; (8004a7c <xPortStartScheduler+0x12c>)
 80049bc:	2207      	movs	r2, #7
 80049be:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80049c0:	e009      	b.n	80049d6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80049c2:	4b2e      	ldr	r3, [pc, #184]	; (8004a7c <xPortStartScheduler+0x12c>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	3b01      	subs	r3, #1
 80049c8:	4a2c      	ldr	r2, [pc, #176]	; (8004a7c <xPortStartScheduler+0x12c>)
 80049ca:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80049cc:	78fb      	ldrb	r3, [r7, #3]
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	005b      	lsls	r3, r3, #1
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80049d6:	78fb      	ldrb	r3, [r7, #3]
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049de:	2b80      	cmp	r3, #128	; 0x80
 80049e0:	d0ef      	beq.n	80049c2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80049e2:	4b26      	ldr	r3, [pc, #152]	; (8004a7c <xPortStartScheduler+0x12c>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f1c3 0307 	rsb	r3, r3, #7
 80049ea:	2b04      	cmp	r3, #4
 80049ec:	d009      	beq.n	8004a02 <xPortStartScheduler+0xb2>
 80049ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f2:	f383 8811 	msr	BASEPRI, r3
 80049f6:	f3bf 8f6f 	isb	sy
 80049fa:	f3bf 8f4f 	dsb	sy
 80049fe:	60bb      	str	r3, [r7, #8]
 8004a00:	e7fe      	b.n	8004a00 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004a02:	4b1e      	ldr	r3, [pc, #120]	; (8004a7c <xPortStartScheduler+0x12c>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	021b      	lsls	r3, r3, #8
 8004a08:	4a1c      	ldr	r2, [pc, #112]	; (8004a7c <xPortStartScheduler+0x12c>)
 8004a0a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004a0c:	4b1b      	ldr	r3, [pc, #108]	; (8004a7c <xPortStartScheduler+0x12c>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004a14:	4a19      	ldr	r2, [pc, #100]	; (8004a7c <xPortStartScheduler+0x12c>)
 8004a16:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	b2da      	uxtb	r2, r3
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004a20:	4b17      	ldr	r3, [pc, #92]	; (8004a80 <xPortStartScheduler+0x130>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a16      	ldr	r2, [pc, #88]	; (8004a80 <xPortStartScheduler+0x130>)
 8004a26:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004a2a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004a2c:	4b14      	ldr	r3, [pc, #80]	; (8004a80 <xPortStartScheduler+0x130>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a13      	ldr	r2, [pc, #76]	; (8004a80 <xPortStartScheduler+0x130>)
 8004a32:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004a36:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004a38:	f000 f8d6 	bl	8004be8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004a3c:	4b11      	ldr	r3, [pc, #68]	; (8004a84 <xPortStartScheduler+0x134>)
 8004a3e:	2200      	movs	r2, #0
 8004a40:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004a42:	f000 f8f5 	bl	8004c30 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004a46:	4b10      	ldr	r3, [pc, #64]	; (8004a88 <xPortStartScheduler+0x138>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a0f      	ldr	r2, [pc, #60]	; (8004a88 <xPortStartScheduler+0x138>)
 8004a4c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004a50:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004a52:	f7ff ff69 	bl	8004928 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004a56:	f7ff fa89 	bl	8003f6c <vTaskSwitchContext>
	prvTaskExitError();
 8004a5a:	f7ff ff23 	bl	80048a4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004a5e:	2300      	movs	r3, #0
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3718      	adds	r7, #24
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}
 8004a68:	e000ed00 	.word	0xe000ed00
 8004a6c:	410fc271 	.word	0x410fc271
 8004a70:	410fc270 	.word	0x410fc270
 8004a74:	e000e400 	.word	0xe000e400
 8004a78:	20000414 	.word	0x20000414
 8004a7c:	20000418 	.word	0x20000418
 8004a80:	e000ed20 	.word	0xe000ed20
 8004a84:	2000000c 	.word	0x2000000c
 8004a88:	e000ef34 	.word	0xe000ef34

08004a8c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b083      	sub	sp, #12
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a96:	f383 8811 	msr	BASEPRI, r3
 8004a9a:	f3bf 8f6f 	isb	sy
 8004a9e:	f3bf 8f4f 	dsb	sy
 8004aa2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004aa4:	4b0e      	ldr	r3, [pc, #56]	; (8004ae0 <vPortEnterCritical+0x54>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	3301      	adds	r3, #1
 8004aaa:	4a0d      	ldr	r2, [pc, #52]	; (8004ae0 <vPortEnterCritical+0x54>)
 8004aac:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004aae:	4b0c      	ldr	r3, [pc, #48]	; (8004ae0 <vPortEnterCritical+0x54>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d10e      	bne.n	8004ad4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004ab6:	4b0b      	ldr	r3, [pc, #44]	; (8004ae4 <vPortEnterCritical+0x58>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d009      	beq.n	8004ad4 <vPortEnterCritical+0x48>
 8004ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac4:	f383 8811 	msr	BASEPRI, r3
 8004ac8:	f3bf 8f6f 	isb	sy
 8004acc:	f3bf 8f4f 	dsb	sy
 8004ad0:	603b      	str	r3, [r7, #0]
 8004ad2:	e7fe      	b.n	8004ad2 <vPortEnterCritical+0x46>
	}
}
 8004ad4:	bf00      	nop
 8004ad6:	370c      	adds	r7, #12
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr
 8004ae0:	2000000c 	.word	0x2000000c
 8004ae4:	e000ed04 	.word	0xe000ed04

08004ae8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004aee:	4b11      	ldr	r3, [pc, #68]	; (8004b34 <vPortExitCritical+0x4c>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d109      	bne.n	8004b0a <vPortExitCritical+0x22>
 8004af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004afa:	f383 8811 	msr	BASEPRI, r3
 8004afe:	f3bf 8f6f 	isb	sy
 8004b02:	f3bf 8f4f 	dsb	sy
 8004b06:	607b      	str	r3, [r7, #4]
 8004b08:	e7fe      	b.n	8004b08 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8004b0a:	4b0a      	ldr	r3, [pc, #40]	; (8004b34 <vPortExitCritical+0x4c>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	3b01      	subs	r3, #1
 8004b10:	4a08      	ldr	r2, [pc, #32]	; (8004b34 <vPortExitCritical+0x4c>)
 8004b12:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004b14:	4b07      	ldr	r3, [pc, #28]	; (8004b34 <vPortExitCritical+0x4c>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d104      	bne.n	8004b26 <vPortExitCritical+0x3e>
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004b26:	bf00      	nop
 8004b28:	370c      	adds	r7, #12
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr
 8004b32:	bf00      	nop
 8004b34:	2000000c 	.word	0x2000000c
	...

08004b40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004b40:	f3ef 8009 	mrs	r0, PSP
 8004b44:	f3bf 8f6f 	isb	sy
 8004b48:	4b15      	ldr	r3, [pc, #84]	; (8004ba0 <pxCurrentTCBConst>)
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	f01e 0f10 	tst.w	lr, #16
 8004b50:	bf08      	it	eq
 8004b52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004b56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b5a:	6010      	str	r0, [r2, #0]
 8004b5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004b60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004b64:	f380 8811 	msr	BASEPRI, r0
 8004b68:	f3bf 8f4f 	dsb	sy
 8004b6c:	f3bf 8f6f 	isb	sy
 8004b70:	f7ff f9fc 	bl	8003f6c <vTaskSwitchContext>
 8004b74:	f04f 0000 	mov.w	r0, #0
 8004b78:	f380 8811 	msr	BASEPRI, r0
 8004b7c:	bc09      	pop	{r0, r3}
 8004b7e:	6819      	ldr	r1, [r3, #0]
 8004b80:	6808      	ldr	r0, [r1, #0]
 8004b82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b86:	f01e 0f10 	tst.w	lr, #16
 8004b8a:	bf08      	it	eq
 8004b8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004b90:	f380 8809 	msr	PSP, r0
 8004b94:	f3bf 8f6f 	isb	sy
 8004b98:	4770      	bx	lr
 8004b9a:	bf00      	nop
 8004b9c:	f3af 8000 	nop.w

08004ba0 <pxCurrentTCBConst>:
 8004ba0:	200002e8 	.word	0x200002e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004ba4:	bf00      	nop
 8004ba6:	bf00      	nop

08004ba8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b082      	sub	sp, #8
 8004bac:	af00      	add	r7, sp, #0
	__asm volatile
 8004bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb2:	f383 8811 	msr	BASEPRI, r3
 8004bb6:	f3bf 8f6f 	isb	sy
 8004bba:	f3bf 8f4f 	dsb	sy
 8004bbe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004bc0:	f7ff f91c 	bl	8003dfc <xTaskIncrementTick>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d003      	beq.n	8004bd2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004bca:	4b06      	ldr	r3, [pc, #24]	; (8004be4 <SysTick_Handler+0x3c>)
 8004bcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bd0:	601a      	str	r2, [r3, #0]
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8004bdc:	bf00      	nop
 8004bde:	3708      	adds	r7, #8
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}
 8004be4:	e000ed04 	.word	0xe000ed04

08004be8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004be8:	b480      	push	{r7}
 8004bea:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004bec:	4b0b      	ldr	r3, [pc, #44]	; (8004c1c <vPortSetupTimerInterrupt+0x34>)
 8004bee:	2200      	movs	r2, #0
 8004bf0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004bf2:	4b0b      	ldr	r3, [pc, #44]	; (8004c20 <vPortSetupTimerInterrupt+0x38>)
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004bf8:	4b0a      	ldr	r3, [pc, #40]	; (8004c24 <vPortSetupTimerInterrupt+0x3c>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a0a      	ldr	r2, [pc, #40]	; (8004c28 <vPortSetupTimerInterrupt+0x40>)
 8004bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8004c02:	099b      	lsrs	r3, r3, #6
 8004c04:	4a09      	ldr	r2, [pc, #36]	; (8004c2c <vPortSetupTimerInterrupt+0x44>)
 8004c06:	3b01      	subs	r3, #1
 8004c08:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004c0a:	4b04      	ldr	r3, [pc, #16]	; (8004c1c <vPortSetupTimerInterrupt+0x34>)
 8004c0c:	2207      	movs	r2, #7
 8004c0e:	601a      	str	r2, [r3, #0]
}
 8004c10:	bf00      	nop
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr
 8004c1a:	bf00      	nop
 8004c1c:	e000e010 	.word	0xe000e010
 8004c20:	e000e018 	.word	0xe000e018
 8004c24:	20000000 	.word	0x20000000
 8004c28:	10624dd3 	.word	0x10624dd3
 8004c2c:	e000e014 	.word	0xe000e014

08004c30 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004c30:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004c40 <vPortEnableVFP+0x10>
 8004c34:	6801      	ldr	r1, [r0, #0]
 8004c36:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004c3a:	6001      	str	r1, [r0, #0]
 8004c3c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004c3e:	bf00      	nop
 8004c40:	e000ed88 	.word	0xe000ed88

08004c44 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004c44:	b480      	push	{r7}
 8004c46:	b085      	sub	sp, #20
 8004c48:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004c4a:	f3ef 8305 	mrs	r3, IPSR
 8004c4e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2b0f      	cmp	r3, #15
 8004c54:	d913      	bls.n	8004c7e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004c56:	4a16      	ldr	r2, [pc, #88]	; (8004cb0 <vPortValidateInterruptPriority+0x6c>)
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	4413      	add	r3, r2
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004c60:	4b14      	ldr	r3, [pc, #80]	; (8004cb4 <vPortValidateInterruptPriority+0x70>)
 8004c62:	781b      	ldrb	r3, [r3, #0]
 8004c64:	7afa      	ldrb	r2, [r7, #11]
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d209      	bcs.n	8004c7e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8004c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c6e:	f383 8811 	msr	BASEPRI, r3
 8004c72:	f3bf 8f6f 	isb	sy
 8004c76:	f3bf 8f4f 	dsb	sy
 8004c7a:	607b      	str	r3, [r7, #4]
 8004c7c:	e7fe      	b.n	8004c7c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004c7e:	4b0e      	ldr	r3, [pc, #56]	; (8004cb8 <vPortValidateInterruptPriority+0x74>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004c86:	4b0d      	ldr	r3, [pc, #52]	; (8004cbc <vPortValidateInterruptPriority+0x78>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d909      	bls.n	8004ca2 <vPortValidateInterruptPriority+0x5e>
 8004c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c92:	f383 8811 	msr	BASEPRI, r3
 8004c96:	f3bf 8f6f 	isb	sy
 8004c9a:	f3bf 8f4f 	dsb	sy
 8004c9e:	603b      	str	r3, [r7, #0]
 8004ca0:	e7fe      	b.n	8004ca0 <vPortValidateInterruptPriority+0x5c>
	}
 8004ca2:	bf00      	nop
 8004ca4:	3714      	adds	r7, #20
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop
 8004cb0:	e000e3f0 	.word	0xe000e3f0
 8004cb4:	20000414 	.word	0x20000414
 8004cb8:	e000ed0c 	.word	0xe000ed0c
 8004cbc:	20000418 	.word	0x20000418

08004cc0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b08a      	sub	sp, #40	; 0x28
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004ccc:	f7fe ffec 	bl	8003ca8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004cd0:	4b57      	ldr	r3, [pc, #348]	; (8004e30 <pvPortMalloc+0x170>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d101      	bne.n	8004cdc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004cd8:	f000 f90c 	bl	8004ef4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004cdc:	4b55      	ldr	r3, [pc, #340]	; (8004e34 <pvPortMalloc+0x174>)
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	f040 808c 	bne.w	8004e02 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d01c      	beq.n	8004d2a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8004cf0:	2208      	movs	r2, #8
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4413      	add	r3, r2
 8004cf6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f003 0307 	and.w	r3, r3, #7
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d013      	beq.n	8004d2a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f023 0307 	bic.w	r3, r3, #7
 8004d08:	3308      	adds	r3, #8
 8004d0a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f003 0307 	and.w	r3, r3, #7
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d009      	beq.n	8004d2a <pvPortMalloc+0x6a>
 8004d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d1a:	f383 8811 	msr	BASEPRI, r3
 8004d1e:	f3bf 8f6f 	isb	sy
 8004d22:	f3bf 8f4f 	dsb	sy
 8004d26:	617b      	str	r3, [r7, #20]
 8004d28:	e7fe      	b.n	8004d28 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d068      	beq.n	8004e02 <pvPortMalloc+0x142>
 8004d30:	4b41      	ldr	r3, [pc, #260]	; (8004e38 <pvPortMalloc+0x178>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d863      	bhi.n	8004e02 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004d3a:	4b40      	ldr	r3, [pc, #256]	; (8004e3c <pvPortMalloc+0x17c>)
 8004d3c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004d3e:	4b3f      	ldr	r3, [pc, #252]	; (8004e3c <pvPortMalloc+0x17c>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004d44:	e004      	b.n	8004d50 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8004d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d48:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d903      	bls.n	8004d62 <pvPortMalloc+0xa2>
 8004d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d1f1      	bne.n	8004d46 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004d62:	4b33      	ldr	r3, [pc, #204]	; (8004e30 <pvPortMalloc+0x170>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d04a      	beq.n	8004e02 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004d6c:	6a3b      	ldr	r3, [r7, #32]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	2208      	movs	r2, #8
 8004d72:	4413      	add	r3, r2
 8004d74:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	6a3b      	ldr	r3, [r7, #32]
 8004d7c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d80:	685a      	ldr	r2, [r3, #4]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	1ad2      	subs	r2, r2, r3
 8004d86:	2308      	movs	r3, #8
 8004d88:	005b      	lsls	r3, r3, #1
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d91e      	bls.n	8004dcc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004d8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	4413      	add	r3, r2
 8004d94:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d96:	69bb      	ldr	r3, [r7, #24]
 8004d98:	f003 0307 	and.w	r3, r3, #7
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d009      	beq.n	8004db4 <pvPortMalloc+0xf4>
 8004da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da4:	f383 8811 	msr	BASEPRI, r3
 8004da8:	f3bf 8f6f 	isb	sy
 8004dac:	f3bf 8f4f 	dsb	sy
 8004db0:	613b      	str	r3, [r7, #16]
 8004db2:	e7fe      	b.n	8004db2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db6:	685a      	ldr	r2, [r3, #4]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	1ad2      	subs	r2, r2, r3
 8004dbc:	69bb      	ldr	r3, [r7, #24]
 8004dbe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004dc6:	69b8      	ldr	r0, [r7, #24]
 8004dc8:	f000 f8f6 	bl	8004fb8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004dcc:	4b1a      	ldr	r3, [pc, #104]	; (8004e38 <pvPortMalloc+0x178>)
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	4a18      	ldr	r2, [pc, #96]	; (8004e38 <pvPortMalloc+0x178>)
 8004dd8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004dda:	4b17      	ldr	r3, [pc, #92]	; (8004e38 <pvPortMalloc+0x178>)
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	4b18      	ldr	r3, [pc, #96]	; (8004e40 <pvPortMalloc+0x180>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d203      	bcs.n	8004dee <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004de6:	4b14      	ldr	r3, [pc, #80]	; (8004e38 <pvPortMalloc+0x178>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a15      	ldr	r2, [pc, #84]	; (8004e40 <pvPortMalloc+0x180>)
 8004dec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df0:	685a      	ldr	r2, [r3, #4]
 8004df2:	4b10      	ldr	r3, [pc, #64]	; (8004e34 <pvPortMalloc+0x174>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	431a      	orrs	r2, r3
 8004df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfe:	2200      	movs	r2, #0
 8004e00:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004e02:	f7fe ff5f 	bl	8003cc4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e06:	69fb      	ldr	r3, [r7, #28]
 8004e08:	f003 0307 	and.w	r3, r3, #7
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d009      	beq.n	8004e24 <pvPortMalloc+0x164>
 8004e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e14:	f383 8811 	msr	BASEPRI, r3
 8004e18:	f3bf 8f6f 	isb	sy
 8004e1c:	f3bf 8f4f 	dsb	sy
 8004e20:	60fb      	str	r3, [r7, #12]
 8004e22:	e7fe      	b.n	8004e22 <pvPortMalloc+0x162>
	return pvReturn;
 8004e24:	69fb      	ldr	r3, [r7, #28]
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3728      	adds	r7, #40	; 0x28
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	20004024 	.word	0x20004024
 8004e34:	20004030 	.word	0x20004030
 8004e38:	20004028 	.word	0x20004028
 8004e3c:	2000401c 	.word	0x2000401c
 8004e40:	2000402c 	.word	0x2000402c

08004e44 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b086      	sub	sp, #24
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d046      	beq.n	8004ee4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004e56:	2308      	movs	r3, #8
 8004e58:	425b      	negs	r3, r3
 8004e5a:	697a      	ldr	r2, [r7, #20]
 8004e5c:	4413      	add	r3, r2
 8004e5e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	685a      	ldr	r2, [r3, #4]
 8004e68:	4b20      	ldr	r3, [pc, #128]	; (8004eec <vPortFree+0xa8>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4013      	ands	r3, r2
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d109      	bne.n	8004e86 <vPortFree+0x42>
 8004e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e76:	f383 8811 	msr	BASEPRI, r3
 8004e7a:	f3bf 8f6f 	isb	sy
 8004e7e:	f3bf 8f4f 	dsb	sy
 8004e82:	60fb      	str	r3, [r7, #12]
 8004e84:	e7fe      	b.n	8004e84 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d009      	beq.n	8004ea2 <vPortFree+0x5e>
 8004e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e92:	f383 8811 	msr	BASEPRI, r3
 8004e96:	f3bf 8f6f 	isb	sy
 8004e9a:	f3bf 8f4f 	dsb	sy
 8004e9e:	60bb      	str	r3, [r7, #8]
 8004ea0:	e7fe      	b.n	8004ea0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	685a      	ldr	r2, [r3, #4]
 8004ea6:	4b11      	ldr	r3, [pc, #68]	; (8004eec <vPortFree+0xa8>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4013      	ands	r3, r2
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d019      	beq.n	8004ee4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d115      	bne.n	8004ee4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	685a      	ldr	r2, [r3, #4]
 8004ebc:	4b0b      	ldr	r3, [pc, #44]	; (8004eec <vPortFree+0xa8>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	43db      	mvns	r3, r3
 8004ec2:	401a      	ands	r2, r3
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004ec8:	f7fe feee 	bl	8003ca8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	685a      	ldr	r2, [r3, #4]
 8004ed0:	4b07      	ldr	r3, [pc, #28]	; (8004ef0 <vPortFree+0xac>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4413      	add	r3, r2
 8004ed6:	4a06      	ldr	r2, [pc, #24]	; (8004ef0 <vPortFree+0xac>)
 8004ed8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004eda:	6938      	ldr	r0, [r7, #16]
 8004edc:	f000 f86c 	bl	8004fb8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004ee0:	f7fe fef0 	bl	8003cc4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004ee4:	bf00      	nop
 8004ee6:	3718      	adds	r7, #24
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}
 8004eec:	20004030 	.word	0x20004030
 8004ef0:	20004028 	.word	0x20004028

08004ef4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b085      	sub	sp, #20
 8004ef8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004efa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004efe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004f00:	4b27      	ldr	r3, [pc, #156]	; (8004fa0 <prvHeapInit+0xac>)
 8004f02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f003 0307 	and.w	r3, r3, #7
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d00c      	beq.n	8004f28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	3307      	adds	r3, #7
 8004f12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f023 0307 	bic.w	r3, r3, #7
 8004f1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004f1c:	68ba      	ldr	r2, [r7, #8]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	4a1f      	ldr	r2, [pc, #124]	; (8004fa0 <prvHeapInit+0xac>)
 8004f24:	4413      	add	r3, r2
 8004f26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004f2c:	4a1d      	ldr	r2, [pc, #116]	; (8004fa4 <prvHeapInit+0xb0>)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004f32:	4b1c      	ldr	r3, [pc, #112]	; (8004fa4 <prvHeapInit+0xb0>)
 8004f34:	2200      	movs	r2, #0
 8004f36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	68ba      	ldr	r2, [r7, #8]
 8004f3c:	4413      	add	r3, r2
 8004f3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004f40:	2208      	movs	r2, #8
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	1a9b      	subs	r3, r3, r2
 8004f46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f023 0307 	bic.w	r3, r3, #7
 8004f4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	4a15      	ldr	r2, [pc, #84]	; (8004fa8 <prvHeapInit+0xb4>)
 8004f54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004f56:	4b14      	ldr	r3, [pc, #80]	; (8004fa8 <prvHeapInit+0xb4>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004f5e:	4b12      	ldr	r3, [pc, #72]	; (8004fa8 <prvHeapInit+0xb4>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	2200      	movs	r2, #0
 8004f64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	68fa      	ldr	r2, [r7, #12]
 8004f6e:	1ad2      	subs	r2, r2, r3
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004f74:	4b0c      	ldr	r3, [pc, #48]	; (8004fa8 <prvHeapInit+0xb4>)
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	4a0a      	ldr	r2, [pc, #40]	; (8004fac <prvHeapInit+0xb8>)
 8004f82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	4a09      	ldr	r2, [pc, #36]	; (8004fb0 <prvHeapInit+0xbc>)
 8004f8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004f8c:	4b09      	ldr	r3, [pc, #36]	; (8004fb4 <prvHeapInit+0xc0>)
 8004f8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004f92:	601a      	str	r2, [r3, #0]
}
 8004f94:	bf00      	nop
 8004f96:	3714      	adds	r7, #20
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr
 8004fa0:	2000041c 	.word	0x2000041c
 8004fa4:	2000401c 	.word	0x2000401c
 8004fa8:	20004024 	.word	0x20004024
 8004fac:	2000402c 	.word	0x2000402c
 8004fb0:	20004028 	.word	0x20004028
 8004fb4:	20004030 	.word	0x20004030

08004fb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b085      	sub	sp, #20
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004fc0:	4b28      	ldr	r3, [pc, #160]	; (8005064 <prvInsertBlockIntoFreeList+0xac>)
 8004fc2:	60fb      	str	r3, [r7, #12]
 8004fc4:	e002      	b.n	8004fcc <prvInsertBlockIntoFreeList+0x14>
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	60fb      	str	r3, [r7, #12]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	687a      	ldr	r2, [r7, #4]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d8f7      	bhi.n	8004fc6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	68ba      	ldr	r2, [r7, #8]
 8004fe0:	4413      	add	r3, r2
 8004fe2:	687a      	ldr	r2, [r7, #4]
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d108      	bne.n	8004ffa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	685a      	ldr	r2, [r3, #4]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	441a      	add	r2, r3
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	68ba      	ldr	r2, [r7, #8]
 8005004:	441a      	add	r2, r3
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	429a      	cmp	r2, r3
 800500c:	d118      	bne.n	8005040 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	4b15      	ldr	r3, [pc, #84]	; (8005068 <prvInsertBlockIntoFreeList+0xb0>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	429a      	cmp	r2, r3
 8005018:	d00d      	beq.n	8005036 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	685a      	ldr	r2, [r3, #4]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	441a      	add	r2, r3
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	601a      	str	r2, [r3, #0]
 8005034:	e008      	b.n	8005048 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005036:	4b0c      	ldr	r3, [pc, #48]	; (8005068 <prvInsertBlockIntoFreeList+0xb0>)
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	601a      	str	r2, [r3, #0]
 800503e:	e003      	b.n	8005048 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005048:	68fa      	ldr	r2, [r7, #12]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	429a      	cmp	r2, r3
 800504e:	d002      	beq.n	8005056 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005056:	bf00      	nop
 8005058:	3714      	adds	r7, #20
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr
 8005062:	bf00      	nop
 8005064:	2000401c 	.word	0x2000401c
 8005068:	20004024 	.word	0x20004024

0800506c <__errno>:
 800506c:	4b01      	ldr	r3, [pc, #4]	; (8005074 <__errno+0x8>)
 800506e:	6818      	ldr	r0, [r3, #0]
 8005070:	4770      	bx	lr
 8005072:	bf00      	nop
 8005074:	20000010 	.word	0x20000010

08005078 <__libc_init_array>:
 8005078:	b570      	push	{r4, r5, r6, lr}
 800507a:	4e0d      	ldr	r6, [pc, #52]	; (80050b0 <__libc_init_array+0x38>)
 800507c:	4c0d      	ldr	r4, [pc, #52]	; (80050b4 <__libc_init_array+0x3c>)
 800507e:	1ba4      	subs	r4, r4, r6
 8005080:	10a4      	asrs	r4, r4, #2
 8005082:	2500      	movs	r5, #0
 8005084:	42a5      	cmp	r5, r4
 8005086:	d109      	bne.n	800509c <__libc_init_array+0x24>
 8005088:	4e0b      	ldr	r6, [pc, #44]	; (80050b8 <__libc_init_array+0x40>)
 800508a:	4c0c      	ldr	r4, [pc, #48]	; (80050bc <__libc_init_array+0x44>)
 800508c:	f000 fc28 	bl	80058e0 <_init>
 8005090:	1ba4      	subs	r4, r4, r6
 8005092:	10a4      	asrs	r4, r4, #2
 8005094:	2500      	movs	r5, #0
 8005096:	42a5      	cmp	r5, r4
 8005098:	d105      	bne.n	80050a6 <__libc_init_array+0x2e>
 800509a:	bd70      	pop	{r4, r5, r6, pc}
 800509c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80050a0:	4798      	blx	r3
 80050a2:	3501      	adds	r5, #1
 80050a4:	e7ee      	b.n	8005084 <__libc_init_array+0xc>
 80050a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80050aa:	4798      	blx	r3
 80050ac:	3501      	adds	r5, #1
 80050ae:	e7f2      	b.n	8005096 <__libc_init_array+0x1e>
 80050b0:	08005a4c 	.word	0x08005a4c
 80050b4:	08005a4c 	.word	0x08005a4c
 80050b8:	08005a4c 	.word	0x08005a4c
 80050bc:	08005a50 	.word	0x08005a50

080050c0 <memcpy>:
 80050c0:	b510      	push	{r4, lr}
 80050c2:	1e43      	subs	r3, r0, #1
 80050c4:	440a      	add	r2, r1
 80050c6:	4291      	cmp	r1, r2
 80050c8:	d100      	bne.n	80050cc <memcpy+0xc>
 80050ca:	bd10      	pop	{r4, pc}
 80050cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80050d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80050d4:	e7f7      	b.n	80050c6 <memcpy+0x6>

080050d6 <memset>:
 80050d6:	4402      	add	r2, r0
 80050d8:	4603      	mov	r3, r0
 80050da:	4293      	cmp	r3, r2
 80050dc:	d100      	bne.n	80050e0 <memset+0xa>
 80050de:	4770      	bx	lr
 80050e0:	f803 1b01 	strb.w	r1, [r3], #1
 80050e4:	e7f9      	b.n	80050da <memset+0x4>
	...

080050e8 <siprintf>:
 80050e8:	b40e      	push	{r1, r2, r3}
 80050ea:	b500      	push	{lr}
 80050ec:	b09c      	sub	sp, #112	; 0x70
 80050ee:	ab1d      	add	r3, sp, #116	; 0x74
 80050f0:	9002      	str	r0, [sp, #8]
 80050f2:	9006      	str	r0, [sp, #24]
 80050f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80050f8:	4809      	ldr	r0, [pc, #36]	; (8005120 <siprintf+0x38>)
 80050fa:	9107      	str	r1, [sp, #28]
 80050fc:	9104      	str	r1, [sp, #16]
 80050fe:	4909      	ldr	r1, [pc, #36]	; (8005124 <siprintf+0x3c>)
 8005100:	f853 2b04 	ldr.w	r2, [r3], #4
 8005104:	9105      	str	r1, [sp, #20]
 8005106:	6800      	ldr	r0, [r0, #0]
 8005108:	9301      	str	r3, [sp, #4]
 800510a:	a902      	add	r1, sp, #8
 800510c:	f000 f866 	bl	80051dc <_svfiprintf_r>
 8005110:	9b02      	ldr	r3, [sp, #8]
 8005112:	2200      	movs	r2, #0
 8005114:	701a      	strb	r2, [r3, #0]
 8005116:	b01c      	add	sp, #112	; 0x70
 8005118:	f85d eb04 	ldr.w	lr, [sp], #4
 800511c:	b003      	add	sp, #12
 800511e:	4770      	bx	lr
 8005120:	20000010 	.word	0x20000010
 8005124:	ffff0208 	.word	0xffff0208

08005128 <__ssputs_r>:
 8005128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800512c:	688e      	ldr	r6, [r1, #8]
 800512e:	429e      	cmp	r6, r3
 8005130:	4682      	mov	sl, r0
 8005132:	460c      	mov	r4, r1
 8005134:	4690      	mov	r8, r2
 8005136:	4699      	mov	r9, r3
 8005138:	d837      	bhi.n	80051aa <__ssputs_r+0x82>
 800513a:	898a      	ldrh	r2, [r1, #12]
 800513c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005140:	d031      	beq.n	80051a6 <__ssputs_r+0x7e>
 8005142:	6825      	ldr	r5, [r4, #0]
 8005144:	6909      	ldr	r1, [r1, #16]
 8005146:	1a6f      	subs	r7, r5, r1
 8005148:	6965      	ldr	r5, [r4, #20]
 800514a:	2302      	movs	r3, #2
 800514c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005150:	fb95 f5f3 	sdiv	r5, r5, r3
 8005154:	f109 0301 	add.w	r3, r9, #1
 8005158:	443b      	add	r3, r7
 800515a:	429d      	cmp	r5, r3
 800515c:	bf38      	it	cc
 800515e:	461d      	movcc	r5, r3
 8005160:	0553      	lsls	r3, r2, #21
 8005162:	d530      	bpl.n	80051c6 <__ssputs_r+0x9e>
 8005164:	4629      	mov	r1, r5
 8005166:	f000 fb21 	bl	80057ac <_malloc_r>
 800516a:	4606      	mov	r6, r0
 800516c:	b950      	cbnz	r0, 8005184 <__ssputs_r+0x5c>
 800516e:	230c      	movs	r3, #12
 8005170:	f8ca 3000 	str.w	r3, [sl]
 8005174:	89a3      	ldrh	r3, [r4, #12]
 8005176:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800517a:	81a3      	strh	r3, [r4, #12]
 800517c:	f04f 30ff 	mov.w	r0, #4294967295
 8005180:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005184:	463a      	mov	r2, r7
 8005186:	6921      	ldr	r1, [r4, #16]
 8005188:	f7ff ff9a 	bl	80050c0 <memcpy>
 800518c:	89a3      	ldrh	r3, [r4, #12]
 800518e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005192:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005196:	81a3      	strh	r3, [r4, #12]
 8005198:	6126      	str	r6, [r4, #16]
 800519a:	6165      	str	r5, [r4, #20]
 800519c:	443e      	add	r6, r7
 800519e:	1bed      	subs	r5, r5, r7
 80051a0:	6026      	str	r6, [r4, #0]
 80051a2:	60a5      	str	r5, [r4, #8]
 80051a4:	464e      	mov	r6, r9
 80051a6:	454e      	cmp	r6, r9
 80051a8:	d900      	bls.n	80051ac <__ssputs_r+0x84>
 80051aa:	464e      	mov	r6, r9
 80051ac:	4632      	mov	r2, r6
 80051ae:	4641      	mov	r1, r8
 80051b0:	6820      	ldr	r0, [r4, #0]
 80051b2:	f000 fa93 	bl	80056dc <memmove>
 80051b6:	68a3      	ldr	r3, [r4, #8]
 80051b8:	1b9b      	subs	r3, r3, r6
 80051ba:	60a3      	str	r3, [r4, #8]
 80051bc:	6823      	ldr	r3, [r4, #0]
 80051be:	441e      	add	r6, r3
 80051c0:	6026      	str	r6, [r4, #0]
 80051c2:	2000      	movs	r0, #0
 80051c4:	e7dc      	b.n	8005180 <__ssputs_r+0x58>
 80051c6:	462a      	mov	r2, r5
 80051c8:	f000 fb4a 	bl	8005860 <_realloc_r>
 80051cc:	4606      	mov	r6, r0
 80051ce:	2800      	cmp	r0, #0
 80051d0:	d1e2      	bne.n	8005198 <__ssputs_r+0x70>
 80051d2:	6921      	ldr	r1, [r4, #16]
 80051d4:	4650      	mov	r0, sl
 80051d6:	f000 fa9b 	bl	8005710 <_free_r>
 80051da:	e7c8      	b.n	800516e <__ssputs_r+0x46>

080051dc <_svfiprintf_r>:
 80051dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051e0:	461d      	mov	r5, r3
 80051e2:	898b      	ldrh	r3, [r1, #12]
 80051e4:	061f      	lsls	r7, r3, #24
 80051e6:	b09d      	sub	sp, #116	; 0x74
 80051e8:	4680      	mov	r8, r0
 80051ea:	460c      	mov	r4, r1
 80051ec:	4616      	mov	r6, r2
 80051ee:	d50f      	bpl.n	8005210 <_svfiprintf_r+0x34>
 80051f0:	690b      	ldr	r3, [r1, #16]
 80051f2:	b96b      	cbnz	r3, 8005210 <_svfiprintf_r+0x34>
 80051f4:	2140      	movs	r1, #64	; 0x40
 80051f6:	f000 fad9 	bl	80057ac <_malloc_r>
 80051fa:	6020      	str	r0, [r4, #0]
 80051fc:	6120      	str	r0, [r4, #16]
 80051fe:	b928      	cbnz	r0, 800520c <_svfiprintf_r+0x30>
 8005200:	230c      	movs	r3, #12
 8005202:	f8c8 3000 	str.w	r3, [r8]
 8005206:	f04f 30ff 	mov.w	r0, #4294967295
 800520a:	e0c8      	b.n	800539e <_svfiprintf_r+0x1c2>
 800520c:	2340      	movs	r3, #64	; 0x40
 800520e:	6163      	str	r3, [r4, #20]
 8005210:	2300      	movs	r3, #0
 8005212:	9309      	str	r3, [sp, #36]	; 0x24
 8005214:	2320      	movs	r3, #32
 8005216:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800521a:	2330      	movs	r3, #48	; 0x30
 800521c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005220:	9503      	str	r5, [sp, #12]
 8005222:	f04f 0b01 	mov.w	fp, #1
 8005226:	4637      	mov	r7, r6
 8005228:	463d      	mov	r5, r7
 800522a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800522e:	b10b      	cbz	r3, 8005234 <_svfiprintf_r+0x58>
 8005230:	2b25      	cmp	r3, #37	; 0x25
 8005232:	d13e      	bne.n	80052b2 <_svfiprintf_r+0xd6>
 8005234:	ebb7 0a06 	subs.w	sl, r7, r6
 8005238:	d00b      	beq.n	8005252 <_svfiprintf_r+0x76>
 800523a:	4653      	mov	r3, sl
 800523c:	4632      	mov	r2, r6
 800523e:	4621      	mov	r1, r4
 8005240:	4640      	mov	r0, r8
 8005242:	f7ff ff71 	bl	8005128 <__ssputs_r>
 8005246:	3001      	adds	r0, #1
 8005248:	f000 80a4 	beq.w	8005394 <_svfiprintf_r+0x1b8>
 800524c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800524e:	4453      	add	r3, sl
 8005250:	9309      	str	r3, [sp, #36]	; 0x24
 8005252:	783b      	ldrb	r3, [r7, #0]
 8005254:	2b00      	cmp	r3, #0
 8005256:	f000 809d 	beq.w	8005394 <_svfiprintf_r+0x1b8>
 800525a:	2300      	movs	r3, #0
 800525c:	f04f 32ff 	mov.w	r2, #4294967295
 8005260:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005264:	9304      	str	r3, [sp, #16]
 8005266:	9307      	str	r3, [sp, #28]
 8005268:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800526c:	931a      	str	r3, [sp, #104]	; 0x68
 800526e:	462f      	mov	r7, r5
 8005270:	2205      	movs	r2, #5
 8005272:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005276:	4850      	ldr	r0, [pc, #320]	; (80053b8 <_svfiprintf_r+0x1dc>)
 8005278:	f7fa ffba 	bl	80001f0 <memchr>
 800527c:	9b04      	ldr	r3, [sp, #16]
 800527e:	b9d0      	cbnz	r0, 80052b6 <_svfiprintf_r+0xda>
 8005280:	06d9      	lsls	r1, r3, #27
 8005282:	bf44      	itt	mi
 8005284:	2220      	movmi	r2, #32
 8005286:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800528a:	071a      	lsls	r2, r3, #28
 800528c:	bf44      	itt	mi
 800528e:	222b      	movmi	r2, #43	; 0x2b
 8005290:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005294:	782a      	ldrb	r2, [r5, #0]
 8005296:	2a2a      	cmp	r2, #42	; 0x2a
 8005298:	d015      	beq.n	80052c6 <_svfiprintf_r+0xea>
 800529a:	9a07      	ldr	r2, [sp, #28]
 800529c:	462f      	mov	r7, r5
 800529e:	2000      	movs	r0, #0
 80052a0:	250a      	movs	r5, #10
 80052a2:	4639      	mov	r1, r7
 80052a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80052a8:	3b30      	subs	r3, #48	; 0x30
 80052aa:	2b09      	cmp	r3, #9
 80052ac:	d94d      	bls.n	800534a <_svfiprintf_r+0x16e>
 80052ae:	b1b8      	cbz	r0, 80052e0 <_svfiprintf_r+0x104>
 80052b0:	e00f      	b.n	80052d2 <_svfiprintf_r+0xf6>
 80052b2:	462f      	mov	r7, r5
 80052b4:	e7b8      	b.n	8005228 <_svfiprintf_r+0x4c>
 80052b6:	4a40      	ldr	r2, [pc, #256]	; (80053b8 <_svfiprintf_r+0x1dc>)
 80052b8:	1a80      	subs	r0, r0, r2
 80052ba:	fa0b f000 	lsl.w	r0, fp, r0
 80052be:	4318      	orrs	r0, r3
 80052c0:	9004      	str	r0, [sp, #16]
 80052c2:	463d      	mov	r5, r7
 80052c4:	e7d3      	b.n	800526e <_svfiprintf_r+0x92>
 80052c6:	9a03      	ldr	r2, [sp, #12]
 80052c8:	1d11      	adds	r1, r2, #4
 80052ca:	6812      	ldr	r2, [r2, #0]
 80052cc:	9103      	str	r1, [sp, #12]
 80052ce:	2a00      	cmp	r2, #0
 80052d0:	db01      	blt.n	80052d6 <_svfiprintf_r+0xfa>
 80052d2:	9207      	str	r2, [sp, #28]
 80052d4:	e004      	b.n	80052e0 <_svfiprintf_r+0x104>
 80052d6:	4252      	negs	r2, r2
 80052d8:	f043 0302 	orr.w	r3, r3, #2
 80052dc:	9207      	str	r2, [sp, #28]
 80052de:	9304      	str	r3, [sp, #16]
 80052e0:	783b      	ldrb	r3, [r7, #0]
 80052e2:	2b2e      	cmp	r3, #46	; 0x2e
 80052e4:	d10c      	bne.n	8005300 <_svfiprintf_r+0x124>
 80052e6:	787b      	ldrb	r3, [r7, #1]
 80052e8:	2b2a      	cmp	r3, #42	; 0x2a
 80052ea:	d133      	bne.n	8005354 <_svfiprintf_r+0x178>
 80052ec:	9b03      	ldr	r3, [sp, #12]
 80052ee:	1d1a      	adds	r2, r3, #4
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	9203      	str	r2, [sp, #12]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	bfb8      	it	lt
 80052f8:	f04f 33ff 	movlt.w	r3, #4294967295
 80052fc:	3702      	adds	r7, #2
 80052fe:	9305      	str	r3, [sp, #20]
 8005300:	4d2e      	ldr	r5, [pc, #184]	; (80053bc <_svfiprintf_r+0x1e0>)
 8005302:	7839      	ldrb	r1, [r7, #0]
 8005304:	2203      	movs	r2, #3
 8005306:	4628      	mov	r0, r5
 8005308:	f7fa ff72 	bl	80001f0 <memchr>
 800530c:	b138      	cbz	r0, 800531e <_svfiprintf_r+0x142>
 800530e:	2340      	movs	r3, #64	; 0x40
 8005310:	1b40      	subs	r0, r0, r5
 8005312:	fa03 f000 	lsl.w	r0, r3, r0
 8005316:	9b04      	ldr	r3, [sp, #16]
 8005318:	4303      	orrs	r3, r0
 800531a:	3701      	adds	r7, #1
 800531c:	9304      	str	r3, [sp, #16]
 800531e:	7839      	ldrb	r1, [r7, #0]
 8005320:	4827      	ldr	r0, [pc, #156]	; (80053c0 <_svfiprintf_r+0x1e4>)
 8005322:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005326:	2206      	movs	r2, #6
 8005328:	1c7e      	adds	r6, r7, #1
 800532a:	f7fa ff61 	bl	80001f0 <memchr>
 800532e:	2800      	cmp	r0, #0
 8005330:	d038      	beq.n	80053a4 <_svfiprintf_r+0x1c8>
 8005332:	4b24      	ldr	r3, [pc, #144]	; (80053c4 <_svfiprintf_r+0x1e8>)
 8005334:	bb13      	cbnz	r3, 800537c <_svfiprintf_r+0x1a0>
 8005336:	9b03      	ldr	r3, [sp, #12]
 8005338:	3307      	adds	r3, #7
 800533a:	f023 0307 	bic.w	r3, r3, #7
 800533e:	3308      	adds	r3, #8
 8005340:	9303      	str	r3, [sp, #12]
 8005342:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005344:	444b      	add	r3, r9
 8005346:	9309      	str	r3, [sp, #36]	; 0x24
 8005348:	e76d      	b.n	8005226 <_svfiprintf_r+0x4a>
 800534a:	fb05 3202 	mla	r2, r5, r2, r3
 800534e:	2001      	movs	r0, #1
 8005350:	460f      	mov	r7, r1
 8005352:	e7a6      	b.n	80052a2 <_svfiprintf_r+0xc6>
 8005354:	2300      	movs	r3, #0
 8005356:	3701      	adds	r7, #1
 8005358:	9305      	str	r3, [sp, #20]
 800535a:	4619      	mov	r1, r3
 800535c:	250a      	movs	r5, #10
 800535e:	4638      	mov	r0, r7
 8005360:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005364:	3a30      	subs	r2, #48	; 0x30
 8005366:	2a09      	cmp	r2, #9
 8005368:	d903      	bls.n	8005372 <_svfiprintf_r+0x196>
 800536a:	2b00      	cmp	r3, #0
 800536c:	d0c8      	beq.n	8005300 <_svfiprintf_r+0x124>
 800536e:	9105      	str	r1, [sp, #20]
 8005370:	e7c6      	b.n	8005300 <_svfiprintf_r+0x124>
 8005372:	fb05 2101 	mla	r1, r5, r1, r2
 8005376:	2301      	movs	r3, #1
 8005378:	4607      	mov	r7, r0
 800537a:	e7f0      	b.n	800535e <_svfiprintf_r+0x182>
 800537c:	ab03      	add	r3, sp, #12
 800537e:	9300      	str	r3, [sp, #0]
 8005380:	4622      	mov	r2, r4
 8005382:	4b11      	ldr	r3, [pc, #68]	; (80053c8 <_svfiprintf_r+0x1ec>)
 8005384:	a904      	add	r1, sp, #16
 8005386:	4640      	mov	r0, r8
 8005388:	f3af 8000 	nop.w
 800538c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005390:	4681      	mov	r9, r0
 8005392:	d1d6      	bne.n	8005342 <_svfiprintf_r+0x166>
 8005394:	89a3      	ldrh	r3, [r4, #12]
 8005396:	065b      	lsls	r3, r3, #25
 8005398:	f53f af35 	bmi.w	8005206 <_svfiprintf_r+0x2a>
 800539c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800539e:	b01d      	add	sp, #116	; 0x74
 80053a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053a4:	ab03      	add	r3, sp, #12
 80053a6:	9300      	str	r3, [sp, #0]
 80053a8:	4622      	mov	r2, r4
 80053aa:	4b07      	ldr	r3, [pc, #28]	; (80053c8 <_svfiprintf_r+0x1ec>)
 80053ac:	a904      	add	r1, sp, #16
 80053ae:	4640      	mov	r0, r8
 80053b0:	f000 f882 	bl	80054b8 <_printf_i>
 80053b4:	e7ea      	b.n	800538c <_svfiprintf_r+0x1b0>
 80053b6:	bf00      	nop
 80053b8:	08005a10 	.word	0x08005a10
 80053bc:	08005a16 	.word	0x08005a16
 80053c0:	08005a1a 	.word	0x08005a1a
 80053c4:	00000000 	.word	0x00000000
 80053c8:	08005129 	.word	0x08005129

080053cc <_printf_common>:
 80053cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053d0:	4691      	mov	r9, r2
 80053d2:	461f      	mov	r7, r3
 80053d4:	688a      	ldr	r2, [r1, #8]
 80053d6:	690b      	ldr	r3, [r1, #16]
 80053d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80053dc:	4293      	cmp	r3, r2
 80053de:	bfb8      	it	lt
 80053e0:	4613      	movlt	r3, r2
 80053e2:	f8c9 3000 	str.w	r3, [r9]
 80053e6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80053ea:	4606      	mov	r6, r0
 80053ec:	460c      	mov	r4, r1
 80053ee:	b112      	cbz	r2, 80053f6 <_printf_common+0x2a>
 80053f0:	3301      	adds	r3, #1
 80053f2:	f8c9 3000 	str.w	r3, [r9]
 80053f6:	6823      	ldr	r3, [r4, #0]
 80053f8:	0699      	lsls	r1, r3, #26
 80053fa:	bf42      	ittt	mi
 80053fc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005400:	3302      	addmi	r3, #2
 8005402:	f8c9 3000 	strmi.w	r3, [r9]
 8005406:	6825      	ldr	r5, [r4, #0]
 8005408:	f015 0506 	ands.w	r5, r5, #6
 800540c:	d107      	bne.n	800541e <_printf_common+0x52>
 800540e:	f104 0a19 	add.w	sl, r4, #25
 8005412:	68e3      	ldr	r3, [r4, #12]
 8005414:	f8d9 2000 	ldr.w	r2, [r9]
 8005418:	1a9b      	subs	r3, r3, r2
 800541a:	42ab      	cmp	r3, r5
 800541c:	dc28      	bgt.n	8005470 <_printf_common+0xa4>
 800541e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005422:	6822      	ldr	r2, [r4, #0]
 8005424:	3300      	adds	r3, #0
 8005426:	bf18      	it	ne
 8005428:	2301      	movne	r3, #1
 800542a:	0692      	lsls	r2, r2, #26
 800542c:	d42d      	bmi.n	800548a <_printf_common+0xbe>
 800542e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005432:	4639      	mov	r1, r7
 8005434:	4630      	mov	r0, r6
 8005436:	47c0      	blx	r8
 8005438:	3001      	adds	r0, #1
 800543a:	d020      	beq.n	800547e <_printf_common+0xb2>
 800543c:	6823      	ldr	r3, [r4, #0]
 800543e:	68e5      	ldr	r5, [r4, #12]
 8005440:	f8d9 2000 	ldr.w	r2, [r9]
 8005444:	f003 0306 	and.w	r3, r3, #6
 8005448:	2b04      	cmp	r3, #4
 800544a:	bf08      	it	eq
 800544c:	1aad      	subeq	r5, r5, r2
 800544e:	68a3      	ldr	r3, [r4, #8]
 8005450:	6922      	ldr	r2, [r4, #16]
 8005452:	bf0c      	ite	eq
 8005454:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005458:	2500      	movne	r5, #0
 800545a:	4293      	cmp	r3, r2
 800545c:	bfc4      	itt	gt
 800545e:	1a9b      	subgt	r3, r3, r2
 8005460:	18ed      	addgt	r5, r5, r3
 8005462:	f04f 0900 	mov.w	r9, #0
 8005466:	341a      	adds	r4, #26
 8005468:	454d      	cmp	r5, r9
 800546a:	d11a      	bne.n	80054a2 <_printf_common+0xd6>
 800546c:	2000      	movs	r0, #0
 800546e:	e008      	b.n	8005482 <_printf_common+0xb6>
 8005470:	2301      	movs	r3, #1
 8005472:	4652      	mov	r2, sl
 8005474:	4639      	mov	r1, r7
 8005476:	4630      	mov	r0, r6
 8005478:	47c0      	blx	r8
 800547a:	3001      	adds	r0, #1
 800547c:	d103      	bne.n	8005486 <_printf_common+0xba>
 800547e:	f04f 30ff 	mov.w	r0, #4294967295
 8005482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005486:	3501      	adds	r5, #1
 8005488:	e7c3      	b.n	8005412 <_printf_common+0x46>
 800548a:	18e1      	adds	r1, r4, r3
 800548c:	1c5a      	adds	r2, r3, #1
 800548e:	2030      	movs	r0, #48	; 0x30
 8005490:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005494:	4422      	add	r2, r4
 8005496:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800549a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800549e:	3302      	adds	r3, #2
 80054a0:	e7c5      	b.n	800542e <_printf_common+0x62>
 80054a2:	2301      	movs	r3, #1
 80054a4:	4622      	mov	r2, r4
 80054a6:	4639      	mov	r1, r7
 80054a8:	4630      	mov	r0, r6
 80054aa:	47c0      	blx	r8
 80054ac:	3001      	adds	r0, #1
 80054ae:	d0e6      	beq.n	800547e <_printf_common+0xb2>
 80054b0:	f109 0901 	add.w	r9, r9, #1
 80054b4:	e7d8      	b.n	8005468 <_printf_common+0x9c>
	...

080054b8 <_printf_i>:
 80054b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80054bc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80054c0:	460c      	mov	r4, r1
 80054c2:	7e09      	ldrb	r1, [r1, #24]
 80054c4:	b085      	sub	sp, #20
 80054c6:	296e      	cmp	r1, #110	; 0x6e
 80054c8:	4617      	mov	r7, r2
 80054ca:	4606      	mov	r6, r0
 80054cc:	4698      	mov	r8, r3
 80054ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80054d0:	f000 80b3 	beq.w	800563a <_printf_i+0x182>
 80054d4:	d822      	bhi.n	800551c <_printf_i+0x64>
 80054d6:	2963      	cmp	r1, #99	; 0x63
 80054d8:	d036      	beq.n	8005548 <_printf_i+0x90>
 80054da:	d80a      	bhi.n	80054f2 <_printf_i+0x3a>
 80054dc:	2900      	cmp	r1, #0
 80054de:	f000 80b9 	beq.w	8005654 <_printf_i+0x19c>
 80054e2:	2958      	cmp	r1, #88	; 0x58
 80054e4:	f000 8083 	beq.w	80055ee <_printf_i+0x136>
 80054e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054ec:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80054f0:	e032      	b.n	8005558 <_printf_i+0xa0>
 80054f2:	2964      	cmp	r1, #100	; 0x64
 80054f4:	d001      	beq.n	80054fa <_printf_i+0x42>
 80054f6:	2969      	cmp	r1, #105	; 0x69
 80054f8:	d1f6      	bne.n	80054e8 <_printf_i+0x30>
 80054fa:	6820      	ldr	r0, [r4, #0]
 80054fc:	6813      	ldr	r3, [r2, #0]
 80054fe:	0605      	lsls	r5, r0, #24
 8005500:	f103 0104 	add.w	r1, r3, #4
 8005504:	d52a      	bpl.n	800555c <_printf_i+0xa4>
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	6011      	str	r1, [r2, #0]
 800550a:	2b00      	cmp	r3, #0
 800550c:	da03      	bge.n	8005516 <_printf_i+0x5e>
 800550e:	222d      	movs	r2, #45	; 0x2d
 8005510:	425b      	negs	r3, r3
 8005512:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005516:	486f      	ldr	r0, [pc, #444]	; (80056d4 <_printf_i+0x21c>)
 8005518:	220a      	movs	r2, #10
 800551a:	e039      	b.n	8005590 <_printf_i+0xd8>
 800551c:	2973      	cmp	r1, #115	; 0x73
 800551e:	f000 809d 	beq.w	800565c <_printf_i+0x1a4>
 8005522:	d808      	bhi.n	8005536 <_printf_i+0x7e>
 8005524:	296f      	cmp	r1, #111	; 0x6f
 8005526:	d020      	beq.n	800556a <_printf_i+0xb2>
 8005528:	2970      	cmp	r1, #112	; 0x70
 800552a:	d1dd      	bne.n	80054e8 <_printf_i+0x30>
 800552c:	6823      	ldr	r3, [r4, #0]
 800552e:	f043 0320 	orr.w	r3, r3, #32
 8005532:	6023      	str	r3, [r4, #0]
 8005534:	e003      	b.n	800553e <_printf_i+0x86>
 8005536:	2975      	cmp	r1, #117	; 0x75
 8005538:	d017      	beq.n	800556a <_printf_i+0xb2>
 800553a:	2978      	cmp	r1, #120	; 0x78
 800553c:	d1d4      	bne.n	80054e8 <_printf_i+0x30>
 800553e:	2378      	movs	r3, #120	; 0x78
 8005540:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005544:	4864      	ldr	r0, [pc, #400]	; (80056d8 <_printf_i+0x220>)
 8005546:	e055      	b.n	80055f4 <_printf_i+0x13c>
 8005548:	6813      	ldr	r3, [r2, #0]
 800554a:	1d19      	adds	r1, r3, #4
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	6011      	str	r1, [r2, #0]
 8005550:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005554:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005558:	2301      	movs	r3, #1
 800555a:	e08c      	b.n	8005676 <_printf_i+0x1be>
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	6011      	str	r1, [r2, #0]
 8005560:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005564:	bf18      	it	ne
 8005566:	b21b      	sxthne	r3, r3
 8005568:	e7cf      	b.n	800550a <_printf_i+0x52>
 800556a:	6813      	ldr	r3, [r2, #0]
 800556c:	6825      	ldr	r5, [r4, #0]
 800556e:	1d18      	adds	r0, r3, #4
 8005570:	6010      	str	r0, [r2, #0]
 8005572:	0628      	lsls	r0, r5, #24
 8005574:	d501      	bpl.n	800557a <_printf_i+0xc2>
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	e002      	b.n	8005580 <_printf_i+0xc8>
 800557a:	0668      	lsls	r0, r5, #25
 800557c:	d5fb      	bpl.n	8005576 <_printf_i+0xbe>
 800557e:	881b      	ldrh	r3, [r3, #0]
 8005580:	4854      	ldr	r0, [pc, #336]	; (80056d4 <_printf_i+0x21c>)
 8005582:	296f      	cmp	r1, #111	; 0x6f
 8005584:	bf14      	ite	ne
 8005586:	220a      	movne	r2, #10
 8005588:	2208      	moveq	r2, #8
 800558a:	2100      	movs	r1, #0
 800558c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005590:	6865      	ldr	r5, [r4, #4]
 8005592:	60a5      	str	r5, [r4, #8]
 8005594:	2d00      	cmp	r5, #0
 8005596:	f2c0 8095 	blt.w	80056c4 <_printf_i+0x20c>
 800559a:	6821      	ldr	r1, [r4, #0]
 800559c:	f021 0104 	bic.w	r1, r1, #4
 80055a0:	6021      	str	r1, [r4, #0]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d13d      	bne.n	8005622 <_printf_i+0x16a>
 80055a6:	2d00      	cmp	r5, #0
 80055a8:	f040 808e 	bne.w	80056c8 <_printf_i+0x210>
 80055ac:	4665      	mov	r5, ip
 80055ae:	2a08      	cmp	r2, #8
 80055b0:	d10b      	bne.n	80055ca <_printf_i+0x112>
 80055b2:	6823      	ldr	r3, [r4, #0]
 80055b4:	07db      	lsls	r3, r3, #31
 80055b6:	d508      	bpl.n	80055ca <_printf_i+0x112>
 80055b8:	6923      	ldr	r3, [r4, #16]
 80055ba:	6862      	ldr	r2, [r4, #4]
 80055bc:	429a      	cmp	r2, r3
 80055be:	bfde      	ittt	le
 80055c0:	2330      	movle	r3, #48	; 0x30
 80055c2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80055c6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80055ca:	ebac 0305 	sub.w	r3, ip, r5
 80055ce:	6123      	str	r3, [r4, #16]
 80055d0:	f8cd 8000 	str.w	r8, [sp]
 80055d4:	463b      	mov	r3, r7
 80055d6:	aa03      	add	r2, sp, #12
 80055d8:	4621      	mov	r1, r4
 80055da:	4630      	mov	r0, r6
 80055dc:	f7ff fef6 	bl	80053cc <_printf_common>
 80055e0:	3001      	adds	r0, #1
 80055e2:	d14d      	bne.n	8005680 <_printf_i+0x1c8>
 80055e4:	f04f 30ff 	mov.w	r0, #4294967295
 80055e8:	b005      	add	sp, #20
 80055ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80055ee:	4839      	ldr	r0, [pc, #228]	; (80056d4 <_printf_i+0x21c>)
 80055f0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80055f4:	6813      	ldr	r3, [r2, #0]
 80055f6:	6821      	ldr	r1, [r4, #0]
 80055f8:	1d1d      	adds	r5, r3, #4
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	6015      	str	r5, [r2, #0]
 80055fe:	060a      	lsls	r2, r1, #24
 8005600:	d50b      	bpl.n	800561a <_printf_i+0x162>
 8005602:	07ca      	lsls	r2, r1, #31
 8005604:	bf44      	itt	mi
 8005606:	f041 0120 	orrmi.w	r1, r1, #32
 800560a:	6021      	strmi	r1, [r4, #0]
 800560c:	b91b      	cbnz	r3, 8005616 <_printf_i+0x15e>
 800560e:	6822      	ldr	r2, [r4, #0]
 8005610:	f022 0220 	bic.w	r2, r2, #32
 8005614:	6022      	str	r2, [r4, #0]
 8005616:	2210      	movs	r2, #16
 8005618:	e7b7      	b.n	800558a <_printf_i+0xd2>
 800561a:	064d      	lsls	r5, r1, #25
 800561c:	bf48      	it	mi
 800561e:	b29b      	uxthmi	r3, r3
 8005620:	e7ef      	b.n	8005602 <_printf_i+0x14a>
 8005622:	4665      	mov	r5, ip
 8005624:	fbb3 f1f2 	udiv	r1, r3, r2
 8005628:	fb02 3311 	mls	r3, r2, r1, r3
 800562c:	5cc3      	ldrb	r3, [r0, r3]
 800562e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005632:	460b      	mov	r3, r1
 8005634:	2900      	cmp	r1, #0
 8005636:	d1f5      	bne.n	8005624 <_printf_i+0x16c>
 8005638:	e7b9      	b.n	80055ae <_printf_i+0xf6>
 800563a:	6813      	ldr	r3, [r2, #0]
 800563c:	6825      	ldr	r5, [r4, #0]
 800563e:	6961      	ldr	r1, [r4, #20]
 8005640:	1d18      	adds	r0, r3, #4
 8005642:	6010      	str	r0, [r2, #0]
 8005644:	0628      	lsls	r0, r5, #24
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	d501      	bpl.n	800564e <_printf_i+0x196>
 800564a:	6019      	str	r1, [r3, #0]
 800564c:	e002      	b.n	8005654 <_printf_i+0x19c>
 800564e:	066a      	lsls	r2, r5, #25
 8005650:	d5fb      	bpl.n	800564a <_printf_i+0x192>
 8005652:	8019      	strh	r1, [r3, #0]
 8005654:	2300      	movs	r3, #0
 8005656:	6123      	str	r3, [r4, #16]
 8005658:	4665      	mov	r5, ip
 800565a:	e7b9      	b.n	80055d0 <_printf_i+0x118>
 800565c:	6813      	ldr	r3, [r2, #0]
 800565e:	1d19      	adds	r1, r3, #4
 8005660:	6011      	str	r1, [r2, #0]
 8005662:	681d      	ldr	r5, [r3, #0]
 8005664:	6862      	ldr	r2, [r4, #4]
 8005666:	2100      	movs	r1, #0
 8005668:	4628      	mov	r0, r5
 800566a:	f7fa fdc1 	bl	80001f0 <memchr>
 800566e:	b108      	cbz	r0, 8005674 <_printf_i+0x1bc>
 8005670:	1b40      	subs	r0, r0, r5
 8005672:	6060      	str	r0, [r4, #4]
 8005674:	6863      	ldr	r3, [r4, #4]
 8005676:	6123      	str	r3, [r4, #16]
 8005678:	2300      	movs	r3, #0
 800567a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800567e:	e7a7      	b.n	80055d0 <_printf_i+0x118>
 8005680:	6923      	ldr	r3, [r4, #16]
 8005682:	462a      	mov	r2, r5
 8005684:	4639      	mov	r1, r7
 8005686:	4630      	mov	r0, r6
 8005688:	47c0      	blx	r8
 800568a:	3001      	adds	r0, #1
 800568c:	d0aa      	beq.n	80055e4 <_printf_i+0x12c>
 800568e:	6823      	ldr	r3, [r4, #0]
 8005690:	079b      	lsls	r3, r3, #30
 8005692:	d413      	bmi.n	80056bc <_printf_i+0x204>
 8005694:	68e0      	ldr	r0, [r4, #12]
 8005696:	9b03      	ldr	r3, [sp, #12]
 8005698:	4298      	cmp	r0, r3
 800569a:	bfb8      	it	lt
 800569c:	4618      	movlt	r0, r3
 800569e:	e7a3      	b.n	80055e8 <_printf_i+0x130>
 80056a0:	2301      	movs	r3, #1
 80056a2:	464a      	mov	r2, r9
 80056a4:	4639      	mov	r1, r7
 80056a6:	4630      	mov	r0, r6
 80056a8:	47c0      	blx	r8
 80056aa:	3001      	adds	r0, #1
 80056ac:	d09a      	beq.n	80055e4 <_printf_i+0x12c>
 80056ae:	3501      	adds	r5, #1
 80056b0:	68e3      	ldr	r3, [r4, #12]
 80056b2:	9a03      	ldr	r2, [sp, #12]
 80056b4:	1a9b      	subs	r3, r3, r2
 80056b6:	42ab      	cmp	r3, r5
 80056b8:	dcf2      	bgt.n	80056a0 <_printf_i+0x1e8>
 80056ba:	e7eb      	b.n	8005694 <_printf_i+0x1dc>
 80056bc:	2500      	movs	r5, #0
 80056be:	f104 0919 	add.w	r9, r4, #25
 80056c2:	e7f5      	b.n	80056b0 <_printf_i+0x1f8>
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d1ac      	bne.n	8005622 <_printf_i+0x16a>
 80056c8:	7803      	ldrb	r3, [r0, #0]
 80056ca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80056ce:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056d2:	e76c      	b.n	80055ae <_printf_i+0xf6>
 80056d4:	08005a21 	.word	0x08005a21
 80056d8:	08005a32 	.word	0x08005a32

080056dc <memmove>:
 80056dc:	4288      	cmp	r0, r1
 80056de:	b510      	push	{r4, lr}
 80056e0:	eb01 0302 	add.w	r3, r1, r2
 80056e4:	d807      	bhi.n	80056f6 <memmove+0x1a>
 80056e6:	1e42      	subs	r2, r0, #1
 80056e8:	4299      	cmp	r1, r3
 80056ea:	d00a      	beq.n	8005702 <memmove+0x26>
 80056ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056f0:	f802 4f01 	strb.w	r4, [r2, #1]!
 80056f4:	e7f8      	b.n	80056e8 <memmove+0xc>
 80056f6:	4283      	cmp	r3, r0
 80056f8:	d9f5      	bls.n	80056e6 <memmove+0xa>
 80056fa:	1881      	adds	r1, r0, r2
 80056fc:	1ad2      	subs	r2, r2, r3
 80056fe:	42d3      	cmn	r3, r2
 8005700:	d100      	bne.n	8005704 <memmove+0x28>
 8005702:	bd10      	pop	{r4, pc}
 8005704:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005708:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800570c:	e7f7      	b.n	80056fe <memmove+0x22>
	...

08005710 <_free_r>:
 8005710:	b538      	push	{r3, r4, r5, lr}
 8005712:	4605      	mov	r5, r0
 8005714:	2900      	cmp	r1, #0
 8005716:	d045      	beq.n	80057a4 <_free_r+0x94>
 8005718:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800571c:	1f0c      	subs	r4, r1, #4
 800571e:	2b00      	cmp	r3, #0
 8005720:	bfb8      	it	lt
 8005722:	18e4      	addlt	r4, r4, r3
 8005724:	f000 f8d2 	bl	80058cc <__malloc_lock>
 8005728:	4a1f      	ldr	r2, [pc, #124]	; (80057a8 <_free_r+0x98>)
 800572a:	6813      	ldr	r3, [r2, #0]
 800572c:	4610      	mov	r0, r2
 800572e:	b933      	cbnz	r3, 800573e <_free_r+0x2e>
 8005730:	6063      	str	r3, [r4, #4]
 8005732:	6014      	str	r4, [r2, #0]
 8005734:	4628      	mov	r0, r5
 8005736:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800573a:	f000 b8c8 	b.w	80058ce <__malloc_unlock>
 800573e:	42a3      	cmp	r3, r4
 8005740:	d90c      	bls.n	800575c <_free_r+0x4c>
 8005742:	6821      	ldr	r1, [r4, #0]
 8005744:	1862      	adds	r2, r4, r1
 8005746:	4293      	cmp	r3, r2
 8005748:	bf04      	itt	eq
 800574a:	681a      	ldreq	r2, [r3, #0]
 800574c:	685b      	ldreq	r3, [r3, #4]
 800574e:	6063      	str	r3, [r4, #4]
 8005750:	bf04      	itt	eq
 8005752:	1852      	addeq	r2, r2, r1
 8005754:	6022      	streq	r2, [r4, #0]
 8005756:	6004      	str	r4, [r0, #0]
 8005758:	e7ec      	b.n	8005734 <_free_r+0x24>
 800575a:	4613      	mov	r3, r2
 800575c:	685a      	ldr	r2, [r3, #4]
 800575e:	b10a      	cbz	r2, 8005764 <_free_r+0x54>
 8005760:	42a2      	cmp	r2, r4
 8005762:	d9fa      	bls.n	800575a <_free_r+0x4a>
 8005764:	6819      	ldr	r1, [r3, #0]
 8005766:	1858      	adds	r0, r3, r1
 8005768:	42a0      	cmp	r0, r4
 800576a:	d10b      	bne.n	8005784 <_free_r+0x74>
 800576c:	6820      	ldr	r0, [r4, #0]
 800576e:	4401      	add	r1, r0
 8005770:	1858      	adds	r0, r3, r1
 8005772:	4282      	cmp	r2, r0
 8005774:	6019      	str	r1, [r3, #0]
 8005776:	d1dd      	bne.n	8005734 <_free_r+0x24>
 8005778:	6810      	ldr	r0, [r2, #0]
 800577a:	6852      	ldr	r2, [r2, #4]
 800577c:	605a      	str	r2, [r3, #4]
 800577e:	4401      	add	r1, r0
 8005780:	6019      	str	r1, [r3, #0]
 8005782:	e7d7      	b.n	8005734 <_free_r+0x24>
 8005784:	d902      	bls.n	800578c <_free_r+0x7c>
 8005786:	230c      	movs	r3, #12
 8005788:	602b      	str	r3, [r5, #0]
 800578a:	e7d3      	b.n	8005734 <_free_r+0x24>
 800578c:	6820      	ldr	r0, [r4, #0]
 800578e:	1821      	adds	r1, r4, r0
 8005790:	428a      	cmp	r2, r1
 8005792:	bf04      	itt	eq
 8005794:	6811      	ldreq	r1, [r2, #0]
 8005796:	6852      	ldreq	r2, [r2, #4]
 8005798:	6062      	str	r2, [r4, #4]
 800579a:	bf04      	itt	eq
 800579c:	1809      	addeq	r1, r1, r0
 800579e:	6021      	streq	r1, [r4, #0]
 80057a0:	605c      	str	r4, [r3, #4]
 80057a2:	e7c7      	b.n	8005734 <_free_r+0x24>
 80057a4:	bd38      	pop	{r3, r4, r5, pc}
 80057a6:	bf00      	nop
 80057a8:	20004034 	.word	0x20004034

080057ac <_malloc_r>:
 80057ac:	b570      	push	{r4, r5, r6, lr}
 80057ae:	1ccd      	adds	r5, r1, #3
 80057b0:	f025 0503 	bic.w	r5, r5, #3
 80057b4:	3508      	adds	r5, #8
 80057b6:	2d0c      	cmp	r5, #12
 80057b8:	bf38      	it	cc
 80057ba:	250c      	movcc	r5, #12
 80057bc:	2d00      	cmp	r5, #0
 80057be:	4606      	mov	r6, r0
 80057c0:	db01      	blt.n	80057c6 <_malloc_r+0x1a>
 80057c2:	42a9      	cmp	r1, r5
 80057c4:	d903      	bls.n	80057ce <_malloc_r+0x22>
 80057c6:	230c      	movs	r3, #12
 80057c8:	6033      	str	r3, [r6, #0]
 80057ca:	2000      	movs	r0, #0
 80057cc:	bd70      	pop	{r4, r5, r6, pc}
 80057ce:	f000 f87d 	bl	80058cc <__malloc_lock>
 80057d2:	4a21      	ldr	r2, [pc, #132]	; (8005858 <_malloc_r+0xac>)
 80057d4:	6814      	ldr	r4, [r2, #0]
 80057d6:	4621      	mov	r1, r4
 80057d8:	b991      	cbnz	r1, 8005800 <_malloc_r+0x54>
 80057da:	4c20      	ldr	r4, [pc, #128]	; (800585c <_malloc_r+0xb0>)
 80057dc:	6823      	ldr	r3, [r4, #0]
 80057de:	b91b      	cbnz	r3, 80057e8 <_malloc_r+0x3c>
 80057e0:	4630      	mov	r0, r6
 80057e2:	f000 f863 	bl	80058ac <_sbrk_r>
 80057e6:	6020      	str	r0, [r4, #0]
 80057e8:	4629      	mov	r1, r5
 80057ea:	4630      	mov	r0, r6
 80057ec:	f000 f85e 	bl	80058ac <_sbrk_r>
 80057f0:	1c43      	adds	r3, r0, #1
 80057f2:	d124      	bne.n	800583e <_malloc_r+0x92>
 80057f4:	230c      	movs	r3, #12
 80057f6:	6033      	str	r3, [r6, #0]
 80057f8:	4630      	mov	r0, r6
 80057fa:	f000 f868 	bl	80058ce <__malloc_unlock>
 80057fe:	e7e4      	b.n	80057ca <_malloc_r+0x1e>
 8005800:	680b      	ldr	r3, [r1, #0]
 8005802:	1b5b      	subs	r3, r3, r5
 8005804:	d418      	bmi.n	8005838 <_malloc_r+0x8c>
 8005806:	2b0b      	cmp	r3, #11
 8005808:	d90f      	bls.n	800582a <_malloc_r+0x7e>
 800580a:	600b      	str	r3, [r1, #0]
 800580c:	50cd      	str	r5, [r1, r3]
 800580e:	18cc      	adds	r4, r1, r3
 8005810:	4630      	mov	r0, r6
 8005812:	f000 f85c 	bl	80058ce <__malloc_unlock>
 8005816:	f104 000b 	add.w	r0, r4, #11
 800581a:	1d23      	adds	r3, r4, #4
 800581c:	f020 0007 	bic.w	r0, r0, #7
 8005820:	1ac3      	subs	r3, r0, r3
 8005822:	d0d3      	beq.n	80057cc <_malloc_r+0x20>
 8005824:	425a      	negs	r2, r3
 8005826:	50e2      	str	r2, [r4, r3]
 8005828:	e7d0      	b.n	80057cc <_malloc_r+0x20>
 800582a:	428c      	cmp	r4, r1
 800582c:	684b      	ldr	r3, [r1, #4]
 800582e:	bf16      	itet	ne
 8005830:	6063      	strne	r3, [r4, #4]
 8005832:	6013      	streq	r3, [r2, #0]
 8005834:	460c      	movne	r4, r1
 8005836:	e7eb      	b.n	8005810 <_malloc_r+0x64>
 8005838:	460c      	mov	r4, r1
 800583a:	6849      	ldr	r1, [r1, #4]
 800583c:	e7cc      	b.n	80057d8 <_malloc_r+0x2c>
 800583e:	1cc4      	adds	r4, r0, #3
 8005840:	f024 0403 	bic.w	r4, r4, #3
 8005844:	42a0      	cmp	r0, r4
 8005846:	d005      	beq.n	8005854 <_malloc_r+0xa8>
 8005848:	1a21      	subs	r1, r4, r0
 800584a:	4630      	mov	r0, r6
 800584c:	f000 f82e 	bl	80058ac <_sbrk_r>
 8005850:	3001      	adds	r0, #1
 8005852:	d0cf      	beq.n	80057f4 <_malloc_r+0x48>
 8005854:	6025      	str	r5, [r4, #0]
 8005856:	e7db      	b.n	8005810 <_malloc_r+0x64>
 8005858:	20004034 	.word	0x20004034
 800585c:	20004038 	.word	0x20004038

08005860 <_realloc_r>:
 8005860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005862:	4607      	mov	r7, r0
 8005864:	4614      	mov	r4, r2
 8005866:	460e      	mov	r6, r1
 8005868:	b921      	cbnz	r1, 8005874 <_realloc_r+0x14>
 800586a:	4611      	mov	r1, r2
 800586c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005870:	f7ff bf9c 	b.w	80057ac <_malloc_r>
 8005874:	b922      	cbnz	r2, 8005880 <_realloc_r+0x20>
 8005876:	f7ff ff4b 	bl	8005710 <_free_r>
 800587a:	4625      	mov	r5, r4
 800587c:	4628      	mov	r0, r5
 800587e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005880:	f000 f826 	bl	80058d0 <_malloc_usable_size_r>
 8005884:	42a0      	cmp	r0, r4
 8005886:	d20f      	bcs.n	80058a8 <_realloc_r+0x48>
 8005888:	4621      	mov	r1, r4
 800588a:	4638      	mov	r0, r7
 800588c:	f7ff ff8e 	bl	80057ac <_malloc_r>
 8005890:	4605      	mov	r5, r0
 8005892:	2800      	cmp	r0, #0
 8005894:	d0f2      	beq.n	800587c <_realloc_r+0x1c>
 8005896:	4631      	mov	r1, r6
 8005898:	4622      	mov	r2, r4
 800589a:	f7ff fc11 	bl	80050c0 <memcpy>
 800589e:	4631      	mov	r1, r6
 80058a0:	4638      	mov	r0, r7
 80058a2:	f7ff ff35 	bl	8005710 <_free_r>
 80058a6:	e7e9      	b.n	800587c <_realloc_r+0x1c>
 80058a8:	4635      	mov	r5, r6
 80058aa:	e7e7      	b.n	800587c <_realloc_r+0x1c>

080058ac <_sbrk_r>:
 80058ac:	b538      	push	{r3, r4, r5, lr}
 80058ae:	4c06      	ldr	r4, [pc, #24]	; (80058c8 <_sbrk_r+0x1c>)
 80058b0:	2300      	movs	r3, #0
 80058b2:	4605      	mov	r5, r0
 80058b4:	4608      	mov	r0, r1
 80058b6:	6023      	str	r3, [r4, #0]
 80058b8:	f7fb f9c0 	bl	8000c3c <_sbrk>
 80058bc:	1c43      	adds	r3, r0, #1
 80058be:	d102      	bne.n	80058c6 <_sbrk_r+0x1a>
 80058c0:	6823      	ldr	r3, [r4, #0]
 80058c2:	b103      	cbz	r3, 80058c6 <_sbrk_r+0x1a>
 80058c4:	602b      	str	r3, [r5, #0]
 80058c6:	bd38      	pop	{r3, r4, r5, pc}
 80058c8:	200040c8 	.word	0x200040c8

080058cc <__malloc_lock>:
 80058cc:	4770      	bx	lr

080058ce <__malloc_unlock>:
 80058ce:	4770      	bx	lr

080058d0 <_malloc_usable_size_r>:
 80058d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058d4:	1f18      	subs	r0, r3, #4
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	bfbc      	itt	lt
 80058da:	580b      	ldrlt	r3, [r1, r0]
 80058dc:	18c0      	addlt	r0, r0, r3
 80058de:	4770      	bx	lr

080058e0 <_init>:
 80058e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058e2:	bf00      	nop
 80058e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058e6:	bc08      	pop	{r3}
 80058e8:	469e      	mov	lr, r3
 80058ea:	4770      	bx	lr

080058ec <_fini>:
 80058ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ee:	bf00      	nop
 80058f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058f2:	bc08      	pop	{r3}
 80058f4:	469e      	mov	lr, r3
 80058f6:	4770      	bx	lr
