
lab3_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005588  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  08005728  08005728  00015728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058ac  080058ac  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080058ac  080058ac  000158ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080058b4  080058b4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058b4  080058b4  000158b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080058b8  080058b8  000158b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080058bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000405c  20000074  08005930  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200040d0  08005930  000240d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000133db  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002b79  00000000  00000000  0003347f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001108  00000000  00000000  00035ff8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fc0  00000000  00000000  00037100  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017631  00000000  00000000  000380c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cd09  00000000  00000000  0004f6f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00094b3a  00000000  00000000  0005c3fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f0f34  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004988  00000000  00000000  000f0fb0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005710 	.word	0x08005710

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08005710 	.word	0x08005710

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
 8000596:	60f8      	str	r0, [r7, #12]
 8000598:	60b9      	str	r1, [r7, #8]
 800059a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	4a07      	ldr	r2, [pc, #28]	; (80005bc <vApplicationGetIdleTaskMemory+0x2c>)
 80005a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005a2:	68bb      	ldr	r3, [r7, #8]
 80005a4:	4a06      	ldr	r2, [pc, #24]	; (80005c0 <vApplicationGetIdleTaskMemory+0x30>)
 80005a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	2280      	movs	r2, #128	; 0x80
 80005ac:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005ae:	bf00      	nop
 80005b0:	3714      	adds	r7, #20
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	20000090 	.word	0x20000090
 80005c0:	200000e4 	.word	0x200000e4

080005c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c4:	b5b0      	push	{r4, r5, r7, lr}
 80005c6:	b08e      	sub	sp, #56	; 0x38
 80005c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ca:	f000 fbd3 	bl	8000d74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ce:	f000 f83f 	bl	8000650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d2:	f000 f8d1 	bl	8000778 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005d6:	f000 f8a5 	bl	8000724 <MX_USART2_UART_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of Sem */
  osSemaphoreDef(Sem);
 80005da:	2300      	movs	r3, #0
 80005dc:	633b      	str	r3, [r7, #48]	; 0x30
 80005de:	2300      	movs	r3, #0
 80005e0:	637b      	str	r3, [r7, #52]	; 0x34
  SemHandle = osSemaphoreCreate(osSemaphore(Sem), 1);
 80005e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005e6:	2101      	movs	r1, #1
 80005e8:	4618      	mov	r0, r3
 80005ea:	f002 fa8c 	bl	8002b06 <osSemaphoreCreate>
 80005ee:	4602      	mov	r2, r0
 80005f0:	4b12      	ldr	r3, [pc, #72]	; (800063c <main+0x78>)
 80005f2:	601a      	str	r2, [r3, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of myQueue01 */
  osMessageQDef(myQueue01, 64, message_t);
 80005f4:	4b12      	ldr	r3, [pc, #72]	; (8000640 <main+0x7c>)
 80005f6:	f107 0420 	add.w	r4, r7, #32
 80005fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 8000600:	f107 0320 	add.w	r3, r7, #32
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f002 fab0 	bl	8002b6c <osMessageCreate>
 800060c:	4602      	mov	r2, r0
 800060e:	4b0d      	ldr	r3, [pc, #52]	; (8000644 <main+0x80>)
 8000610:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000612:	4b0d      	ldr	r3, [pc, #52]	; (8000648 <main+0x84>)
 8000614:	1d3c      	adds	r4, r7, #4
 8000616:	461d      	mov	r5, r3
 8000618:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800061a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800061c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000620:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000624:	1d3b      	adds	r3, r7, #4
 8000626:	2100      	movs	r1, #0
 8000628:	4618      	mov	r0, r3
 800062a:	f002 fa0c 	bl	8002a46 <osThreadCreate>
 800062e:	4602      	mov	r2, r0
 8000630:	4b06      	ldr	r3, [pc, #24]	; (800064c <main+0x88>)
 8000632:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000634:	f002 fa00 	bl	8002a38 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000638:	e7fe      	b.n	8000638 <main+0x74>
 800063a:	bf00      	nop
 800063c:	20004040 	.word	0x20004040
 8000640:	08005728 	.word	0x08005728
 8000644:	20004044 	.word	0x20004044
 8000648:	08005744 	.word	0x08005744
 800064c:	2000403c 	.word	0x2000403c

08000650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b094      	sub	sp, #80	; 0x50
 8000654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000656:	f107 0320 	add.w	r3, r7, #32
 800065a:	2230      	movs	r2, #48	; 0x30
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f004 fc51 	bl	8004f06 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000664:	f107 030c 	add.w	r3, r7, #12
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000674:	2300      	movs	r3, #0
 8000676:	60bb      	str	r3, [r7, #8]
 8000678:	4b28      	ldr	r3, [pc, #160]	; (800071c <SystemClock_Config+0xcc>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067c:	4a27      	ldr	r2, [pc, #156]	; (800071c <SystemClock_Config+0xcc>)
 800067e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000682:	6413      	str	r3, [r2, #64]	; 0x40
 8000684:	4b25      	ldr	r3, [pc, #148]	; (800071c <SystemClock_Config+0xcc>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800068c:	60bb      	str	r3, [r7, #8]
 800068e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000690:	2300      	movs	r3, #0
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	4b22      	ldr	r3, [pc, #136]	; (8000720 <SystemClock_Config+0xd0>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a21      	ldr	r2, [pc, #132]	; (8000720 <SystemClock_Config+0xd0>)
 800069a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800069e:	6013      	str	r3, [r2, #0]
 80006a0:	4b1f      	ldr	r3, [pc, #124]	; (8000720 <SystemClock_Config+0xd0>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006a8:	607b      	str	r3, [r7, #4]
 80006aa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ac:	2302      	movs	r3, #2
 80006ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b0:	2301      	movs	r3, #1
 80006b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b4:	2310      	movs	r3, #16
 80006b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b8:	2302      	movs	r3, #2
 80006ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006bc:	2300      	movs	r3, #0
 80006be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006c0:	2310      	movs	r3, #16
 80006c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006c4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006c8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006ca:	2304      	movs	r3, #4
 80006cc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006ce:	2304      	movs	r3, #4
 80006d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d2:	f107 0320 	add.w	r3, r7, #32
 80006d6:	4618      	mov	r0, r3
 80006d8:	f000 fe26 	bl	8001328 <HAL_RCC_OscConfig>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006e2:	f000 f9e1 	bl	8000aa8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e6:	230f      	movs	r3, #15
 80006e8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ea:	2302      	movs	r3, #2
 80006ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006f6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006fc:	f107 030c 	add.w	r3, r7, #12
 8000700:	2102      	movs	r1, #2
 8000702:	4618      	mov	r0, r3
 8000704:	f001 f880 	bl	8001808 <HAL_RCC_ClockConfig>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800070e:	f000 f9cb 	bl	8000aa8 <Error_Handler>
  }
}
 8000712:	bf00      	nop
 8000714:	3750      	adds	r7, #80	; 0x50
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40023800 	.word	0x40023800
 8000720:	40007000 	.word	0x40007000

08000724 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000728:	4b11      	ldr	r3, [pc, #68]	; (8000770 <MX_USART2_UART_Init+0x4c>)
 800072a:	4a12      	ldr	r2, [pc, #72]	; (8000774 <MX_USART2_UART_Init+0x50>)
 800072c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800072e:	4b10      	ldr	r3, [pc, #64]	; (8000770 <MX_USART2_UART_Init+0x4c>)
 8000730:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000734:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000736:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <MX_USART2_UART_Init+0x4c>)
 8000738:	2200      	movs	r2, #0
 800073a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800073c:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <MX_USART2_UART_Init+0x4c>)
 800073e:	2200      	movs	r2, #0
 8000740:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000742:	4b0b      	ldr	r3, [pc, #44]	; (8000770 <MX_USART2_UART_Init+0x4c>)
 8000744:	2200      	movs	r2, #0
 8000746:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000748:	4b09      	ldr	r3, [pc, #36]	; (8000770 <MX_USART2_UART_Init+0x4c>)
 800074a:	220c      	movs	r2, #12
 800074c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800074e:	4b08      	ldr	r3, [pc, #32]	; (8000770 <MX_USART2_UART_Init+0x4c>)
 8000750:	2200      	movs	r2, #0
 8000752:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000754:	4b06      	ldr	r3, [pc, #24]	; (8000770 <MX_USART2_UART_Init+0x4c>)
 8000756:	2200      	movs	r2, #0
 8000758:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800075a:	4805      	ldr	r0, [pc, #20]	; (8000770 <MX_USART2_UART_Init+0x4c>)
 800075c:	f001 fc96 	bl	800208c <HAL_UART_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000766:	f000 f99f 	bl	8000aa8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	20004048 	.word	0x20004048
 8000774:	40004400 	.word	0x40004400

08000778 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b08a      	sub	sp, #40	; 0x28
 800077c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077e:	f107 0314 	add.w	r3, r7, #20
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	609a      	str	r2, [r3, #8]
 800078a:	60da      	str	r2, [r3, #12]
 800078c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	613b      	str	r3, [r7, #16]
 8000792:	4b2d      	ldr	r3, [pc, #180]	; (8000848 <MX_GPIO_Init+0xd0>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a2c      	ldr	r2, [pc, #176]	; (8000848 <MX_GPIO_Init+0xd0>)
 8000798:	f043 0304 	orr.w	r3, r3, #4
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b2a      	ldr	r3, [pc, #168]	; (8000848 <MX_GPIO_Init+0xd0>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0304 	and.w	r3, r3, #4
 80007a6:	613b      	str	r3, [r7, #16]
 80007a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	60fb      	str	r3, [r7, #12]
 80007ae:	4b26      	ldr	r3, [pc, #152]	; (8000848 <MX_GPIO_Init+0xd0>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a25      	ldr	r2, [pc, #148]	; (8000848 <MX_GPIO_Init+0xd0>)
 80007b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b23      	ldr	r3, [pc, #140]	; (8000848 <MX_GPIO_Init+0xd0>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007c2:	60fb      	str	r3, [r7, #12]
 80007c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	60bb      	str	r3, [r7, #8]
 80007ca:	4b1f      	ldr	r3, [pc, #124]	; (8000848 <MX_GPIO_Init+0xd0>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a1e      	ldr	r2, [pc, #120]	; (8000848 <MX_GPIO_Init+0xd0>)
 80007d0:	f043 0301 	orr.w	r3, r3, #1
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b1c      	ldr	r3, [pc, #112]	; (8000848 <MX_GPIO_Init+0xd0>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0301 	and.w	r3, r3, #1
 80007de:	60bb      	str	r3, [r7, #8]
 80007e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	607b      	str	r3, [r7, #4]
 80007e6:	4b18      	ldr	r3, [pc, #96]	; (8000848 <MX_GPIO_Init+0xd0>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a17      	ldr	r2, [pc, #92]	; (8000848 <MX_GPIO_Init+0xd0>)
 80007ec:	f043 0302 	orr.w	r3, r3, #2
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b15      	ldr	r3, [pc, #84]	; (8000848 <MX_GPIO_Init+0xd0>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0302 	and.w	r3, r3, #2
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007fe:	2200      	movs	r2, #0
 8000800:	2120      	movs	r1, #32
 8000802:	4812      	ldr	r0, [pc, #72]	; (800084c <MX_GPIO_Init+0xd4>)
 8000804:	f000 fd5c 	bl	80012c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000808:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800080c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800080e:	4b10      	ldr	r3, [pc, #64]	; (8000850 <MX_GPIO_Init+0xd8>)
 8000810:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000816:	f107 0314 	add.w	r3, r7, #20
 800081a:	4619      	mov	r1, r3
 800081c:	480d      	ldr	r0, [pc, #52]	; (8000854 <MX_GPIO_Init+0xdc>)
 800081e:	f000 fbcd 	bl	8000fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000822:	2320      	movs	r3, #32
 8000824:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000826:	2301      	movs	r3, #1
 8000828:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082e:	2300      	movs	r3, #0
 8000830:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000832:	f107 0314 	add.w	r3, r7, #20
 8000836:	4619      	mov	r1, r3
 8000838:	4804      	ldr	r0, [pc, #16]	; (800084c <MX_GPIO_Init+0xd4>)
 800083a:	f000 fbbf 	bl	8000fbc <HAL_GPIO_Init>

}
 800083e:	bf00      	nop
 8000840:	3728      	adds	r7, #40	; 0x28
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	40023800 	.word	0x40023800
 800084c:	40020000 	.word	0x40020000
 8000850:	10210000 	.word	0x10210000
 8000854:	40020800 	.word	0x40020800

08000858 <led_thread>:

/* USER CODE BEGIN 4 */
void led_thread(void const *args) {
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
	while(1) {
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000860:	2120      	movs	r1, #32
 8000862:	4803      	ldr	r0, [pc, #12]	; (8000870 <led_thread+0x18>)
 8000864:	f000 fd45 	bl	80012f2 <HAL_GPIO_TogglePin>
		osDelay(18);
 8000868:	2012      	movs	r0, #18
 800086a:	f002 f938 	bl	8002ade <osDelay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800086e:	e7f7      	b.n	8000860 <led_thread+0x8>
 8000870:	40020000 	.word	0x40020000

08000874 <uart1_thread>:
	}
}
void uart1_thread(void const *args) {
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
	while(1) {
		HAL_UART_Transmit(&huart2, "A", 1, 1000);
 800087c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000880:	2201      	movs	r2, #1
 8000882:	4904      	ldr	r1, [pc, #16]	; (8000894 <uart1_thread+0x20>)
 8000884:	4804      	ldr	r0, [pc, #16]	; (8000898 <uart1_thread+0x24>)
 8000886:	f001 fc4e 	bl	8002126 <HAL_UART_Transmit>
		osDelay(50);
 800088a:	2032      	movs	r0, #50	; 0x32
 800088c:	f002 f927 	bl	8002ade <osDelay>
		HAL_UART_Transmit(&huart2, "A", 1, 1000);
 8000890:	e7f4      	b.n	800087c <uart1_thread+0x8>
 8000892:	bf00      	nop
 8000894:	08005760 	.word	0x08005760
 8000898:	20004048 	.word	0x20004048

0800089c <uart2_thread>:
	}
}
void uart2_thread(void const *args) {
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
	while(1) {
		HAL_UART_Transmit(&huart2, "B", 1, 1000);
 80008a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008a8:	2201      	movs	r2, #1
 80008aa:	4904      	ldr	r1, [pc, #16]	; (80008bc <uart2_thread+0x20>)
 80008ac:	4804      	ldr	r0, [pc, #16]	; (80008c0 <uart2_thread+0x24>)
 80008ae:	f001 fc3a 	bl	8002126 <HAL_UART_Transmit>
		osDelay(128);
 80008b2:	2080      	movs	r0, #128	; 0x80
 80008b4:	f002 f913 	bl	8002ade <osDelay>
		HAL_UART_Transmit(&huart2, "B", 1, 1000);
 80008b8:	e7f4      	b.n	80008a4 <uart2_thread+0x8>
 80008ba:	bf00      	nop
 80008bc:	08005764 	.word	0x08005764
 80008c0:	20004048 	.word	0x20004048

080008c4 <uartmsg1_thread>:
	}
}
void uartmsg1_thread(void const *args) {
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b086      	sub	sp, #24
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
	int threadID = 0; // threadID is 0 for one thread and 1 for
 80008cc:	2300      	movs	r3, #0
 80008ce:	613b      	str	r3, [r7, #16]
	int idx = 0;
 80008d0:	2300      	movs	r3, #0
 80008d2:	617b      	str	r3, [r7, #20]
	while(1) {
		message_t message = {threadID, idx};
 80008d4:	693b      	ldr	r3, [r7, #16]
 80008d6:	60bb      	str	r3, [r7, #8]
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	60fb      	str	r3, [r7, #12]
		idx ++;
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	3301      	adds	r3, #1
 80008e0:	617b      	str	r3, [r7, #20]
		osMessagePut(myQueue01Handle, (uint32_t)&message, osWaitForever);
 80008e2:	4b06      	ldr	r3, [pc, #24]	; (80008fc <uartmsg1_thread+0x38>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	f107 0108 	add.w	r1, r7, #8
 80008ea:	f04f 32ff 	mov.w	r2, #4294967295
 80008ee:	4618      	mov	r0, r3
 80008f0:	f002 f966 	bl	8002bc0 <osMessagePut>
		osDelay(100);
 80008f4:	2064      	movs	r0, #100	; 0x64
 80008f6:	f002 f8f2 	bl	8002ade <osDelay>
	while(1) {
 80008fa:	e7eb      	b.n	80008d4 <uartmsg1_thread+0x10>
 80008fc:	20004044 	.word	0x20004044

08000900 <uartmsg2_thread>:
	}
}
void uartmsg2_thread(void const *args) {
 8000900:	b580      	push	{r7, lr}
 8000902:	b086      	sub	sp, #24
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
	int threadID = 1; // threadID is 0 for one thread and 1 for
 8000908:	2301      	movs	r3, #1
 800090a:	613b      	str	r3, [r7, #16]
	int idx = 0;
 800090c:	2300      	movs	r3, #0
 800090e:	617b      	str	r3, [r7, #20]
	while(1) {
		message_t message = {threadID, idx};
 8000910:	693b      	ldr	r3, [r7, #16]
 8000912:	60bb      	str	r3, [r7, #8]
 8000914:	697b      	ldr	r3, [r7, #20]
 8000916:	60fb      	str	r3, [r7, #12]
		idx ++;
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	3301      	adds	r3, #1
 800091c:	617b      	str	r3, [r7, #20]
		osMessagePut(myQueue01Handle, (uint32_t)&message, osWaitForever);
 800091e:	4b06      	ldr	r3, [pc, #24]	; (8000938 <uartmsg2_thread+0x38>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	f107 0108 	add.w	r1, r7, #8
 8000926:	f04f 32ff 	mov.w	r2, #4294967295
 800092a:	4618      	mov	r0, r3
 800092c:	f002 f948 	bl	8002bc0 <osMessagePut>
		osDelay(100);
 8000930:	2064      	movs	r0, #100	; 0x64
 8000932:	f002 f8d4 	bl	8002ade <osDelay>
	while(1) {
 8000936:	e7eb      	b.n	8000910 <uartmsg2_thread+0x10>
 8000938:	20004044 	.word	0x20004044

0800093c <uartmsg_handler>:
	}
}
void uartmsg_handler(void const *args) {
 800093c:	b580      	push	{r7, lr}
 800093e:	b08e      	sub	sp, #56	; 0x38
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
	char buffer[32];
	while(1) {
		osEvent evt = osMessageGet(myQueue01Handle, osWaitForever);
 8000944:	4b12      	ldr	r3, [pc, #72]	; (8000990 <uartmsg_handler+0x54>)
 8000946:	6819      	ldr	r1, [r3, #0]
 8000948:	f107 0308 	add.w	r3, r7, #8
 800094c:	f04f 32ff 	mov.w	r2, #4294967295
 8000950:	4618      	mov	r0, r3
 8000952:	f002 f975 	bl	8002c40 <osMessageGet>
		if (evt.status == osEventMessage) {
 8000956:	68bb      	ldr	r3, [r7, #8]
 8000958:	2b10      	cmp	r3, #16
 800095a:	d1f3      	bne.n	8000944 <uartmsg_handler+0x8>
			message_t *message = (message_t*)evt.value.p;
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	637b      	str	r3, [r7, #52]	; 0x34
			sprintf(buffer, "TID: %d %d\r\n", message->threadID, message->idx);
 8000960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000962:	681a      	ldr	r2, [r3, #0]
 8000964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000966:	685b      	ldr	r3, [r3, #4]
 8000968:	f107 0014 	add.w	r0, r7, #20
 800096c:	4909      	ldr	r1, [pc, #36]	; (8000994 <uartmsg_handler+0x58>)
 800096e:	f004 fad3 	bl	8004f18 <siprintf>
			HAL_UART_Transmit(&huart2, &buffer, strlen(buffer), 1000);
 8000972:	f107 0314 	add.w	r3, r7, #20
 8000976:	4618      	mov	r0, r3
 8000978:	f7ff fc32 	bl	80001e0 <strlen>
 800097c:	4603      	mov	r3, r0
 800097e:	b29a      	uxth	r2, r3
 8000980:	f107 0114 	add.w	r1, r7, #20
 8000984:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000988:	4803      	ldr	r0, [pc, #12]	; (8000998 <uartmsg_handler+0x5c>)
 800098a:	f001 fbcc 	bl	8002126 <HAL_UART_Transmit>
	while(1) {
 800098e:	e7d9      	b.n	8000944 <uartmsg_handler+0x8>
 8000990:	20004044 	.word	0x20004044
 8000994:	08005768 	.word	0x08005768
 8000998:	20004048 	.word	0x20004048

0800099c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800099c:	b5b0      	push	{r4, r5, r7, lr}
 800099e:	b0ac      	sub	sp, #176	; 0xb0
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	osThreadDef(led, led_thread, osPriorityNormal, 0, 128);
 80009a4:	4b31      	ldr	r3, [pc, #196]	; (8000a6c <StartDefaultTask+0xd0>)
 80009a6:	f107 0494 	add.w	r4, r7, #148	; 0x94
 80009aa:	461d      	mov	r5, r3
 80009ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	osThreadCreate(osThread(led), NULL);
 80009b8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80009bc:	2100      	movs	r1, #0
 80009be:	4618      	mov	r0, r3
 80009c0:	f002 f841 	bl	8002a46 <osThreadCreate>
	osThreadDef(uart1, uart1_thread, osPriorityNormal, 0, 128);
 80009c4:	4b2a      	ldr	r3, [pc, #168]	; (8000a70 <StartDefaultTask+0xd4>)
 80009c6:	f107 0478 	add.w	r4, r7, #120	; 0x78
 80009ca:	461d      	mov	r5, r3
 80009cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	osThreadCreate(osThread(uart1), NULL);
 80009d8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80009dc:	2100      	movs	r1, #0
 80009de:	4618      	mov	r0, r3
 80009e0:	f002 f831 	bl	8002a46 <osThreadCreate>
	osThreadDef(uart2, uart2_thread, osPriorityNormal, 0, 128);
 80009e4:	4b23      	ldr	r3, [pc, #140]	; (8000a74 <StartDefaultTask+0xd8>)
 80009e6:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 80009ea:	461d      	mov	r5, r3
 80009ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	osThreadCreate(osThread(uart2), NULL);
 80009f8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80009fc:	2100      	movs	r1, #0
 80009fe:	4618      	mov	r0, r3
 8000a00:	f002 f821 	bl	8002a46 <osThreadCreate>

	osThreadDef(uartmsg1, uartmsg1_thread, osPriorityNormal, 0, 128);
 8000a04:	4b1c      	ldr	r3, [pc, #112]	; (8000a78 <StartDefaultTask+0xdc>)
 8000a06:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8000a0a:	461d      	mov	r5, r3
 8000a0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a10:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a14:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	osThreadCreate(osThread(uartmsg1), NULL);
 8000a18:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f002 f811 	bl	8002a46 <osThreadCreate>
	osThreadDef(uartmsg2, uartmsg2_thread, osPriorityNormal, 0, 128);
 8000a24:	4b15      	ldr	r3, [pc, #84]	; (8000a7c <StartDefaultTask+0xe0>)
 8000a26:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8000a2a:	461d      	mov	r5, r3
 8000a2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a30:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a34:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	osThreadCreate(osThread(uartmsg2), NULL);
 8000a38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f002 f801 	bl	8002a46 <osThreadCreate>

	osThreadDef(uarthandler, uartmsg_handler, osPriorityNormal, 0, 128);
 8000a44:	4b0e      	ldr	r3, [pc, #56]	; (8000a80 <StartDefaultTask+0xe4>)
 8000a46:	f107 0408 	add.w	r4, r7, #8
 8000a4a:	461d      	mov	r5, r3
 8000a4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a50:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a54:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	osThreadCreate(osThread(uarthandler), NULL);
 8000a58:	f107 0308 	add.w	r3, r7, #8
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f001 fff1 	bl	8002a46 <osThreadCreate>

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a64:	2001      	movs	r0, #1
 8000a66:	f002 f83a 	bl	8002ade <osDelay>
 8000a6a:	e7fb      	b.n	8000a64 <StartDefaultTask+0xc8>
 8000a6c:	0800577c 	.word	0x0800577c
 8000a70:	080057a0 	.word	0x080057a0
 8000a74:	080057c4 	.word	0x080057c4
 8000a78:	080057ec 	.word	0x080057ec
 8000a7c:	08005814 	.word	0x08005814
 8000a80:	0800583c 	.word	0x0800583c

08000a84 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a04      	ldr	r2, [pc, #16]	; (8000aa4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d101      	bne.n	8000a9a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a96:	f000 f98f 	bl	8000db8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40010000 	.word	0x40010000

08000aa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aac:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aae:	e7fe      	b.n	8000aae <Error_Handler+0x6>

08000ab0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	607b      	str	r3, [r7, #4]
 8000aba:	4b12      	ldr	r3, [pc, #72]	; (8000b04 <HAL_MspInit+0x54>)
 8000abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000abe:	4a11      	ldr	r2, [pc, #68]	; (8000b04 <HAL_MspInit+0x54>)
 8000ac0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ac4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ac6:	4b0f      	ldr	r3, [pc, #60]	; (8000b04 <HAL_MspInit+0x54>)
 8000ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ace:	607b      	str	r3, [r7, #4]
 8000ad0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	603b      	str	r3, [r7, #0]
 8000ad6:	4b0b      	ldr	r3, [pc, #44]	; (8000b04 <HAL_MspInit+0x54>)
 8000ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ada:	4a0a      	ldr	r2, [pc, #40]	; (8000b04 <HAL_MspInit+0x54>)
 8000adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae2:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <HAL_MspInit+0x54>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aea:	603b      	str	r3, [r7, #0]
 8000aec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000aee:	2200      	movs	r2, #0
 8000af0:	210f      	movs	r1, #15
 8000af2:	f06f 0001 	mvn.w	r0, #1
 8000af6:	f000 fa37 	bl	8000f68 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000afa:	bf00      	nop
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40023800 	.word	0x40023800

08000b08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b08a      	sub	sp, #40	; 0x28
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b10:	f107 0314 	add.w	r3, r7, #20
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	605a      	str	r2, [r3, #4]
 8000b1a:	609a      	str	r2, [r3, #8]
 8000b1c:	60da      	str	r2, [r3, #12]
 8000b1e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a19      	ldr	r2, [pc, #100]	; (8000b8c <HAL_UART_MspInit+0x84>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d12b      	bne.n	8000b82 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	613b      	str	r3, [r7, #16]
 8000b2e:	4b18      	ldr	r3, [pc, #96]	; (8000b90 <HAL_UART_MspInit+0x88>)
 8000b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b32:	4a17      	ldr	r2, [pc, #92]	; (8000b90 <HAL_UART_MspInit+0x88>)
 8000b34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b38:	6413      	str	r3, [r2, #64]	; 0x40
 8000b3a:	4b15      	ldr	r3, [pc, #84]	; (8000b90 <HAL_UART_MspInit+0x88>)
 8000b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b42:	613b      	str	r3, [r7, #16]
 8000b44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	60fb      	str	r3, [r7, #12]
 8000b4a:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <HAL_UART_MspInit+0x88>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	4a10      	ldr	r2, [pc, #64]	; (8000b90 <HAL_UART_MspInit+0x88>)
 8000b50:	f043 0301 	orr.w	r3, r3, #1
 8000b54:	6313      	str	r3, [r2, #48]	; 0x30
 8000b56:	4b0e      	ldr	r3, [pc, #56]	; (8000b90 <HAL_UART_MspInit+0x88>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	f003 0301 	and.w	r3, r3, #1
 8000b5e:	60fb      	str	r3, [r7, #12]
 8000b60:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b62:	230c      	movs	r3, #12
 8000b64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b66:	2302      	movs	r3, #2
 8000b68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b6e:	2303      	movs	r3, #3
 8000b70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b72:	2307      	movs	r3, #7
 8000b74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b76:	f107 0314 	add.w	r3, r7, #20
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4805      	ldr	r0, [pc, #20]	; (8000b94 <HAL_UART_MspInit+0x8c>)
 8000b7e:	f000 fa1d 	bl	8000fbc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b82:	bf00      	nop
 8000b84:	3728      	adds	r7, #40	; 0x28
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40004400 	.word	0x40004400
 8000b90:	40023800 	.word	0x40023800
 8000b94:	40020000 	.word	0x40020000

08000b98 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b08c      	sub	sp, #48	; 0x30
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	6879      	ldr	r1, [r7, #4]
 8000bac:	2019      	movs	r0, #25
 8000bae:	f000 f9db 	bl	8000f68 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000bb2:	2019      	movs	r0, #25
 8000bb4:	f000 f9f4 	bl	8000fa0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000bb8:	2300      	movs	r3, #0
 8000bba:	60fb      	str	r3, [r7, #12]
 8000bbc:	4b1e      	ldr	r3, [pc, #120]	; (8000c38 <HAL_InitTick+0xa0>)
 8000bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc0:	4a1d      	ldr	r2, [pc, #116]	; (8000c38 <HAL_InitTick+0xa0>)
 8000bc2:	f043 0301 	orr.w	r3, r3, #1
 8000bc6:	6453      	str	r3, [r2, #68]	; 0x44
 8000bc8:	4b1b      	ldr	r3, [pc, #108]	; (8000c38 <HAL_InitTick+0xa0>)
 8000bca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bcc:	f003 0301 	and.w	r3, r3, #1
 8000bd0:	60fb      	str	r3, [r7, #12]
 8000bd2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bd4:	f107 0210 	add.w	r2, r7, #16
 8000bd8:	f107 0314 	add.w	r3, r7, #20
 8000bdc:	4611      	mov	r1, r2
 8000bde:	4618      	mov	r0, r3
 8000be0:	f001 f804 	bl	8001bec <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000be4:	f000 ffee 	bl	8001bc4 <HAL_RCC_GetPCLK2Freq>
 8000be8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bec:	4a13      	ldr	r2, [pc, #76]	; (8000c3c <HAL_InitTick+0xa4>)
 8000bee:	fba2 2303 	umull	r2, r3, r2, r3
 8000bf2:	0c9b      	lsrs	r3, r3, #18
 8000bf4:	3b01      	subs	r3, #1
 8000bf6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000bf8:	4b11      	ldr	r3, [pc, #68]	; (8000c40 <HAL_InitTick+0xa8>)
 8000bfa:	4a12      	ldr	r2, [pc, #72]	; (8000c44 <HAL_InitTick+0xac>)
 8000bfc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000bfe:	4b10      	ldr	r3, [pc, #64]	; (8000c40 <HAL_InitTick+0xa8>)
 8000c00:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c04:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000c06:	4a0e      	ldr	r2, [pc, #56]	; (8000c40 <HAL_InitTick+0xa8>)
 8000c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c0a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000c0c:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <HAL_InitTick+0xa8>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c12:	4b0b      	ldr	r3, [pc, #44]	; (8000c40 <HAL_InitTick+0xa8>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000c18:	4809      	ldr	r0, [pc, #36]	; (8000c40 <HAL_InitTick+0xa8>)
 8000c1a:	f001 f819 	bl	8001c50 <HAL_TIM_Base_Init>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d104      	bne.n	8000c2e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000c24:	4806      	ldr	r0, [pc, #24]	; (8000c40 <HAL_InitTick+0xa8>)
 8000c26:	f001 f848 	bl	8001cba <HAL_TIM_Base_Start_IT>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	e000      	b.n	8000c30 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000c2e:	2301      	movs	r3, #1
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	3730      	adds	r7, #48	; 0x30
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	40023800 	.word	0x40023800
 8000c3c:	431bde83 	.word	0x431bde83
 8000c40:	20004088 	.word	0x20004088
 8000c44:	40010000 	.word	0x40010000

08000c48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c4c:	e7fe      	b.n	8000c4c <NMI_Handler+0x4>

08000c4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c52:	e7fe      	b.n	8000c52 <HardFault_Handler+0x4>

08000c54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c58:	e7fe      	b.n	8000c58 <MemManage_Handler+0x4>

08000c5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c5e:	e7fe      	b.n	8000c5e <BusFault_Handler+0x4>

08000c60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c64:	e7fe      	b.n	8000c64 <UsageFault_Handler+0x4>

08000c66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr

08000c74 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c78:	4802      	ldr	r0, [pc, #8]	; (8000c84 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000c7a:	f001 f842 	bl	8001d02 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	20004088 	.word	0x20004088

08000c88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b086      	sub	sp, #24
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c90:	4a14      	ldr	r2, [pc, #80]	; (8000ce4 <_sbrk+0x5c>)
 8000c92:	4b15      	ldr	r3, [pc, #84]	; (8000ce8 <_sbrk+0x60>)
 8000c94:	1ad3      	subs	r3, r2, r3
 8000c96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c9c:	4b13      	ldr	r3, [pc, #76]	; (8000cec <_sbrk+0x64>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d102      	bne.n	8000caa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ca4:	4b11      	ldr	r3, [pc, #68]	; (8000cec <_sbrk+0x64>)
 8000ca6:	4a12      	ldr	r2, [pc, #72]	; (8000cf0 <_sbrk+0x68>)
 8000ca8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000caa:	4b10      	ldr	r3, [pc, #64]	; (8000cec <_sbrk+0x64>)
 8000cac:	681a      	ldr	r2, [r3, #0]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4413      	add	r3, r2
 8000cb2:	693a      	ldr	r2, [r7, #16]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	d207      	bcs.n	8000cc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cb8:	f004 f8f0 	bl	8004e9c <__errno>
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	230c      	movs	r3, #12
 8000cc0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000cc6:	e009      	b.n	8000cdc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cc8:	4b08      	ldr	r3, [pc, #32]	; (8000cec <_sbrk+0x64>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cce:	4b07      	ldr	r3, [pc, #28]	; (8000cec <_sbrk+0x64>)
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4413      	add	r3, r2
 8000cd6:	4a05      	ldr	r2, [pc, #20]	; (8000cec <_sbrk+0x64>)
 8000cd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cda:	68fb      	ldr	r3, [r7, #12]
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	3718      	adds	r7, #24
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	20020000 	.word	0x20020000
 8000ce8:	00000400 	.word	0x00000400
 8000cec:	200002e4 	.word	0x200002e4
 8000cf0:	200040d0 	.word	0x200040d0

08000cf4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cf8:	4b08      	ldr	r3, [pc, #32]	; (8000d1c <SystemInit+0x28>)
 8000cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cfe:	4a07      	ldr	r2, [pc, #28]	; (8000d1c <SystemInit+0x28>)
 8000d00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d08:	4b04      	ldr	r3, [pc, #16]	; (8000d1c <SystemInit+0x28>)
 8000d0a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d0e:	609a      	str	r2, [r3, #8]
#endif
}
 8000d10:	bf00      	nop
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	e000ed00 	.word	0xe000ed00

08000d20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d58 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000d24:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000d26:	e003      	b.n	8000d30 <LoopCopyDataInit>

08000d28 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000d28:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000d2a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000d2c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000d2e:	3104      	adds	r1, #4

08000d30 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000d30:	480b      	ldr	r0, [pc, #44]	; (8000d60 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000d32:	4b0c      	ldr	r3, [pc, #48]	; (8000d64 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000d34:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000d36:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000d38:	d3f6      	bcc.n	8000d28 <CopyDataInit>
  ldr  r2, =_sbss
 8000d3a:	4a0b      	ldr	r2, [pc, #44]	; (8000d68 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000d3c:	e002      	b.n	8000d44 <LoopFillZerobss>

08000d3e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000d3e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000d40:	f842 3b04 	str.w	r3, [r2], #4

08000d44 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000d44:	4b09      	ldr	r3, [pc, #36]	; (8000d6c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000d46:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000d48:	d3f9      	bcc.n	8000d3e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d4a:	f7ff ffd3 	bl	8000cf4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d4e:	f004 f8ab 	bl	8004ea8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d52:	f7ff fc37 	bl	80005c4 <main>
  bx  lr    
 8000d56:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d58:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000d5c:	080058bc 	.word	0x080058bc
  ldr  r0, =_sdata
 8000d60:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000d64:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8000d68:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8000d6c:	200040d0 	.word	0x200040d0

08000d70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d70:	e7fe      	b.n	8000d70 <ADC_IRQHandler>
	...

08000d74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d78:	4b0e      	ldr	r3, [pc, #56]	; (8000db4 <HAL_Init+0x40>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a0d      	ldr	r2, [pc, #52]	; (8000db4 <HAL_Init+0x40>)
 8000d7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d84:	4b0b      	ldr	r3, [pc, #44]	; (8000db4 <HAL_Init+0x40>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a0a      	ldr	r2, [pc, #40]	; (8000db4 <HAL_Init+0x40>)
 8000d8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d90:	4b08      	ldr	r3, [pc, #32]	; (8000db4 <HAL_Init+0x40>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a07      	ldr	r2, [pc, #28]	; (8000db4 <HAL_Init+0x40>)
 8000d96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d9c:	2003      	movs	r0, #3
 8000d9e:	f000 f8d8 	bl	8000f52 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000da2:	2000      	movs	r0, #0
 8000da4:	f7ff fef8 	bl	8000b98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000da8:	f7ff fe82 	bl	8000ab0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dac:	2300      	movs	r3, #0
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40023c00 	.word	0x40023c00

08000db8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dbc:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <HAL_IncTick+0x20>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <HAL_IncTick+0x24>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	4a04      	ldr	r2, [pc, #16]	; (8000ddc <HAL_IncTick+0x24>)
 8000dca:	6013      	str	r3, [r2, #0]
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	20000008 	.word	0x20000008
 8000ddc:	200040c8 	.word	0x200040c8

08000de0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  return uwTick;
 8000de4:	4b03      	ldr	r3, [pc, #12]	; (8000df4 <HAL_GetTick+0x14>)
 8000de6:	681b      	ldr	r3, [r3, #0]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	200040c8 	.word	0x200040c8

08000df8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b085      	sub	sp, #20
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	f003 0307 	and.w	r3, r3, #7
 8000e06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e08:	4b0c      	ldr	r3, [pc, #48]	; (8000e3c <__NVIC_SetPriorityGrouping+0x44>)
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e0e:	68ba      	ldr	r2, [r7, #8]
 8000e10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e14:	4013      	ands	r3, r2
 8000e16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e2a:	4a04      	ldr	r2, [pc, #16]	; (8000e3c <__NVIC_SetPriorityGrouping+0x44>)
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	60d3      	str	r3, [r2, #12]
}
 8000e30:	bf00      	nop
 8000e32:	3714      	adds	r7, #20
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e44:	4b04      	ldr	r3, [pc, #16]	; (8000e58 <__NVIC_GetPriorityGrouping+0x18>)
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	0a1b      	lsrs	r3, r3, #8
 8000e4a:	f003 0307 	and.w	r3, r3, #7
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	db0b      	blt.n	8000e86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	f003 021f 	and.w	r2, r3, #31
 8000e74:	4907      	ldr	r1, [pc, #28]	; (8000e94 <__NVIC_EnableIRQ+0x38>)
 8000e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7a:	095b      	lsrs	r3, r3, #5
 8000e7c:	2001      	movs	r0, #1
 8000e7e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e86:	bf00      	nop
 8000e88:	370c      	adds	r7, #12
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	e000e100 	.word	0xe000e100

08000e98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	6039      	str	r1, [r7, #0]
 8000ea2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	db0a      	blt.n	8000ec2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	b2da      	uxtb	r2, r3
 8000eb0:	490c      	ldr	r1, [pc, #48]	; (8000ee4 <__NVIC_SetPriority+0x4c>)
 8000eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb6:	0112      	lsls	r2, r2, #4
 8000eb8:	b2d2      	uxtb	r2, r2
 8000eba:	440b      	add	r3, r1
 8000ebc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ec0:	e00a      	b.n	8000ed8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	b2da      	uxtb	r2, r3
 8000ec6:	4908      	ldr	r1, [pc, #32]	; (8000ee8 <__NVIC_SetPriority+0x50>)
 8000ec8:	79fb      	ldrb	r3, [r7, #7]
 8000eca:	f003 030f 	and.w	r3, r3, #15
 8000ece:	3b04      	subs	r3, #4
 8000ed0:	0112      	lsls	r2, r2, #4
 8000ed2:	b2d2      	uxtb	r2, r2
 8000ed4:	440b      	add	r3, r1
 8000ed6:	761a      	strb	r2, [r3, #24]
}
 8000ed8:	bf00      	nop
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	e000e100 	.word	0xe000e100
 8000ee8:	e000ed00 	.word	0xe000ed00

08000eec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b089      	sub	sp, #36	; 0x24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	f003 0307 	and.w	r3, r3, #7
 8000efe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	f1c3 0307 	rsb	r3, r3, #7
 8000f06:	2b04      	cmp	r3, #4
 8000f08:	bf28      	it	cs
 8000f0a:	2304      	movcs	r3, #4
 8000f0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	3304      	adds	r3, #4
 8000f12:	2b06      	cmp	r3, #6
 8000f14:	d902      	bls.n	8000f1c <NVIC_EncodePriority+0x30>
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	3b03      	subs	r3, #3
 8000f1a:	e000      	b.n	8000f1e <NVIC_EncodePriority+0x32>
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f20:	f04f 32ff 	mov.w	r2, #4294967295
 8000f24:	69bb      	ldr	r3, [r7, #24]
 8000f26:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2a:	43da      	mvns	r2, r3
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	401a      	ands	r2, r3
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f34:	f04f 31ff 	mov.w	r1, #4294967295
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f3e:	43d9      	mvns	r1, r3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f44:	4313      	orrs	r3, r2
         );
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3724      	adds	r7, #36	; 0x24
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr

08000f52 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b082      	sub	sp, #8
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f7ff ff4c 	bl	8000df8 <__NVIC_SetPriorityGrouping>
}
 8000f60:	bf00      	nop
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b086      	sub	sp, #24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
 8000f74:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f76:	2300      	movs	r3, #0
 8000f78:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f7a:	f7ff ff61 	bl	8000e40 <__NVIC_GetPriorityGrouping>
 8000f7e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f80:	687a      	ldr	r2, [r7, #4]
 8000f82:	68b9      	ldr	r1, [r7, #8]
 8000f84:	6978      	ldr	r0, [r7, #20]
 8000f86:	f7ff ffb1 	bl	8000eec <NVIC_EncodePriority>
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f90:	4611      	mov	r1, r2
 8000f92:	4618      	mov	r0, r3
 8000f94:	f7ff ff80 	bl	8000e98 <__NVIC_SetPriority>
}
 8000f98:	bf00      	nop
 8000f9a:	3718      	adds	r7, #24
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff ff54 	bl	8000e5c <__NVIC_EnableIRQ>
}
 8000fb4:	bf00      	nop
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b089      	sub	sp, #36	; 0x24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	61fb      	str	r3, [r7, #28]
 8000fd6:	e159      	b.n	800128c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fd8:	2201      	movs	r2, #1
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	697a      	ldr	r2, [r7, #20]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fec:	693a      	ldr	r2, [r7, #16]
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	f040 8148 	bne.w	8001286 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d00b      	beq.n	8001016 <HAL_GPIO_Init+0x5a>
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	2b02      	cmp	r3, #2
 8001004:	d007      	beq.n	8001016 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800100a:	2b11      	cmp	r3, #17
 800100c:	d003      	beq.n	8001016 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	2b12      	cmp	r3, #18
 8001014:	d130      	bne.n	8001078 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	2203      	movs	r2, #3
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	43db      	mvns	r3, r3
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	4013      	ands	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	68da      	ldr	r2, [r3, #12]
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	4313      	orrs	r3, r2
 800103e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800104c:	2201      	movs	r2, #1
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	43db      	mvns	r3, r3
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	4013      	ands	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	091b      	lsrs	r3, r3, #4
 8001062:	f003 0201 	and.w	r2, r3, #1
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	4313      	orrs	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	2203      	movs	r2, #3
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	43db      	mvns	r3, r3
 800108a:	69ba      	ldr	r2, [r7, #24]
 800108c:	4013      	ands	r3, r2
 800108e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	689a      	ldr	r2, [r3, #8]
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	4313      	orrs	r3, r2
 80010a0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	2b02      	cmp	r3, #2
 80010ae:	d003      	beq.n	80010b8 <HAL_GPIO_Init+0xfc>
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	2b12      	cmp	r3, #18
 80010b6:	d123      	bne.n	8001100 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	08da      	lsrs	r2, r3, #3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	3208      	adds	r2, #8
 80010c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	f003 0307 	and.w	r3, r3, #7
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	220f      	movs	r2, #15
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	43db      	mvns	r3, r3
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	4013      	ands	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	691a      	ldr	r2, [r3, #16]
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	f003 0307 	and.w	r3, r3, #7
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	08da      	lsrs	r2, r3, #3
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	3208      	adds	r2, #8
 80010fa:	69b9      	ldr	r1, [r7, #24]
 80010fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	2203      	movs	r2, #3
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	43db      	mvns	r3, r3
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	4013      	ands	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f003 0203 	and.w	r2, r3, #3
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	4313      	orrs	r3, r2
 800112c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800113c:	2b00      	cmp	r3, #0
 800113e:	f000 80a2 	beq.w	8001286 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	60fb      	str	r3, [r7, #12]
 8001146:	4b56      	ldr	r3, [pc, #344]	; (80012a0 <HAL_GPIO_Init+0x2e4>)
 8001148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114a:	4a55      	ldr	r2, [pc, #340]	; (80012a0 <HAL_GPIO_Init+0x2e4>)
 800114c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001150:	6453      	str	r3, [r2, #68]	; 0x44
 8001152:	4b53      	ldr	r3, [pc, #332]	; (80012a0 <HAL_GPIO_Init+0x2e4>)
 8001154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001156:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800115e:	4a51      	ldr	r2, [pc, #324]	; (80012a4 <HAL_GPIO_Init+0x2e8>)
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	089b      	lsrs	r3, r3, #2
 8001164:	3302      	adds	r3, #2
 8001166:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800116a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	f003 0303 	and.w	r3, r3, #3
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	220f      	movs	r2, #15
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	43db      	mvns	r3, r3
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	4013      	ands	r3, r2
 8001180:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a48      	ldr	r2, [pc, #288]	; (80012a8 <HAL_GPIO_Init+0x2ec>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d019      	beq.n	80011be <HAL_GPIO_Init+0x202>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a47      	ldr	r2, [pc, #284]	; (80012ac <HAL_GPIO_Init+0x2f0>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d013      	beq.n	80011ba <HAL_GPIO_Init+0x1fe>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a46      	ldr	r2, [pc, #280]	; (80012b0 <HAL_GPIO_Init+0x2f4>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d00d      	beq.n	80011b6 <HAL_GPIO_Init+0x1fa>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a45      	ldr	r2, [pc, #276]	; (80012b4 <HAL_GPIO_Init+0x2f8>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d007      	beq.n	80011b2 <HAL_GPIO_Init+0x1f6>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a44      	ldr	r2, [pc, #272]	; (80012b8 <HAL_GPIO_Init+0x2fc>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d101      	bne.n	80011ae <HAL_GPIO_Init+0x1f2>
 80011aa:	2304      	movs	r3, #4
 80011ac:	e008      	b.n	80011c0 <HAL_GPIO_Init+0x204>
 80011ae:	2307      	movs	r3, #7
 80011b0:	e006      	b.n	80011c0 <HAL_GPIO_Init+0x204>
 80011b2:	2303      	movs	r3, #3
 80011b4:	e004      	b.n	80011c0 <HAL_GPIO_Init+0x204>
 80011b6:	2302      	movs	r3, #2
 80011b8:	e002      	b.n	80011c0 <HAL_GPIO_Init+0x204>
 80011ba:	2301      	movs	r3, #1
 80011bc:	e000      	b.n	80011c0 <HAL_GPIO_Init+0x204>
 80011be:	2300      	movs	r3, #0
 80011c0:	69fa      	ldr	r2, [r7, #28]
 80011c2:	f002 0203 	and.w	r2, r2, #3
 80011c6:	0092      	lsls	r2, r2, #2
 80011c8:	4093      	lsls	r3, r2
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011d0:	4934      	ldr	r1, [pc, #208]	; (80012a4 <HAL_GPIO_Init+0x2e8>)
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	089b      	lsrs	r3, r3, #2
 80011d6:	3302      	adds	r3, #2
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011de:	4b37      	ldr	r3, [pc, #220]	; (80012bc <HAL_GPIO_Init+0x300>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	43db      	mvns	r3, r3
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	4013      	ands	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d003      	beq.n	8001202 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	4313      	orrs	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001202:	4a2e      	ldr	r2, [pc, #184]	; (80012bc <HAL_GPIO_Init+0x300>)
 8001204:	69bb      	ldr	r3, [r7, #24]
 8001206:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001208:	4b2c      	ldr	r3, [pc, #176]	; (80012bc <HAL_GPIO_Init+0x300>)
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	43db      	mvns	r3, r3
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	4013      	ands	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001220:	2b00      	cmp	r3, #0
 8001222:	d003      	beq.n	800122c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	4313      	orrs	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800122c:	4a23      	ldr	r2, [pc, #140]	; (80012bc <HAL_GPIO_Init+0x300>)
 800122e:	69bb      	ldr	r3, [r7, #24]
 8001230:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001232:	4b22      	ldr	r3, [pc, #136]	; (80012bc <HAL_GPIO_Init+0x300>)
 8001234:	689b      	ldr	r3, [r3, #8]
 8001236:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	43db      	mvns	r3, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4013      	ands	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d003      	beq.n	8001256 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	4313      	orrs	r3, r2
 8001254:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001256:	4a19      	ldr	r2, [pc, #100]	; (80012bc <HAL_GPIO_Init+0x300>)
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800125c:	4b17      	ldr	r3, [pc, #92]	; (80012bc <HAL_GPIO_Init+0x300>)
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	43db      	mvns	r3, r3
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	4013      	ands	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001274:	2b00      	cmp	r3, #0
 8001276:	d003      	beq.n	8001280 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	4313      	orrs	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001280:	4a0e      	ldr	r2, [pc, #56]	; (80012bc <HAL_GPIO_Init+0x300>)
 8001282:	69bb      	ldr	r3, [r7, #24]
 8001284:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	3301      	adds	r3, #1
 800128a:	61fb      	str	r3, [r7, #28]
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	2b0f      	cmp	r3, #15
 8001290:	f67f aea2 	bls.w	8000fd8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001294:	bf00      	nop
 8001296:	3724      	adds	r7, #36	; 0x24
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr
 80012a0:	40023800 	.word	0x40023800
 80012a4:	40013800 	.word	0x40013800
 80012a8:	40020000 	.word	0x40020000
 80012ac:	40020400 	.word	0x40020400
 80012b0:	40020800 	.word	0x40020800
 80012b4:	40020c00 	.word	0x40020c00
 80012b8:	40021000 	.word	0x40021000
 80012bc:	40013c00 	.word	0x40013c00

080012c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	460b      	mov	r3, r1
 80012ca:	807b      	strh	r3, [r7, #2]
 80012cc:	4613      	mov	r3, r2
 80012ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012d0:	787b      	ldrb	r3, [r7, #1]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d003      	beq.n	80012de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012d6:	887a      	ldrh	r2, [r7, #2]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012dc:	e003      	b.n	80012e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012de:	887b      	ldrh	r3, [r7, #2]
 80012e0:	041a      	lsls	r2, r3, #16
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	619a      	str	r2, [r3, #24]
}
 80012e6:	bf00      	nop
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr

080012f2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012f2:	b480      	push	{r7}
 80012f4:	b083      	sub	sp, #12
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
 80012fa:	460b      	mov	r3, r1
 80012fc:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	695a      	ldr	r2, [r3, #20]
 8001302:	887b      	ldrh	r3, [r7, #2]
 8001304:	401a      	ands	r2, r3
 8001306:	887b      	ldrh	r3, [r7, #2]
 8001308:	429a      	cmp	r2, r3
 800130a:	d104      	bne.n	8001316 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800130c:	887b      	ldrh	r3, [r7, #2]
 800130e:	041a      	lsls	r2, r3, #16
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001314:	e002      	b.n	800131c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001316:	887a      	ldrh	r2, [r7, #2]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	619a      	str	r2, [r3, #24]
}
 800131c:	bf00      	nop
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b086      	sub	sp, #24
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d101      	bne.n	800133a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e25b      	b.n	80017f2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 0301 	and.w	r3, r3, #1
 8001342:	2b00      	cmp	r3, #0
 8001344:	d075      	beq.n	8001432 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001346:	4ba3      	ldr	r3, [pc, #652]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	f003 030c 	and.w	r3, r3, #12
 800134e:	2b04      	cmp	r3, #4
 8001350:	d00c      	beq.n	800136c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001352:	4ba0      	ldr	r3, [pc, #640]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800135a:	2b08      	cmp	r3, #8
 800135c:	d112      	bne.n	8001384 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800135e:	4b9d      	ldr	r3, [pc, #628]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001366:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800136a:	d10b      	bne.n	8001384 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800136c:	4b99      	ldr	r3, [pc, #612]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001374:	2b00      	cmp	r3, #0
 8001376:	d05b      	beq.n	8001430 <HAL_RCC_OscConfig+0x108>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d157      	bne.n	8001430 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	e236      	b.n	80017f2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800138c:	d106      	bne.n	800139c <HAL_RCC_OscConfig+0x74>
 800138e:	4b91      	ldr	r3, [pc, #580]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a90      	ldr	r2, [pc, #576]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 8001394:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001398:	6013      	str	r3, [r2, #0]
 800139a:	e01d      	b.n	80013d8 <HAL_RCC_OscConfig+0xb0>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013a4:	d10c      	bne.n	80013c0 <HAL_RCC_OscConfig+0x98>
 80013a6:	4b8b      	ldr	r3, [pc, #556]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a8a      	ldr	r2, [pc, #552]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 80013ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013b0:	6013      	str	r3, [r2, #0]
 80013b2:	4b88      	ldr	r3, [pc, #544]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a87      	ldr	r2, [pc, #540]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 80013b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013bc:	6013      	str	r3, [r2, #0]
 80013be:	e00b      	b.n	80013d8 <HAL_RCC_OscConfig+0xb0>
 80013c0:	4b84      	ldr	r3, [pc, #528]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a83      	ldr	r2, [pc, #524]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 80013c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013ca:	6013      	str	r3, [r2, #0]
 80013cc:	4b81      	ldr	r3, [pc, #516]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a80      	ldr	r2, [pc, #512]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 80013d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d013      	beq.n	8001408 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e0:	f7ff fcfe 	bl	8000de0 <HAL_GetTick>
 80013e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013e6:	e008      	b.n	80013fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013e8:	f7ff fcfa 	bl	8000de0 <HAL_GetTick>
 80013ec:	4602      	mov	r2, r0
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	2b64      	cmp	r3, #100	; 0x64
 80013f4:	d901      	bls.n	80013fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e1fb      	b.n	80017f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013fa:	4b76      	ldr	r3, [pc, #472]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d0f0      	beq.n	80013e8 <HAL_RCC_OscConfig+0xc0>
 8001406:	e014      	b.n	8001432 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001408:	f7ff fcea 	bl	8000de0 <HAL_GetTick>
 800140c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800140e:	e008      	b.n	8001422 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001410:	f7ff fce6 	bl	8000de0 <HAL_GetTick>
 8001414:	4602      	mov	r2, r0
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	2b64      	cmp	r3, #100	; 0x64
 800141c:	d901      	bls.n	8001422 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800141e:	2303      	movs	r3, #3
 8001420:	e1e7      	b.n	80017f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001422:	4b6c      	ldr	r3, [pc, #432]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d1f0      	bne.n	8001410 <HAL_RCC_OscConfig+0xe8>
 800142e:	e000      	b.n	8001432 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001430:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	2b00      	cmp	r3, #0
 800143c:	d063      	beq.n	8001506 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800143e:	4b65      	ldr	r3, [pc, #404]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	f003 030c 	and.w	r3, r3, #12
 8001446:	2b00      	cmp	r3, #0
 8001448:	d00b      	beq.n	8001462 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800144a:	4b62      	ldr	r3, [pc, #392]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001452:	2b08      	cmp	r3, #8
 8001454:	d11c      	bne.n	8001490 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001456:	4b5f      	ldr	r3, [pc, #380]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d116      	bne.n	8001490 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001462:	4b5c      	ldr	r3, [pc, #368]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	2b00      	cmp	r3, #0
 800146c:	d005      	beq.n	800147a <HAL_RCC_OscConfig+0x152>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	68db      	ldr	r3, [r3, #12]
 8001472:	2b01      	cmp	r3, #1
 8001474:	d001      	beq.n	800147a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e1bb      	b.n	80017f2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800147a:	4b56      	ldr	r3, [pc, #344]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	691b      	ldr	r3, [r3, #16]
 8001486:	00db      	lsls	r3, r3, #3
 8001488:	4952      	ldr	r1, [pc, #328]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 800148a:	4313      	orrs	r3, r2
 800148c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800148e:	e03a      	b.n	8001506 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d020      	beq.n	80014da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001498:	4b4f      	ldr	r3, [pc, #316]	; (80015d8 <HAL_RCC_OscConfig+0x2b0>)
 800149a:	2201      	movs	r2, #1
 800149c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800149e:	f7ff fc9f 	bl	8000de0 <HAL_GetTick>
 80014a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014a4:	e008      	b.n	80014b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014a6:	f7ff fc9b 	bl	8000de0 <HAL_GetTick>
 80014aa:	4602      	mov	r2, r0
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d901      	bls.n	80014b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80014b4:	2303      	movs	r3, #3
 80014b6:	e19c      	b.n	80017f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014b8:	4b46      	ldr	r3, [pc, #280]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 0302 	and.w	r3, r3, #2
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d0f0      	beq.n	80014a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014c4:	4b43      	ldr	r3, [pc, #268]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	691b      	ldr	r3, [r3, #16]
 80014d0:	00db      	lsls	r3, r3, #3
 80014d2:	4940      	ldr	r1, [pc, #256]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 80014d4:	4313      	orrs	r3, r2
 80014d6:	600b      	str	r3, [r1, #0]
 80014d8:	e015      	b.n	8001506 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014da:	4b3f      	ldr	r3, [pc, #252]	; (80015d8 <HAL_RCC_OscConfig+0x2b0>)
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014e0:	f7ff fc7e 	bl	8000de0 <HAL_GetTick>
 80014e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014e6:	e008      	b.n	80014fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014e8:	f7ff fc7a 	bl	8000de0 <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e17b      	b.n	80017f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014fa:	4b36      	ldr	r3, [pc, #216]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 0302 	and.w	r3, r3, #2
 8001502:	2b00      	cmp	r3, #0
 8001504:	d1f0      	bne.n	80014e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 0308 	and.w	r3, r3, #8
 800150e:	2b00      	cmp	r3, #0
 8001510:	d030      	beq.n	8001574 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	695b      	ldr	r3, [r3, #20]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d016      	beq.n	8001548 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800151a:	4b30      	ldr	r3, [pc, #192]	; (80015dc <HAL_RCC_OscConfig+0x2b4>)
 800151c:	2201      	movs	r2, #1
 800151e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001520:	f7ff fc5e 	bl	8000de0 <HAL_GetTick>
 8001524:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001526:	e008      	b.n	800153a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001528:	f7ff fc5a 	bl	8000de0 <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	2b02      	cmp	r3, #2
 8001534:	d901      	bls.n	800153a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	e15b      	b.n	80017f2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800153a:	4b26      	ldr	r3, [pc, #152]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 800153c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800153e:	f003 0302 	and.w	r3, r3, #2
 8001542:	2b00      	cmp	r3, #0
 8001544:	d0f0      	beq.n	8001528 <HAL_RCC_OscConfig+0x200>
 8001546:	e015      	b.n	8001574 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001548:	4b24      	ldr	r3, [pc, #144]	; (80015dc <HAL_RCC_OscConfig+0x2b4>)
 800154a:	2200      	movs	r2, #0
 800154c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800154e:	f7ff fc47 	bl	8000de0 <HAL_GetTick>
 8001552:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001554:	e008      	b.n	8001568 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001556:	f7ff fc43 	bl	8000de0 <HAL_GetTick>
 800155a:	4602      	mov	r2, r0
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	2b02      	cmp	r3, #2
 8001562:	d901      	bls.n	8001568 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001564:	2303      	movs	r3, #3
 8001566:	e144      	b.n	80017f2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001568:	4b1a      	ldr	r3, [pc, #104]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 800156a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800156c:	f003 0302 	and.w	r3, r3, #2
 8001570:	2b00      	cmp	r3, #0
 8001572:	d1f0      	bne.n	8001556 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 0304 	and.w	r3, r3, #4
 800157c:	2b00      	cmp	r3, #0
 800157e:	f000 80a0 	beq.w	80016c2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001582:	2300      	movs	r3, #0
 8001584:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001586:	4b13      	ldr	r3, [pc, #76]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 8001588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d10f      	bne.n	80015b2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	60bb      	str	r3, [r7, #8]
 8001596:	4b0f      	ldr	r3, [pc, #60]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 8001598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159a:	4a0e      	ldr	r2, [pc, #56]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 800159c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015a0:	6413      	str	r3, [r2, #64]	; 0x40
 80015a2:	4b0c      	ldr	r3, [pc, #48]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 80015a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015aa:	60bb      	str	r3, [r7, #8]
 80015ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015ae:	2301      	movs	r3, #1
 80015b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015b2:	4b0b      	ldr	r3, [pc, #44]	; (80015e0 <HAL_RCC_OscConfig+0x2b8>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d121      	bne.n	8001602 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015be:	4b08      	ldr	r3, [pc, #32]	; (80015e0 <HAL_RCC_OscConfig+0x2b8>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a07      	ldr	r2, [pc, #28]	; (80015e0 <HAL_RCC_OscConfig+0x2b8>)
 80015c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015ca:	f7ff fc09 	bl	8000de0 <HAL_GetTick>
 80015ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015d0:	e011      	b.n	80015f6 <HAL_RCC_OscConfig+0x2ce>
 80015d2:	bf00      	nop
 80015d4:	40023800 	.word	0x40023800
 80015d8:	42470000 	.word	0x42470000
 80015dc:	42470e80 	.word	0x42470e80
 80015e0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015e4:	f7ff fbfc 	bl	8000de0 <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e0fd      	b.n	80017f2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015f6:	4b81      	ldr	r3, [pc, #516]	; (80017fc <HAL_RCC_OscConfig+0x4d4>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d0f0      	beq.n	80015e4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	2b01      	cmp	r3, #1
 8001608:	d106      	bne.n	8001618 <HAL_RCC_OscConfig+0x2f0>
 800160a:	4b7d      	ldr	r3, [pc, #500]	; (8001800 <HAL_RCC_OscConfig+0x4d8>)
 800160c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800160e:	4a7c      	ldr	r2, [pc, #496]	; (8001800 <HAL_RCC_OscConfig+0x4d8>)
 8001610:	f043 0301 	orr.w	r3, r3, #1
 8001614:	6713      	str	r3, [r2, #112]	; 0x70
 8001616:	e01c      	b.n	8001652 <HAL_RCC_OscConfig+0x32a>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	2b05      	cmp	r3, #5
 800161e:	d10c      	bne.n	800163a <HAL_RCC_OscConfig+0x312>
 8001620:	4b77      	ldr	r3, [pc, #476]	; (8001800 <HAL_RCC_OscConfig+0x4d8>)
 8001622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001624:	4a76      	ldr	r2, [pc, #472]	; (8001800 <HAL_RCC_OscConfig+0x4d8>)
 8001626:	f043 0304 	orr.w	r3, r3, #4
 800162a:	6713      	str	r3, [r2, #112]	; 0x70
 800162c:	4b74      	ldr	r3, [pc, #464]	; (8001800 <HAL_RCC_OscConfig+0x4d8>)
 800162e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001630:	4a73      	ldr	r2, [pc, #460]	; (8001800 <HAL_RCC_OscConfig+0x4d8>)
 8001632:	f043 0301 	orr.w	r3, r3, #1
 8001636:	6713      	str	r3, [r2, #112]	; 0x70
 8001638:	e00b      	b.n	8001652 <HAL_RCC_OscConfig+0x32a>
 800163a:	4b71      	ldr	r3, [pc, #452]	; (8001800 <HAL_RCC_OscConfig+0x4d8>)
 800163c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800163e:	4a70      	ldr	r2, [pc, #448]	; (8001800 <HAL_RCC_OscConfig+0x4d8>)
 8001640:	f023 0301 	bic.w	r3, r3, #1
 8001644:	6713      	str	r3, [r2, #112]	; 0x70
 8001646:	4b6e      	ldr	r3, [pc, #440]	; (8001800 <HAL_RCC_OscConfig+0x4d8>)
 8001648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800164a:	4a6d      	ldr	r2, [pc, #436]	; (8001800 <HAL_RCC_OscConfig+0x4d8>)
 800164c:	f023 0304 	bic.w	r3, r3, #4
 8001650:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d015      	beq.n	8001686 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800165a:	f7ff fbc1 	bl	8000de0 <HAL_GetTick>
 800165e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001660:	e00a      	b.n	8001678 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001662:	f7ff fbbd 	bl	8000de0 <HAL_GetTick>
 8001666:	4602      	mov	r2, r0
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001670:	4293      	cmp	r3, r2
 8001672:	d901      	bls.n	8001678 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001674:	2303      	movs	r3, #3
 8001676:	e0bc      	b.n	80017f2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001678:	4b61      	ldr	r3, [pc, #388]	; (8001800 <HAL_RCC_OscConfig+0x4d8>)
 800167a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800167c:	f003 0302 	and.w	r3, r3, #2
 8001680:	2b00      	cmp	r3, #0
 8001682:	d0ee      	beq.n	8001662 <HAL_RCC_OscConfig+0x33a>
 8001684:	e014      	b.n	80016b0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001686:	f7ff fbab 	bl	8000de0 <HAL_GetTick>
 800168a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800168c:	e00a      	b.n	80016a4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800168e:	f7ff fba7 	bl	8000de0 <HAL_GetTick>
 8001692:	4602      	mov	r2, r0
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	f241 3288 	movw	r2, #5000	; 0x1388
 800169c:	4293      	cmp	r3, r2
 800169e:	d901      	bls.n	80016a4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80016a0:	2303      	movs	r3, #3
 80016a2:	e0a6      	b.n	80017f2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016a4:	4b56      	ldr	r3, [pc, #344]	; (8001800 <HAL_RCC_OscConfig+0x4d8>)
 80016a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016a8:	f003 0302 	and.w	r3, r3, #2
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d1ee      	bne.n	800168e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016b0:	7dfb      	ldrb	r3, [r7, #23]
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d105      	bne.n	80016c2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016b6:	4b52      	ldr	r3, [pc, #328]	; (8001800 <HAL_RCC_OscConfig+0x4d8>)
 80016b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ba:	4a51      	ldr	r2, [pc, #324]	; (8001800 <HAL_RCC_OscConfig+0x4d8>)
 80016bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016c0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	699b      	ldr	r3, [r3, #24]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	f000 8092 	beq.w	80017f0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016cc:	4b4c      	ldr	r3, [pc, #304]	; (8001800 <HAL_RCC_OscConfig+0x4d8>)
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	f003 030c 	and.w	r3, r3, #12
 80016d4:	2b08      	cmp	r3, #8
 80016d6:	d05c      	beq.n	8001792 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d141      	bne.n	8001764 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016e0:	4b48      	ldr	r3, [pc, #288]	; (8001804 <HAL_RCC_OscConfig+0x4dc>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e6:	f7ff fb7b 	bl	8000de0 <HAL_GetTick>
 80016ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ec:	e008      	b.n	8001700 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016ee:	f7ff fb77 	bl	8000de0 <HAL_GetTick>
 80016f2:	4602      	mov	r2, r0
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d901      	bls.n	8001700 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80016fc:	2303      	movs	r3, #3
 80016fe:	e078      	b.n	80017f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001700:	4b3f      	ldr	r3, [pc, #252]	; (8001800 <HAL_RCC_OscConfig+0x4d8>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001708:	2b00      	cmp	r3, #0
 800170a:	d1f0      	bne.n	80016ee <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	69da      	ldr	r2, [r3, #28]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6a1b      	ldr	r3, [r3, #32]
 8001714:	431a      	orrs	r2, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171a:	019b      	lsls	r3, r3, #6
 800171c:	431a      	orrs	r2, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001722:	085b      	lsrs	r3, r3, #1
 8001724:	3b01      	subs	r3, #1
 8001726:	041b      	lsls	r3, r3, #16
 8001728:	431a      	orrs	r2, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800172e:	061b      	lsls	r3, r3, #24
 8001730:	4933      	ldr	r1, [pc, #204]	; (8001800 <HAL_RCC_OscConfig+0x4d8>)
 8001732:	4313      	orrs	r3, r2
 8001734:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001736:	4b33      	ldr	r3, [pc, #204]	; (8001804 <HAL_RCC_OscConfig+0x4dc>)
 8001738:	2201      	movs	r2, #1
 800173a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800173c:	f7ff fb50 	bl	8000de0 <HAL_GetTick>
 8001740:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001742:	e008      	b.n	8001756 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001744:	f7ff fb4c 	bl	8000de0 <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	2b02      	cmp	r3, #2
 8001750:	d901      	bls.n	8001756 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e04d      	b.n	80017f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001756:	4b2a      	ldr	r3, [pc, #168]	; (8001800 <HAL_RCC_OscConfig+0x4d8>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d0f0      	beq.n	8001744 <HAL_RCC_OscConfig+0x41c>
 8001762:	e045      	b.n	80017f0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001764:	4b27      	ldr	r3, [pc, #156]	; (8001804 <HAL_RCC_OscConfig+0x4dc>)
 8001766:	2200      	movs	r2, #0
 8001768:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800176a:	f7ff fb39 	bl	8000de0 <HAL_GetTick>
 800176e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001770:	e008      	b.n	8001784 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001772:	f7ff fb35 	bl	8000de0 <HAL_GetTick>
 8001776:	4602      	mov	r2, r0
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	2b02      	cmp	r3, #2
 800177e:	d901      	bls.n	8001784 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001780:	2303      	movs	r3, #3
 8001782:	e036      	b.n	80017f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001784:	4b1e      	ldr	r3, [pc, #120]	; (8001800 <HAL_RCC_OscConfig+0x4d8>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d1f0      	bne.n	8001772 <HAL_RCC_OscConfig+0x44a>
 8001790:	e02e      	b.n	80017f0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	699b      	ldr	r3, [r3, #24]
 8001796:	2b01      	cmp	r3, #1
 8001798:	d101      	bne.n	800179e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e029      	b.n	80017f2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800179e:	4b18      	ldr	r3, [pc, #96]	; (8001800 <HAL_RCC_OscConfig+0x4d8>)
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	69db      	ldr	r3, [r3, #28]
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d11c      	bne.n	80017ec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017bc:	429a      	cmp	r2, r3
 80017be:	d115      	bne.n	80017ec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80017c0:	68fa      	ldr	r2, [r7, #12]
 80017c2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80017c6:	4013      	ands	r3, r2
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d10d      	bne.n	80017ec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80017da:	429a      	cmp	r2, r3
 80017dc:	d106      	bne.n	80017ec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d001      	beq.n	80017f0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e000      	b.n	80017f2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80017f0:	2300      	movs	r3, #0
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3718      	adds	r7, #24
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	40007000 	.word	0x40007000
 8001800:	40023800 	.word	0x40023800
 8001804:	42470060 	.word	0x42470060

08001808 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d101      	bne.n	800181c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e0cc      	b.n	80019b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800181c:	4b68      	ldr	r3, [pc, #416]	; (80019c0 <HAL_RCC_ClockConfig+0x1b8>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 030f 	and.w	r3, r3, #15
 8001824:	683a      	ldr	r2, [r7, #0]
 8001826:	429a      	cmp	r2, r3
 8001828:	d90c      	bls.n	8001844 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800182a:	4b65      	ldr	r3, [pc, #404]	; (80019c0 <HAL_RCC_ClockConfig+0x1b8>)
 800182c:	683a      	ldr	r2, [r7, #0]
 800182e:	b2d2      	uxtb	r2, r2
 8001830:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001832:	4b63      	ldr	r3, [pc, #396]	; (80019c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 030f 	and.w	r3, r3, #15
 800183a:	683a      	ldr	r2, [r7, #0]
 800183c:	429a      	cmp	r2, r3
 800183e:	d001      	beq.n	8001844 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	e0b8      	b.n	80019b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0302 	and.w	r3, r3, #2
 800184c:	2b00      	cmp	r3, #0
 800184e:	d020      	beq.n	8001892 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0304 	and.w	r3, r3, #4
 8001858:	2b00      	cmp	r3, #0
 800185a:	d005      	beq.n	8001868 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800185c:	4b59      	ldr	r3, [pc, #356]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	4a58      	ldr	r2, [pc, #352]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001862:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001866:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0308 	and.w	r3, r3, #8
 8001870:	2b00      	cmp	r3, #0
 8001872:	d005      	beq.n	8001880 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001874:	4b53      	ldr	r3, [pc, #332]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	4a52      	ldr	r2, [pc, #328]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 800187a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800187e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001880:	4b50      	ldr	r3, [pc, #320]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	494d      	ldr	r1, [pc, #308]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 800188e:	4313      	orrs	r3, r2
 8001890:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	2b00      	cmp	r3, #0
 800189c:	d044      	beq.n	8001928 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d107      	bne.n	80018b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018a6:	4b47      	ldr	r3, [pc, #284]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d119      	bne.n	80018e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e07f      	b.n	80019b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d003      	beq.n	80018c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018c2:	2b03      	cmp	r3, #3
 80018c4:	d107      	bne.n	80018d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018c6:	4b3f      	ldr	r3, [pc, #252]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d109      	bne.n	80018e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e06f      	b.n	80019b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018d6:	4b3b      	ldr	r3, [pc, #236]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d101      	bne.n	80018e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e067      	b.n	80019b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018e6:	4b37      	ldr	r3, [pc, #220]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	f023 0203 	bic.w	r2, r3, #3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	4934      	ldr	r1, [pc, #208]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 80018f4:	4313      	orrs	r3, r2
 80018f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018f8:	f7ff fa72 	bl	8000de0 <HAL_GetTick>
 80018fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018fe:	e00a      	b.n	8001916 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001900:	f7ff fa6e 	bl	8000de0 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	f241 3288 	movw	r2, #5000	; 0x1388
 800190e:	4293      	cmp	r3, r2
 8001910:	d901      	bls.n	8001916 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e04f      	b.n	80019b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001916:	4b2b      	ldr	r3, [pc, #172]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	f003 020c 	and.w	r2, r3, #12
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	429a      	cmp	r2, r3
 8001926:	d1eb      	bne.n	8001900 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001928:	4b25      	ldr	r3, [pc, #148]	; (80019c0 <HAL_RCC_ClockConfig+0x1b8>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 030f 	and.w	r3, r3, #15
 8001930:	683a      	ldr	r2, [r7, #0]
 8001932:	429a      	cmp	r2, r3
 8001934:	d20c      	bcs.n	8001950 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001936:	4b22      	ldr	r3, [pc, #136]	; (80019c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001938:	683a      	ldr	r2, [r7, #0]
 800193a:	b2d2      	uxtb	r2, r2
 800193c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800193e:	4b20      	ldr	r3, [pc, #128]	; (80019c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 030f 	and.w	r3, r3, #15
 8001946:	683a      	ldr	r2, [r7, #0]
 8001948:	429a      	cmp	r2, r3
 800194a:	d001      	beq.n	8001950 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e032      	b.n	80019b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0304 	and.w	r3, r3, #4
 8001958:	2b00      	cmp	r3, #0
 800195a:	d008      	beq.n	800196e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800195c:	4b19      	ldr	r3, [pc, #100]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	4916      	ldr	r1, [pc, #88]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 800196a:	4313      	orrs	r3, r2
 800196c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0308 	and.w	r3, r3, #8
 8001976:	2b00      	cmp	r3, #0
 8001978:	d009      	beq.n	800198e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800197a:	4b12      	ldr	r3, [pc, #72]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	691b      	ldr	r3, [r3, #16]
 8001986:	00db      	lsls	r3, r3, #3
 8001988:	490e      	ldr	r1, [pc, #56]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 800198a:	4313      	orrs	r3, r2
 800198c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800198e:	f000 f821 	bl	80019d4 <HAL_RCC_GetSysClockFreq>
 8001992:	4601      	mov	r1, r0
 8001994:	4b0b      	ldr	r3, [pc, #44]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	091b      	lsrs	r3, r3, #4
 800199a:	f003 030f 	and.w	r3, r3, #15
 800199e:	4a0a      	ldr	r2, [pc, #40]	; (80019c8 <HAL_RCC_ClockConfig+0x1c0>)
 80019a0:	5cd3      	ldrb	r3, [r2, r3]
 80019a2:	fa21 f303 	lsr.w	r3, r1, r3
 80019a6:	4a09      	ldr	r2, [pc, #36]	; (80019cc <HAL_RCC_ClockConfig+0x1c4>)
 80019a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80019aa:	4b09      	ldr	r3, [pc, #36]	; (80019d0 <HAL_RCC_ClockConfig+0x1c8>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7ff f8f2 	bl	8000b98 <HAL_InitTick>

  return HAL_OK;
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3710      	adds	r7, #16
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40023c00 	.word	0x40023c00
 80019c4:	40023800 	.word	0x40023800
 80019c8:	08005860 	.word	0x08005860
 80019cc:	20000000 	.word	0x20000000
 80019d0:	20000004 	.word	0x20000004

080019d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019d6:	b085      	sub	sp, #20
 80019d8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80019da:	2300      	movs	r3, #0
 80019dc:	607b      	str	r3, [r7, #4]
 80019de:	2300      	movs	r3, #0
 80019e0:	60fb      	str	r3, [r7, #12]
 80019e2:	2300      	movs	r3, #0
 80019e4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80019e6:	2300      	movs	r3, #0
 80019e8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019ea:	4b63      	ldr	r3, [pc, #396]	; (8001b78 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f003 030c 	and.w	r3, r3, #12
 80019f2:	2b04      	cmp	r3, #4
 80019f4:	d007      	beq.n	8001a06 <HAL_RCC_GetSysClockFreq+0x32>
 80019f6:	2b08      	cmp	r3, #8
 80019f8:	d008      	beq.n	8001a0c <HAL_RCC_GetSysClockFreq+0x38>
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	f040 80b4 	bne.w	8001b68 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a00:	4b5e      	ldr	r3, [pc, #376]	; (8001b7c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001a02:	60bb      	str	r3, [r7, #8]
       break;
 8001a04:	e0b3      	b.n	8001b6e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a06:	4b5e      	ldr	r3, [pc, #376]	; (8001b80 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001a08:	60bb      	str	r3, [r7, #8]
      break;
 8001a0a:	e0b0      	b.n	8001b6e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a0c:	4b5a      	ldr	r3, [pc, #360]	; (8001b78 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a14:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a16:	4b58      	ldr	r3, [pc, #352]	; (8001b78 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d04a      	beq.n	8001ab8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a22:	4b55      	ldr	r3, [pc, #340]	; (8001b78 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	099b      	lsrs	r3, r3, #6
 8001a28:	f04f 0400 	mov.w	r4, #0
 8001a2c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001a30:	f04f 0200 	mov.w	r2, #0
 8001a34:	ea03 0501 	and.w	r5, r3, r1
 8001a38:	ea04 0602 	and.w	r6, r4, r2
 8001a3c:	4629      	mov	r1, r5
 8001a3e:	4632      	mov	r2, r6
 8001a40:	f04f 0300 	mov.w	r3, #0
 8001a44:	f04f 0400 	mov.w	r4, #0
 8001a48:	0154      	lsls	r4, r2, #5
 8001a4a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001a4e:	014b      	lsls	r3, r1, #5
 8001a50:	4619      	mov	r1, r3
 8001a52:	4622      	mov	r2, r4
 8001a54:	1b49      	subs	r1, r1, r5
 8001a56:	eb62 0206 	sbc.w	r2, r2, r6
 8001a5a:	f04f 0300 	mov.w	r3, #0
 8001a5e:	f04f 0400 	mov.w	r4, #0
 8001a62:	0194      	lsls	r4, r2, #6
 8001a64:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001a68:	018b      	lsls	r3, r1, #6
 8001a6a:	1a5b      	subs	r3, r3, r1
 8001a6c:	eb64 0402 	sbc.w	r4, r4, r2
 8001a70:	f04f 0100 	mov.w	r1, #0
 8001a74:	f04f 0200 	mov.w	r2, #0
 8001a78:	00e2      	lsls	r2, r4, #3
 8001a7a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001a7e:	00d9      	lsls	r1, r3, #3
 8001a80:	460b      	mov	r3, r1
 8001a82:	4614      	mov	r4, r2
 8001a84:	195b      	adds	r3, r3, r5
 8001a86:	eb44 0406 	adc.w	r4, r4, r6
 8001a8a:	f04f 0100 	mov.w	r1, #0
 8001a8e:	f04f 0200 	mov.w	r2, #0
 8001a92:	0262      	lsls	r2, r4, #9
 8001a94:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001a98:	0259      	lsls	r1, r3, #9
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	4614      	mov	r4, r2
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	4621      	mov	r1, r4
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	f04f 0400 	mov.w	r4, #0
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	4623      	mov	r3, r4
 8001aac:	f7fe fbf0 	bl	8000290 <__aeabi_uldivmod>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	460c      	mov	r4, r1
 8001ab4:	60fb      	str	r3, [r7, #12]
 8001ab6:	e049      	b.n	8001b4c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ab8:	4b2f      	ldr	r3, [pc, #188]	; (8001b78 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	099b      	lsrs	r3, r3, #6
 8001abe:	f04f 0400 	mov.w	r4, #0
 8001ac2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001ac6:	f04f 0200 	mov.w	r2, #0
 8001aca:	ea03 0501 	and.w	r5, r3, r1
 8001ace:	ea04 0602 	and.w	r6, r4, r2
 8001ad2:	4629      	mov	r1, r5
 8001ad4:	4632      	mov	r2, r6
 8001ad6:	f04f 0300 	mov.w	r3, #0
 8001ada:	f04f 0400 	mov.w	r4, #0
 8001ade:	0154      	lsls	r4, r2, #5
 8001ae0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001ae4:	014b      	lsls	r3, r1, #5
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	4622      	mov	r2, r4
 8001aea:	1b49      	subs	r1, r1, r5
 8001aec:	eb62 0206 	sbc.w	r2, r2, r6
 8001af0:	f04f 0300 	mov.w	r3, #0
 8001af4:	f04f 0400 	mov.w	r4, #0
 8001af8:	0194      	lsls	r4, r2, #6
 8001afa:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001afe:	018b      	lsls	r3, r1, #6
 8001b00:	1a5b      	subs	r3, r3, r1
 8001b02:	eb64 0402 	sbc.w	r4, r4, r2
 8001b06:	f04f 0100 	mov.w	r1, #0
 8001b0a:	f04f 0200 	mov.w	r2, #0
 8001b0e:	00e2      	lsls	r2, r4, #3
 8001b10:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001b14:	00d9      	lsls	r1, r3, #3
 8001b16:	460b      	mov	r3, r1
 8001b18:	4614      	mov	r4, r2
 8001b1a:	195b      	adds	r3, r3, r5
 8001b1c:	eb44 0406 	adc.w	r4, r4, r6
 8001b20:	f04f 0100 	mov.w	r1, #0
 8001b24:	f04f 0200 	mov.w	r2, #0
 8001b28:	02a2      	lsls	r2, r4, #10
 8001b2a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001b2e:	0299      	lsls	r1, r3, #10
 8001b30:	460b      	mov	r3, r1
 8001b32:	4614      	mov	r4, r2
 8001b34:	4618      	mov	r0, r3
 8001b36:	4621      	mov	r1, r4
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f04f 0400 	mov.w	r4, #0
 8001b3e:	461a      	mov	r2, r3
 8001b40:	4623      	mov	r3, r4
 8001b42:	f7fe fba5 	bl	8000290 <__aeabi_uldivmod>
 8001b46:	4603      	mov	r3, r0
 8001b48:	460c      	mov	r4, r1
 8001b4a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b4c:	4b0a      	ldr	r3, [pc, #40]	; (8001b78 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	0c1b      	lsrs	r3, r3, #16
 8001b52:	f003 0303 	and.w	r3, r3, #3
 8001b56:	3301      	adds	r3, #1
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001b5c:	68fa      	ldr	r2, [r7, #12]
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b64:	60bb      	str	r3, [r7, #8]
      break;
 8001b66:	e002      	b.n	8001b6e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b68:	4b04      	ldr	r3, [pc, #16]	; (8001b7c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001b6a:	60bb      	str	r3, [r7, #8]
      break;
 8001b6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b6e:	68bb      	ldr	r3, [r7, #8]
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3714      	adds	r7, #20
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b78:	40023800 	.word	0x40023800
 8001b7c:	00f42400 	.word	0x00f42400
 8001b80:	007a1200 	.word	0x007a1200

08001b84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b88:	4b03      	ldr	r3, [pc, #12]	; (8001b98 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	20000000 	.word	0x20000000

08001b9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ba0:	f7ff fff0 	bl	8001b84 <HAL_RCC_GetHCLKFreq>
 8001ba4:	4601      	mov	r1, r0
 8001ba6:	4b05      	ldr	r3, [pc, #20]	; (8001bbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	0a9b      	lsrs	r3, r3, #10
 8001bac:	f003 0307 	and.w	r3, r3, #7
 8001bb0:	4a03      	ldr	r2, [pc, #12]	; (8001bc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bb2:	5cd3      	ldrb	r3, [r2, r3]
 8001bb4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	40023800 	.word	0x40023800
 8001bc0:	08005870 	.word	0x08005870

08001bc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001bc8:	f7ff ffdc 	bl	8001b84 <HAL_RCC_GetHCLKFreq>
 8001bcc:	4601      	mov	r1, r0
 8001bce:	4b05      	ldr	r3, [pc, #20]	; (8001be4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	0b5b      	lsrs	r3, r3, #13
 8001bd4:	f003 0307 	and.w	r3, r3, #7
 8001bd8:	4a03      	ldr	r2, [pc, #12]	; (8001be8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bda:	5cd3      	ldrb	r3, [r2, r3]
 8001bdc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	40023800 	.word	0x40023800
 8001be8:	08005870 	.word	0x08005870

08001bec <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	220f      	movs	r2, #15
 8001bfa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001bfc:	4b12      	ldr	r3, [pc, #72]	; (8001c48 <HAL_RCC_GetClockConfig+0x5c>)
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	f003 0203 	and.w	r2, r3, #3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c08:	4b0f      	ldr	r3, [pc, #60]	; (8001c48 <HAL_RCC_GetClockConfig+0x5c>)
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c14:	4b0c      	ldr	r3, [pc, #48]	; (8001c48 <HAL_RCC_GetClockConfig+0x5c>)
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001c20:	4b09      	ldr	r3, [pc, #36]	; (8001c48 <HAL_RCC_GetClockConfig+0x5c>)
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	08db      	lsrs	r3, r3, #3
 8001c26:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c2e:	4b07      	ldr	r3, [pc, #28]	; (8001c4c <HAL_RCC_GetClockConfig+0x60>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 020f 	and.w	r2, r3, #15
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	601a      	str	r2, [r3, #0]
}
 8001c3a:	bf00      	nop
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	40023800 	.word	0x40023800
 8001c4c:	40023c00 	.word	0x40023c00

08001c50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d101      	bne.n	8001c62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e01d      	b.n	8001c9e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d106      	bne.n	8001c7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f000 f815 	bl	8001ca6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2202      	movs	r2, #2
 8001c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	3304      	adds	r3, #4
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4610      	mov	r0, r2
 8001c90:	f000 f968 	bl	8001f64 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2201      	movs	r2, #1
 8001c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	b083      	sub	sp, #12
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001cae:	bf00      	nop
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr

08001cba <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	b085      	sub	sp, #20
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	68da      	ldr	r2, [r3, #12]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f042 0201 	orr.w	r2, r2, #1
 8001cd0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	f003 0307 	and.w	r3, r3, #7
 8001cdc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2b06      	cmp	r3, #6
 8001ce2:	d007      	beq.n	8001cf4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f042 0201 	orr.w	r2, r2, #1
 8001cf2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3714      	adds	r7, #20
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr

08001d02 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b082      	sub	sp, #8
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	691b      	ldr	r3, [r3, #16]
 8001d10:	f003 0302 	and.w	r3, r3, #2
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d122      	bne.n	8001d5e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	68db      	ldr	r3, [r3, #12]
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d11b      	bne.n	8001d5e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f06f 0202 	mvn.w	r2, #2
 8001d2e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2201      	movs	r2, #1
 8001d34:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	699b      	ldr	r3, [r3, #24]
 8001d3c:	f003 0303 	and.w	r3, r3, #3
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d003      	beq.n	8001d4c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f000 f8ee 	bl	8001f26 <HAL_TIM_IC_CaptureCallback>
 8001d4a:	e005      	b.n	8001d58 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f000 f8e0 	bl	8001f12 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f000 f8f1 	bl	8001f3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	691b      	ldr	r3, [r3, #16]
 8001d64:	f003 0304 	and.w	r3, r3, #4
 8001d68:	2b04      	cmp	r3, #4
 8001d6a:	d122      	bne.n	8001db2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	68db      	ldr	r3, [r3, #12]
 8001d72:	f003 0304 	and.w	r3, r3, #4
 8001d76:	2b04      	cmp	r3, #4
 8001d78:	d11b      	bne.n	8001db2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f06f 0204 	mvn.w	r2, #4
 8001d82:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2202      	movs	r2, #2
 8001d88:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	699b      	ldr	r3, [r3, #24]
 8001d90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d003      	beq.n	8001da0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f000 f8c4 	bl	8001f26 <HAL_TIM_IC_CaptureCallback>
 8001d9e:	e005      	b.n	8001dac <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f000 f8b6 	bl	8001f12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f000 f8c7 	bl	8001f3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	691b      	ldr	r3, [r3, #16]
 8001db8:	f003 0308 	and.w	r3, r3, #8
 8001dbc:	2b08      	cmp	r3, #8
 8001dbe:	d122      	bne.n	8001e06 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	f003 0308 	and.w	r3, r3, #8
 8001dca:	2b08      	cmp	r3, #8
 8001dcc:	d11b      	bne.n	8001e06 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f06f 0208 	mvn.w	r2, #8
 8001dd6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2204      	movs	r2, #4
 8001ddc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	69db      	ldr	r3, [r3, #28]
 8001de4:	f003 0303 	and.w	r3, r3, #3
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d003      	beq.n	8001df4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f000 f89a 	bl	8001f26 <HAL_TIM_IC_CaptureCallback>
 8001df2:	e005      	b.n	8001e00 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f000 f88c 	bl	8001f12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f000 f89d 	bl	8001f3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	691b      	ldr	r3, [r3, #16]
 8001e0c:	f003 0310 	and.w	r3, r3, #16
 8001e10:	2b10      	cmp	r3, #16
 8001e12:	d122      	bne.n	8001e5a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	68db      	ldr	r3, [r3, #12]
 8001e1a:	f003 0310 	and.w	r3, r3, #16
 8001e1e:	2b10      	cmp	r3, #16
 8001e20:	d11b      	bne.n	8001e5a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f06f 0210 	mvn.w	r2, #16
 8001e2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2208      	movs	r2, #8
 8001e30:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	69db      	ldr	r3, [r3, #28]
 8001e38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d003      	beq.n	8001e48 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f000 f870 	bl	8001f26 <HAL_TIM_IC_CaptureCallback>
 8001e46:	e005      	b.n	8001e54 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f000 f862 	bl	8001f12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f000 f873 	bl	8001f3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	691b      	ldr	r3, [r3, #16]
 8001e60:	f003 0301 	and.w	r3, r3, #1
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d10e      	bne.n	8001e86 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	68db      	ldr	r3, [r3, #12]
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d107      	bne.n	8001e86 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f06f 0201 	mvn.w	r2, #1
 8001e7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f7fe fdff 	bl	8000a84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	691b      	ldr	r3, [r3, #16]
 8001e8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e90:	2b80      	cmp	r3, #128	; 0x80
 8001e92:	d10e      	bne.n	8001eb2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e9e:	2b80      	cmp	r3, #128	; 0x80
 8001ea0:	d107      	bne.n	8001eb2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001eaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f000 f8e3 	bl	8002078 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	691b      	ldr	r3, [r3, #16]
 8001eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ebc:	2b40      	cmp	r3, #64	; 0x40
 8001ebe:	d10e      	bne.n	8001ede <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	68db      	ldr	r3, [r3, #12]
 8001ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eca:	2b40      	cmp	r3, #64	; 0x40
 8001ecc:	d107      	bne.n	8001ede <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001ed6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f000 f838 	bl	8001f4e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	691b      	ldr	r3, [r3, #16]
 8001ee4:	f003 0320 	and.w	r3, r3, #32
 8001ee8:	2b20      	cmp	r3, #32
 8001eea:	d10e      	bne.n	8001f0a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	f003 0320 	and.w	r3, r3, #32
 8001ef6:	2b20      	cmp	r3, #32
 8001ef8:	d107      	bne.n	8001f0a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f06f 0220 	mvn.w	r2, #32
 8001f02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f000 f8ad 	bl	8002064 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f0a:	bf00      	nop
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f12:	b480      	push	{r7}
 8001f14:	b083      	sub	sp, #12
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f1a:	bf00      	nop
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr

08001f26 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f26:	b480      	push	{r7}
 8001f28:	b083      	sub	sp, #12
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f2e:	bf00      	nop
 8001f30:	370c      	adds	r7, #12
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr

08001f3a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	b083      	sub	sp, #12
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f42:	bf00      	nop
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr

08001f4e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	b083      	sub	sp, #12
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f56:	bf00      	nop
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
	...

08001f64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b085      	sub	sp, #20
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4a34      	ldr	r2, [pc, #208]	; (8002048 <TIM_Base_SetConfig+0xe4>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d00f      	beq.n	8001f9c <TIM_Base_SetConfig+0x38>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f82:	d00b      	beq.n	8001f9c <TIM_Base_SetConfig+0x38>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	4a31      	ldr	r2, [pc, #196]	; (800204c <TIM_Base_SetConfig+0xe8>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d007      	beq.n	8001f9c <TIM_Base_SetConfig+0x38>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4a30      	ldr	r2, [pc, #192]	; (8002050 <TIM_Base_SetConfig+0xec>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d003      	beq.n	8001f9c <TIM_Base_SetConfig+0x38>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	4a2f      	ldr	r2, [pc, #188]	; (8002054 <TIM_Base_SetConfig+0xf0>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d108      	bne.n	8001fae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fa2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	68fa      	ldr	r2, [r7, #12]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a25      	ldr	r2, [pc, #148]	; (8002048 <TIM_Base_SetConfig+0xe4>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d01b      	beq.n	8001fee <TIM_Base_SetConfig+0x8a>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fbc:	d017      	beq.n	8001fee <TIM_Base_SetConfig+0x8a>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a22      	ldr	r2, [pc, #136]	; (800204c <TIM_Base_SetConfig+0xe8>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d013      	beq.n	8001fee <TIM_Base_SetConfig+0x8a>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a21      	ldr	r2, [pc, #132]	; (8002050 <TIM_Base_SetConfig+0xec>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d00f      	beq.n	8001fee <TIM_Base_SetConfig+0x8a>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a20      	ldr	r2, [pc, #128]	; (8002054 <TIM_Base_SetConfig+0xf0>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d00b      	beq.n	8001fee <TIM_Base_SetConfig+0x8a>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a1f      	ldr	r2, [pc, #124]	; (8002058 <TIM_Base_SetConfig+0xf4>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d007      	beq.n	8001fee <TIM_Base_SetConfig+0x8a>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a1e      	ldr	r2, [pc, #120]	; (800205c <TIM_Base_SetConfig+0xf8>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d003      	beq.n	8001fee <TIM_Base_SetConfig+0x8a>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a1d      	ldr	r2, [pc, #116]	; (8002060 <TIM_Base_SetConfig+0xfc>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d108      	bne.n	8002000 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ff4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	68fa      	ldr	r2, [r7, #12]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	695b      	ldr	r3, [r3, #20]
 800200a:	4313      	orrs	r3, r2
 800200c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	68fa      	ldr	r2, [r7, #12]
 8002012:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	689a      	ldr	r2, [r3, #8]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4a08      	ldr	r2, [pc, #32]	; (8002048 <TIM_Base_SetConfig+0xe4>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d103      	bne.n	8002034 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	691a      	ldr	r2, [r3, #16]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2201      	movs	r2, #1
 8002038:	615a      	str	r2, [r3, #20]
}
 800203a:	bf00      	nop
 800203c:	3714      	adds	r7, #20
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	40010000 	.word	0x40010000
 800204c:	40000400 	.word	0x40000400
 8002050:	40000800 	.word	0x40000800
 8002054:	40000c00 	.word	0x40000c00
 8002058:	40014000 	.word	0x40014000
 800205c:	40014400 	.word	0x40014400
 8002060:	40014800 	.word	0x40014800

08002064 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800206c:	bf00      	nop
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d101      	bne.n	800209e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e03f      	b.n	800211e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d106      	bne.n	80020b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f7fe fd28 	bl	8000b08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2224      	movs	r2, #36	; 0x24
 80020bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	68da      	ldr	r2, [r3, #12]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80020ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f000 f90b 	bl	80022ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	691a      	ldr	r2, [r3, #16]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80020e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	695a      	ldr	r2, [r3, #20]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80020f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	68da      	ldr	r2, [r3, #12]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002104:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2220      	movs	r2, #32
 8002110:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2220      	movs	r2, #32
 8002118:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}

08002126 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002126:	b580      	push	{r7, lr}
 8002128:	b088      	sub	sp, #32
 800212a:	af02      	add	r7, sp, #8
 800212c:	60f8      	str	r0, [r7, #12]
 800212e:	60b9      	str	r1, [r7, #8]
 8002130:	603b      	str	r3, [r7, #0]
 8002132:	4613      	mov	r3, r2
 8002134:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002136:	2300      	movs	r3, #0
 8002138:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002140:	b2db      	uxtb	r3, r3
 8002142:	2b20      	cmp	r3, #32
 8002144:	f040 8083 	bne.w	800224e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d002      	beq.n	8002154 <HAL_UART_Transmit+0x2e>
 800214e:	88fb      	ldrh	r3, [r7, #6]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d101      	bne.n	8002158 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e07b      	b.n	8002250 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800215e:	2b01      	cmp	r3, #1
 8002160:	d101      	bne.n	8002166 <HAL_UART_Transmit+0x40>
 8002162:	2302      	movs	r3, #2
 8002164:	e074      	b.n	8002250 <HAL_UART_Transmit+0x12a>
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2201      	movs	r2, #1
 800216a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2200      	movs	r2, #0
 8002172:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2221      	movs	r2, #33	; 0x21
 8002178:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800217c:	f7fe fe30 	bl	8000de0 <HAL_GetTick>
 8002180:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	88fa      	ldrh	r2, [r7, #6]
 8002186:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	88fa      	ldrh	r2, [r7, #6]
 800218c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2200      	movs	r2, #0
 8002192:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002196:	e042      	b.n	800221e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800219c:	b29b      	uxth	r3, r3
 800219e:	3b01      	subs	r3, #1
 80021a0:	b29a      	uxth	r2, r3
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021ae:	d122      	bne.n	80021f6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	9300      	str	r3, [sp, #0]
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	2200      	movs	r2, #0
 80021b8:	2180      	movs	r1, #128	; 0x80
 80021ba:	68f8      	ldr	r0, [r7, #12]
 80021bc:	f000 f84c 	bl	8002258 <UART_WaitOnFlagUntilTimeout>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e042      	b.n	8002250 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	881b      	ldrh	r3, [r3, #0]
 80021d2:	461a      	mov	r2, r3
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80021dc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	691b      	ldr	r3, [r3, #16]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d103      	bne.n	80021ee <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	3302      	adds	r3, #2
 80021ea:	60bb      	str	r3, [r7, #8]
 80021ec:	e017      	b.n	800221e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	3301      	adds	r3, #1
 80021f2:	60bb      	str	r3, [r7, #8]
 80021f4:	e013      	b.n	800221e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	9300      	str	r3, [sp, #0]
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	2200      	movs	r2, #0
 80021fe:	2180      	movs	r1, #128	; 0x80
 8002200:	68f8      	ldr	r0, [r7, #12]
 8002202:	f000 f829 	bl	8002258 <UART_WaitOnFlagUntilTimeout>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d001      	beq.n	8002210 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e01f      	b.n	8002250 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	1c5a      	adds	r2, r3, #1
 8002214:	60ba      	str	r2, [r7, #8]
 8002216:	781a      	ldrb	r2, [r3, #0]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002222:	b29b      	uxth	r3, r3
 8002224:	2b00      	cmp	r3, #0
 8002226:	d1b7      	bne.n	8002198 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	9300      	str	r3, [sp, #0]
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	2200      	movs	r2, #0
 8002230:	2140      	movs	r1, #64	; 0x40
 8002232:	68f8      	ldr	r0, [r7, #12]
 8002234:	f000 f810 	bl	8002258 <UART_WaitOnFlagUntilTimeout>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e006      	b.n	8002250 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2220      	movs	r2, #32
 8002246:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800224a:	2300      	movs	r3, #0
 800224c:	e000      	b.n	8002250 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800224e:	2302      	movs	r3, #2
  }
}
 8002250:	4618      	mov	r0, r3
 8002252:	3718      	adds	r7, #24
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}

08002258 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	60b9      	str	r1, [r7, #8]
 8002262:	603b      	str	r3, [r7, #0]
 8002264:	4613      	mov	r3, r2
 8002266:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002268:	e02c      	b.n	80022c4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002270:	d028      	beq.n	80022c4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d007      	beq.n	8002288 <UART_WaitOnFlagUntilTimeout+0x30>
 8002278:	f7fe fdb2 	bl	8000de0 <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	69ba      	ldr	r2, [r7, #24]
 8002284:	429a      	cmp	r2, r3
 8002286:	d21d      	bcs.n	80022c4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	68da      	ldr	r2, [r3, #12]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002296:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	695a      	ldr	r2, [r3, #20]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f022 0201 	bic.w	r2, r2, #1
 80022a6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2220      	movs	r2, #32
 80022ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2220      	movs	r2, #32
 80022b4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2200      	movs	r2, #0
 80022bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e00f      	b.n	80022e4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	4013      	ands	r3, r2
 80022ce:	68ba      	ldr	r2, [r7, #8]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	bf0c      	ite	eq
 80022d4:	2301      	moveq	r3, #1
 80022d6:	2300      	movne	r3, #0
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	461a      	mov	r2, r3
 80022dc:	79fb      	ldrb	r3, [r7, #7]
 80022de:	429a      	cmp	r2, r3
 80022e0:	d0c3      	beq.n	800226a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80022e2:	2300      	movs	r3, #0
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3710      	adds	r7, #16
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80022ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022f0:	b085      	sub	sp, #20
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	691b      	ldr	r3, [r3, #16]
 80022fc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	68da      	ldr	r2, [r3, #12]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	430a      	orrs	r2, r1
 800230a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	689a      	ldr	r2, [r3, #8]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	691b      	ldr	r3, [r3, #16]
 8002314:	431a      	orrs	r2, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	695b      	ldr	r3, [r3, #20]
 800231a:	431a      	orrs	r2, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	69db      	ldr	r3, [r3, #28]
 8002320:	4313      	orrs	r3, r2
 8002322:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800232e:	f023 030c 	bic.w	r3, r3, #12
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	6812      	ldr	r2, [r2, #0]
 8002336:	68f9      	ldr	r1, [r7, #12]
 8002338:	430b      	orrs	r3, r1
 800233a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	695b      	ldr	r3, [r3, #20]
 8002342:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	699a      	ldr	r2, [r3, #24]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	430a      	orrs	r2, r1
 8002350:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	69db      	ldr	r3, [r3, #28]
 8002356:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800235a:	f040 818b 	bne.w	8002674 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4ac1      	ldr	r2, [pc, #772]	; (8002668 <UART_SetConfig+0x37c>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d005      	beq.n	8002374 <UART_SetConfig+0x88>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4abf      	ldr	r2, [pc, #764]	; (800266c <UART_SetConfig+0x380>)
 800236e:	4293      	cmp	r3, r2
 8002370:	f040 80bd 	bne.w	80024ee <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002374:	f7ff fc26 	bl	8001bc4 <HAL_RCC_GetPCLK2Freq>
 8002378:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	461d      	mov	r5, r3
 800237e:	f04f 0600 	mov.w	r6, #0
 8002382:	46a8      	mov	r8, r5
 8002384:	46b1      	mov	r9, r6
 8002386:	eb18 0308 	adds.w	r3, r8, r8
 800238a:	eb49 0409 	adc.w	r4, r9, r9
 800238e:	4698      	mov	r8, r3
 8002390:	46a1      	mov	r9, r4
 8002392:	eb18 0805 	adds.w	r8, r8, r5
 8002396:	eb49 0906 	adc.w	r9, r9, r6
 800239a:	f04f 0100 	mov.w	r1, #0
 800239e:	f04f 0200 	mov.w	r2, #0
 80023a2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80023a6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80023aa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80023ae:	4688      	mov	r8, r1
 80023b0:	4691      	mov	r9, r2
 80023b2:	eb18 0005 	adds.w	r0, r8, r5
 80023b6:	eb49 0106 	adc.w	r1, r9, r6
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	461d      	mov	r5, r3
 80023c0:	f04f 0600 	mov.w	r6, #0
 80023c4:	196b      	adds	r3, r5, r5
 80023c6:	eb46 0406 	adc.w	r4, r6, r6
 80023ca:	461a      	mov	r2, r3
 80023cc:	4623      	mov	r3, r4
 80023ce:	f7fd ff5f 	bl	8000290 <__aeabi_uldivmod>
 80023d2:	4603      	mov	r3, r0
 80023d4:	460c      	mov	r4, r1
 80023d6:	461a      	mov	r2, r3
 80023d8:	4ba5      	ldr	r3, [pc, #660]	; (8002670 <UART_SetConfig+0x384>)
 80023da:	fba3 2302 	umull	r2, r3, r3, r2
 80023de:	095b      	lsrs	r3, r3, #5
 80023e0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	461d      	mov	r5, r3
 80023e8:	f04f 0600 	mov.w	r6, #0
 80023ec:	46a9      	mov	r9, r5
 80023ee:	46b2      	mov	sl, r6
 80023f0:	eb19 0309 	adds.w	r3, r9, r9
 80023f4:	eb4a 040a 	adc.w	r4, sl, sl
 80023f8:	4699      	mov	r9, r3
 80023fa:	46a2      	mov	sl, r4
 80023fc:	eb19 0905 	adds.w	r9, r9, r5
 8002400:	eb4a 0a06 	adc.w	sl, sl, r6
 8002404:	f04f 0100 	mov.w	r1, #0
 8002408:	f04f 0200 	mov.w	r2, #0
 800240c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002410:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002414:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002418:	4689      	mov	r9, r1
 800241a:	4692      	mov	sl, r2
 800241c:	eb19 0005 	adds.w	r0, r9, r5
 8002420:	eb4a 0106 	adc.w	r1, sl, r6
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	461d      	mov	r5, r3
 800242a:	f04f 0600 	mov.w	r6, #0
 800242e:	196b      	adds	r3, r5, r5
 8002430:	eb46 0406 	adc.w	r4, r6, r6
 8002434:	461a      	mov	r2, r3
 8002436:	4623      	mov	r3, r4
 8002438:	f7fd ff2a 	bl	8000290 <__aeabi_uldivmod>
 800243c:	4603      	mov	r3, r0
 800243e:	460c      	mov	r4, r1
 8002440:	461a      	mov	r2, r3
 8002442:	4b8b      	ldr	r3, [pc, #556]	; (8002670 <UART_SetConfig+0x384>)
 8002444:	fba3 1302 	umull	r1, r3, r3, r2
 8002448:	095b      	lsrs	r3, r3, #5
 800244a:	2164      	movs	r1, #100	; 0x64
 800244c:	fb01 f303 	mul.w	r3, r1, r3
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	00db      	lsls	r3, r3, #3
 8002454:	3332      	adds	r3, #50	; 0x32
 8002456:	4a86      	ldr	r2, [pc, #536]	; (8002670 <UART_SetConfig+0x384>)
 8002458:	fba2 2303 	umull	r2, r3, r2, r3
 800245c:	095b      	lsrs	r3, r3, #5
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002464:	4498      	add	r8, r3
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	461d      	mov	r5, r3
 800246a:	f04f 0600 	mov.w	r6, #0
 800246e:	46a9      	mov	r9, r5
 8002470:	46b2      	mov	sl, r6
 8002472:	eb19 0309 	adds.w	r3, r9, r9
 8002476:	eb4a 040a 	adc.w	r4, sl, sl
 800247a:	4699      	mov	r9, r3
 800247c:	46a2      	mov	sl, r4
 800247e:	eb19 0905 	adds.w	r9, r9, r5
 8002482:	eb4a 0a06 	adc.w	sl, sl, r6
 8002486:	f04f 0100 	mov.w	r1, #0
 800248a:	f04f 0200 	mov.w	r2, #0
 800248e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002492:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002496:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800249a:	4689      	mov	r9, r1
 800249c:	4692      	mov	sl, r2
 800249e:	eb19 0005 	adds.w	r0, r9, r5
 80024a2:	eb4a 0106 	adc.w	r1, sl, r6
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	461d      	mov	r5, r3
 80024ac:	f04f 0600 	mov.w	r6, #0
 80024b0:	196b      	adds	r3, r5, r5
 80024b2:	eb46 0406 	adc.w	r4, r6, r6
 80024b6:	461a      	mov	r2, r3
 80024b8:	4623      	mov	r3, r4
 80024ba:	f7fd fee9 	bl	8000290 <__aeabi_uldivmod>
 80024be:	4603      	mov	r3, r0
 80024c0:	460c      	mov	r4, r1
 80024c2:	461a      	mov	r2, r3
 80024c4:	4b6a      	ldr	r3, [pc, #424]	; (8002670 <UART_SetConfig+0x384>)
 80024c6:	fba3 1302 	umull	r1, r3, r3, r2
 80024ca:	095b      	lsrs	r3, r3, #5
 80024cc:	2164      	movs	r1, #100	; 0x64
 80024ce:	fb01 f303 	mul.w	r3, r1, r3
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	00db      	lsls	r3, r3, #3
 80024d6:	3332      	adds	r3, #50	; 0x32
 80024d8:	4a65      	ldr	r2, [pc, #404]	; (8002670 <UART_SetConfig+0x384>)
 80024da:	fba2 2303 	umull	r2, r3, r2, r3
 80024de:	095b      	lsrs	r3, r3, #5
 80024e0:	f003 0207 	and.w	r2, r3, #7
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4442      	add	r2, r8
 80024ea:	609a      	str	r2, [r3, #8]
 80024ec:	e26f      	b.n	80029ce <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80024ee:	f7ff fb55 	bl	8001b9c <HAL_RCC_GetPCLK1Freq>
 80024f2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	461d      	mov	r5, r3
 80024f8:	f04f 0600 	mov.w	r6, #0
 80024fc:	46a8      	mov	r8, r5
 80024fe:	46b1      	mov	r9, r6
 8002500:	eb18 0308 	adds.w	r3, r8, r8
 8002504:	eb49 0409 	adc.w	r4, r9, r9
 8002508:	4698      	mov	r8, r3
 800250a:	46a1      	mov	r9, r4
 800250c:	eb18 0805 	adds.w	r8, r8, r5
 8002510:	eb49 0906 	adc.w	r9, r9, r6
 8002514:	f04f 0100 	mov.w	r1, #0
 8002518:	f04f 0200 	mov.w	r2, #0
 800251c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002520:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002524:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002528:	4688      	mov	r8, r1
 800252a:	4691      	mov	r9, r2
 800252c:	eb18 0005 	adds.w	r0, r8, r5
 8002530:	eb49 0106 	adc.w	r1, r9, r6
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	461d      	mov	r5, r3
 800253a:	f04f 0600 	mov.w	r6, #0
 800253e:	196b      	adds	r3, r5, r5
 8002540:	eb46 0406 	adc.w	r4, r6, r6
 8002544:	461a      	mov	r2, r3
 8002546:	4623      	mov	r3, r4
 8002548:	f7fd fea2 	bl	8000290 <__aeabi_uldivmod>
 800254c:	4603      	mov	r3, r0
 800254e:	460c      	mov	r4, r1
 8002550:	461a      	mov	r2, r3
 8002552:	4b47      	ldr	r3, [pc, #284]	; (8002670 <UART_SetConfig+0x384>)
 8002554:	fba3 2302 	umull	r2, r3, r3, r2
 8002558:	095b      	lsrs	r3, r3, #5
 800255a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	461d      	mov	r5, r3
 8002562:	f04f 0600 	mov.w	r6, #0
 8002566:	46a9      	mov	r9, r5
 8002568:	46b2      	mov	sl, r6
 800256a:	eb19 0309 	adds.w	r3, r9, r9
 800256e:	eb4a 040a 	adc.w	r4, sl, sl
 8002572:	4699      	mov	r9, r3
 8002574:	46a2      	mov	sl, r4
 8002576:	eb19 0905 	adds.w	r9, r9, r5
 800257a:	eb4a 0a06 	adc.w	sl, sl, r6
 800257e:	f04f 0100 	mov.w	r1, #0
 8002582:	f04f 0200 	mov.w	r2, #0
 8002586:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800258a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800258e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002592:	4689      	mov	r9, r1
 8002594:	4692      	mov	sl, r2
 8002596:	eb19 0005 	adds.w	r0, r9, r5
 800259a:	eb4a 0106 	adc.w	r1, sl, r6
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	461d      	mov	r5, r3
 80025a4:	f04f 0600 	mov.w	r6, #0
 80025a8:	196b      	adds	r3, r5, r5
 80025aa:	eb46 0406 	adc.w	r4, r6, r6
 80025ae:	461a      	mov	r2, r3
 80025b0:	4623      	mov	r3, r4
 80025b2:	f7fd fe6d 	bl	8000290 <__aeabi_uldivmod>
 80025b6:	4603      	mov	r3, r0
 80025b8:	460c      	mov	r4, r1
 80025ba:	461a      	mov	r2, r3
 80025bc:	4b2c      	ldr	r3, [pc, #176]	; (8002670 <UART_SetConfig+0x384>)
 80025be:	fba3 1302 	umull	r1, r3, r3, r2
 80025c2:	095b      	lsrs	r3, r3, #5
 80025c4:	2164      	movs	r1, #100	; 0x64
 80025c6:	fb01 f303 	mul.w	r3, r1, r3
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	00db      	lsls	r3, r3, #3
 80025ce:	3332      	adds	r3, #50	; 0x32
 80025d0:	4a27      	ldr	r2, [pc, #156]	; (8002670 <UART_SetConfig+0x384>)
 80025d2:	fba2 2303 	umull	r2, r3, r2, r3
 80025d6:	095b      	lsrs	r3, r3, #5
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80025de:	4498      	add	r8, r3
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	461d      	mov	r5, r3
 80025e4:	f04f 0600 	mov.w	r6, #0
 80025e8:	46a9      	mov	r9, r5
 80025ea:	46b2      	mov	sl, r6
 80025ec:	eb19 0309 	adds.w	r3, r9, r9
 80025f0:	eb4a 040a 	adc.w	r4, sl, sl
 80025f4:	4699      	mov	r9, r3
 80025f6:	46a2      	mov	sl, r4
 80025f8:	eb19 0905 	adds.w	r9, r9, r5
 80025fc:	eb4a 0a06 	adc.w	sl, sl, r6
 8002600:	f04f 0100 	mov.w	r1, #0
 8002604:	f04f 0200 	mov.w	r2, #0
 8002608:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800260c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002610:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002614:	4689      	mov	r9, r1
 8002616:	4692      	mov	sl, r2
 8002618:	eb19 0005 	adds.w	r0, r9, r5
 800261c:	eb4a 0106 	adc.w	r1, sl, r6
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	461d      	mov	r5, r3
 8002626:	f04f 0600 	mov.w	r6, #0
 800262a:	196b      	adds	r3, r5, r5
 800262c:	eb46 0406 	adc.w	r4, r6, r6
 8002630:	461a      	mov	r2, r3
 8002632:	4623      	mov	r3, r4
 8002634:	f7fd fe2c 	bl	8000290 <__aeabi_uldivmod>
 8002638:	4603      	mov	r3, r0
 800263a:	460c      	mov	r4, r1
 800263c:	461a      	mov	r2, r3
 800263e:	4b0c      	ldr	r3, [pc, #48]	; (8002670 <UART_SetConfig+0x384>)
 8002640:	fba3 1302 	umull	r1, r3, r3, r2
 8002644:	095b      	lsrs	r3, r3, #5
 8002646:	2164      	movs	r1, #100	; 0x64
 8002648:	fb01 f303 	mul.w	r3, r1, r3
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	00db      	lsls	r3, r3, #3
 8002650:	3332      	adds	r3, #50	; 0x32
 8002652:	4a07      	ldr	r2, [pc, #28]	; (8002670 <UART_SetConfig+0x384>)
 8002654:	fba2 2303 	umull	r2, r3, r2, r3
 8002658:	095b      	lsrs	r3, r3, #5
 800265a:	f003 0207 	and.w	r2, r3, #7
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4442      	add	r2, r8
 8002664:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002666:	e1b2      	b.n	80029ce <UART_SetConfig+0x6e2>
 8002668:	40011000 	.word	0x40011000
 800266c:	40011400 	.word	0x40011400
 8002670:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4ad7      	ldr	r2, [pc, #860]	; (80029d8 <UART_SetConfig+0x6ec>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d005      	beq.n	800268a <UART_SetConfig+0x39e>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4ad6      	ldr	r2, [pc, #856]	; (80029dc <UART_SetConfig+0x6f0>)
 8002684:	4293      	cmp	r3, r2
 8002686:	f040 80d1 	bne.w	800282c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800268a:	f7ff fa9b 	bl	8001bc4 <HAL_RCC_GetPCLK2Freq>
 800268e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	469a      	mov	sl, r3
 8002694:	f04f 0b00 	mov.w	fp, #0
 8002698:	46d0      	mov	r8, sl
 800269a:	46d9      	mov	r9, fp
 800269c:	eb18 0308 	adds.w	r3, r8, r8
 80026a0:	eb49 0409 	adc.w	r4, r9, r9
 80026a4:	4698      	mov	r8, r3
 80026a6:	46a1      	mov	r9, r4
 80026a8:	eb18 080a 	adds.w	r8, r8, sl
 80026ac:	eb49 090b 	adc.w	r9, r9, fp
 80026b0:	f04f 0100 	mov.w	r1, #0
 80026b4:	f04f 0200 	mov.w	r2, #0
 80026b8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80026bc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80026c0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80026c4:	4688      	mov	r8, r1
 80026c6:	4691      	mov	r9, r2
 80026c8:	eb1a 0508 	adds.w	r5, sl, r8
 80026cc:	eb4b 0609 	adc.w	r6, fp, r9
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	4619      	mov	r1, r3
 80026d6:	f04f 0200 	mov.w	r2, #0
 80026da:	f04f 0300 	mov.w	r3, #0
 80026de:	f04f 0400 	mov.w	r4, #0
 80026e2:	0094      	lsls	r4, r2, #2
 80026e4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80026e8:	008b      	lsls	r3, r1, #2
 80026ea:	461a      	mov	r2, r3
 80026ec:	4623      	mov	r3, r4
 80026ee:	4628      	mov	r0, r5
 80026f0:	4631      	mov	r1, r6
 80026f2:	f7fd fdcd 	bl	8000290 <__aeabi_uldivmod>
 80026f6:	4603      	mov	r3, r0
 80026f8:	460c      	mov	r4, r1
 80026fa:	461a      	mov	r2, r3
 80026fc:	4bb8      	ldr	r3, [pc, #736]	; (80029e0 <UART_SetConfig+0x6f4>)
 80026fe:	fba3 2302 	umull	r2, r3, r3, r2
 8002702:	095b      	lsrs	r3, r3, #5
 8002704:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	469b      	mov	fp, r3
 800270c:	f04f 0c00 	mov.w	ip, #0
 8002710:	46d9      	mov	r9, fp
 8002712:	46e2      	mov	sl, ip
 8002714:	eb19 0309 	adds.w	r3, r9, r9
 8002718:	eb4a 040a 	adc.w	r4, sl, sl
 800271c:	4699      	mov	r9, r3
 800271e:	46a2      	mov	sl, r4
 8002720:	eb19 090b 	adds.w	r9, r9, fp
 8002724:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002728:	f04f 0100 	mov.w	r1, #0
 800272c:	f04f 0200 	mov.w	r2, #0
 8002730:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002734:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002738:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800273c:	4689      	mov	r9, r1
 800273e:	4692      	mov	sl, r2
 8002740:	eb1b 0509 	adds.w	r5, fp, r9
 8002744:	eb4c 060a 	adc.w	r6, ip, sl
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	4619      	mov	r1, r3
 800274e:	f04f 0200 	mov.w	r2, #0
 8002752:	f04f 0300 	mov.w	r3, #0
 8002756:	f04f 0400 	mov.w	r4, #0
 800275a:	0094      	lsls	r4, r2, #2
 800275c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002760:	008b      	lsls	r3, r1, #2
 8002762:	461a      	mov	r2, r3
 8002764:	4623      	mov	r3, r4
 8002766:	4628      	mov	r0, r5
 8002768:	4631      	mov	r1, r6
 800276a:	f7fd fd91 	bl	8000290 <__aeabi_uldivmod>
 800276e:	4603      	mov	r3, r0
 8002770:	460c      	mov	r4, r1
 8002772:	461a      	mov	r2, r3
 8002774:	4b9a      	ldr	r3, [pc, #616]	; (80029e0 <UART_SetConfig+0x6f4>)
 8002776:	fba3 1302 	umull	r1, r3, r3, r2
 800277a:	095b      	lsrs	r3, r3, #5
 800277c:	2164      	movs	r1, #100	; 0x64
 800277e:	fb01 f303 	mul.w	r3, r1, r3
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	011b      	lsls	r3, r3, #4
 8002786:	3332      	adds	r3, #50	; 0x32
 8002788:	4a95      	ldr	r2, [pc, #596]	; (80029e0 <UART_SetConfig+0x6f4>)
 800278a:	fba2 2303 	umull	r2, r3, r2, r3
 800278e:	095b      	lsrs	r3, r3, #5
 8002790:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002794:	4498      	add	r8, r3
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	469b      	mov	fp, r3
 800279a:	f04f 0c00 	mov.w	ip, #0
 800279e:	46d9      	mov	r9, fp
 80027a0:	46e2      	mov	sl, ip
 80027a2:	eb19 0309 	adds.w	r3, r9, r9
 80027a6:	eb4a 040a 	adc.w	r4, sl, sl
 80027aa:	4699      	mov	r9, r3
 80027ac:	46a2      	mov	sl, r4
 80027ae:	eb19 090b 	adds.w	r9, r9, fp
 80027b2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80027b6:	f04f 0100 	mov.w	r1, #0
 80027ba:	f04f 0200 	mov.w	r2, #0
 80027be:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80027c2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80027c6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80027ca:	4689      	mov	r9, r1
 80027cc:	4692      	mov	sl, r2
 80027ce:	eb1b 0509 	adds.w	r5, fp, r9
 80027d2:	eb4c 060a 	adc.w	r6, ip, sl
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	4619      	mov	r1, r3
 80027dc:	f04f 0200 	mov.w	r2, #0
 80027e0:	f04f 0300 	mov.w	r3, #0
 80027e4:	f04f 0400 	mov.w	r4, #0
 80027e8:	0094      	lsls	r4, r2, #2
 80027ea:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80027ee:	008b      	lsls	r3, r1, #2
 80027f0:	461a      	mov	r2, r3
 80027f2:	4623      	mov	r3, r4
 80027f4:	4628      	mov	r0, r5
 80027f6:	4631      	mov	r1, r6
 80027f8:	f7fd fd4a 	bl	8000290 <__aeabi_uldivmod>
 80027fc:	4603      	mov	r3, r0
 80027fe:	460c      	mov	r4, r1
 8002800:	461a      	mov	r2, r3
 8002802:	4b77      	ldr	r3, [pc, #476]	; (80029e0 <UART_SetConfig+0x6f4>)
 8002804:	fba3 1302 	umull	r1, r3, r3, r2
 8002808:	095b      	lsrs	r3, r3, #5
 800280a:	2164      	movs	r1, #100	; 0x64
 800280c:	fb01 f303 	mul.w	r3, r1, r3
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	011b      	lsls	r3, r3, #4
 8002814:	3332      	adds	r3, #50	; 0x32
 8002816:	4a72      	ldr	r2, [pc, #456]	; (80029e0 <UART_SetConfig+0x6f4>)
 8002818:	fba2 2303 	umull	r2, r3, r2, r3
 800281c:	095b      	lsrs	r3, r3, #5
 800281e:	f003 020f 	and.w	r2, r3, #15
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4442      	add	r2, r8
 8002828:	609a      	str	r2, [r3, #8]
 800282a:	e0d0      	b.n	80029ce <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800282c:	f7ff f9b6 	bl	8001b9c <HAL_RCC_GetPCLK1Freq>
 8002830:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	469a      	mov	sl, r3
 8002836:	f04f 0b00 	mov.w	fp, #0
 800283a:	46d0      	mov	r8, sl
 800283c:	46d9      	mov	r9, fp
 800283e:	eb18 0308 	adds.w	r3, r8, r8
 8002842:	eb49 0409 	adc.w	r4, r9, r9
 8002846:	4698      	mov	r8, r3
 8002848:	46a1      	mov	r9, r4
 800284a:	eb18 080a 	adds.w	r8, r8, sl
 800284e:	eb49 090b 	adc.w	r9, r9, fp
 8002852:	f04f 0100 	mov.w	r1, #0
 8002856:	f04f 0200 	mov.w	r2, #0
 800285a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800285e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002862:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002866:	4688      	mov	r8, r1
 8002868:	4691      	mov	r9, r2
 800286a:	eb1a 0508 	adds.w	r5, sl, r8
 800286e:	eb4b 0609 	adc.w	r6, fp, r9
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	4619      	mov	r1, r3
 8002878:	f04f 0200 	mov.w	r2, #0
 800287c:	f04f 0300 	mov.w	r3, #0
 8002880:	f04f 0400 	mov.w	r4, #0
 8002884:	0094      	lsls	r4, r2, #2
 8002886:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800288a:	008b      	lsls	r3, r1, #2
 800288c:	461a      	mov	r2, r3
 800288e:	4623      	mov	r3, r4
 8002890:	4628      	mov	r0, r5
 8002892:	4631      	mov	r1, r6
 8002894:	f7fd fcfc 	bl	8000290 <__aeabi_uldivmod>
 8002898:	4603      	mov	r3, r0
 800289a:	460c      	mov	r4, r1
 800289c:	461a      	mov	r2, r3
 800289e:	4b50      	ldr	r3, [pc, #320]	; (80029e0 <UART_SetConfig+0x6f4>)
 80028a0:	fba3 2302 	umull	r2, r3, r3, r2
 80028a4:	095b      	lsrs	r3, r3, #5
 80028a6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	469b      	mov	fp, r3
 80028ae:	f04f 0c00 	mov.w	ip, #0
 80028b2:	46d9      	mov	r9, fp
 80028b4:	46e2      	mov	sl, ip
 80028b6:	eb19 0309 	adds.w	r3, r9, r9
 80028ba:	eb4a 040a 	adc.w	r4, sl, sl
 80028be:	4699      	mov	r9, r3
 80028c0:	46a2      	mov	sl, r4
 80028c2:	eb19 090b 	adds.w	r9, r9, fp
 80028c6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80028ca:	f04f 0100 	mov.w	r1, #0
 80028ce:	f04f 0200 	mov.w	r2, #0
 80028d2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80028d6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80028da:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80028de:	4689      	mov	r9, r1
 80028e0:	4692      	mov	sl, r2
 80028e2:	eb1b 0509 	adds.w	r5, fp, r9
 80028e6:	eb4c 060a 	adc.w	r6, ip, sl
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	4619      	mov	r1, r3
 80028f0:	f04f 0200 	mov.w	r2, #0
 80028f4:	f04f 0300 	mov.w	r3, #0
 80028f8:	f04f 0400 	mov.w	r4, #0
 80028fc:	0094      	lsls	r4, r2, #2
 80028fe:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002902:	008b      	lsls	r3, r1, #2
 8002904:	461a      	mov	r2, r3
 8002906:	4623      	mov	r3, r4
 8002908:	4628      	mov	r0, r5
 800290a:	4631      	mov	r1, r6
 800290c:	f7fd fcc0 	bl	8000290 <__aeabi_uldivmod>
 8002910:	4603      	mov	r3, r0
 8002912:	460c      	mov	r4, r1
 8002914:	461a      	mov	r2, r3
 8002916:	4b32      	ldr	r3, [pc, #200]	; (80029e0 <UART_SetConfig+0x6f4>)
 8002918:	fba3 1302 	umull	r1, r3, r3, r2
 800291c:	095b      	lsrs	r3, r3, #5
 800291e:	2164      	movs	r1, #100	; 0x64
 8002920:	fb01 f303 	mul.w	r3, r1, r3
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	011b      	lsls	r3, r3, #4
 8002928:	3332      	adds	r3, #50	; 0x32
 800292a:	4a2d      	ldr	r2, [pc, #180]	; (80029e0 <UART_SetConfig+0x6f4>)
 800292c:	fba2 2303 	umull	r2, r3, r2, r3
 8002930:	095b      	lsrs	r3, r3, #5
 8002932:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002936:	4498      	add	r8, r3
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	469b      	mov	fp, r3
 800293c:	f04f 0c00 	mov.w	ip, #0
 8002940:	46d9      	mov	r9, fp
 8002942:	46e2      	mov	sl, ip
 8002944:	eb19 0309 	adds.w	r3, r9, r9
 8002948:	eb4a 040a 	adc.w	r4, sl, sl
 800294c:	4699      	mov	r9, r3
 800294e:	46a2      	mov	sl, r4
 8002950:	eb19 090b 	adds.w	r9, r9, fp
 8002954:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002958:	f04f 0100 	mov.w	r1, #0
 800295c:	f04f 0200 	mov.w	r2, #0
 8002960:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002964:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002968:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800296c:	4689      	mov	r9, r1
 800296e:	4692      	mov	sl, r2
 8002970:	eb1b 0509 	adds.w	r5, fp, r9
 8002974:	eb4c 060a 	adc.w	r6, ip, sl
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	4619      	mov	r1, r3
 800297e:	f04f 0200 	mov.w	r2, #0
 8002982:	f04f 0300 	mov.w	r3, #0
 8002986:	f04f 0400 	mov.w	r4, #0
 800298a:	0094      	lsls	r4, r2, #2
 800298c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002990:	008b      	lsls	r3, r1, #2
 8002992:	461a      	mov	r2, r3
 8002994:	4623      	mov	r3, r4
 8002996:	4628      	mov	r0, r5
 8002998:	4631      	mov	r1, r6
 800299a:	f7fd fc79 	bl	8000290 <__aeabi_uldivmod>
 800299e:	4603      	mov	r3, r0
 80029a0:	460c      	mov	r4, r1
 80029a2:	461a      	mov	r2, r3
 80029a4:	4b0e      	ldr	r3, [pc, #56]	; (80029e0 <UART_SetConfig+0x6f4>)
 80029a6:	fba3 1302 	umull	r1, r3, r3, r2
 80029aa:	095b      	lsrs	r3, r3, #5
 80029ac:	2164      	movs	r1, #100	; 0x64
 80029ae:	fb01 f303 	mul.w	r3, r1, r3
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	011b      	lsls	r3, r3, #4
 80029b6:	3332      	adds	r3, #50	; 0x32
 80029b8:	4a09      	ldr	r2, [pc, #36]	; (80029e0 <UART_SetConfig+0x6f4>)
 80029ba:	fba2 2303 	umull	r2, r3, r2, r3
 80029be:	095b      	lsrs	r3, r3, #5
 80029c0:	f003 020f 	and.w	r2, r3, #15
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4442      	add	r2, r8
 80029ca:	609a      	str	r2, [r3, #8]
}
 80029cc:	e7ff      	b.n	80029ce <UART_SetConfig+0x6e2>
 80029ce:	bf00      	nop
 80029d0:	3714      	adds	r7, #20
 80029d2:	46bd      	mov	sp, r7
 80029d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80029d8:	40011000 	.word	0x40011000
 80029dc:	40011400 	.word	0x40011400
 80029e0:	51eb851f 	.word	0x51eb851f

080029e4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b085      	sub	sp, #20
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	4603      	mov	r3, r0
 80029ec:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80029ee:	2300      	movs	r3, #0
 80029f0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80029f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029f6:	2b84      	cmp	r3, #132	; 0x84
 80029f8:	d005      	beq.n	8002a06 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80029fa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	4413      	add	r3, r2
 8002a02:	3303      	adds	r3, #3
 8002a04:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002a06:	68fb      	ldr	r3, [r7, #12]
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3714      	adds	r7, #20
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a1a:	f3ef 8305 	mrs	r3, IPSR
 8002a1e:	607b      	str	r3, [r7, #4]
  return(result);
 8002a20:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	bf14      	ite	ne
 8002a26:	2301      	movne	r3, #1
 8002a28:	2300      	moveq	r3, #0
 8002a2a:	b2db      	uxtb	r3, r3
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	370c      	adds	r7, #12
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr

08002a38 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002a3c:	f001 f91c 	bl	8003c78 <vTaskStartScheduler>
  
  return osOK;
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	bd80      	pop	{r7, pc}

08002a46 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002a46:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a48:	b089      	sub	sp, #36	; 0x24
 8002a4a:	af04      	add	r7, sp, #16
 8002a4c:	6078      	str	r0, [r7, #4]
 8002a4e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	695b      	ldr	r3, [r3, #20]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d020      	beq.n	8002a9a <osThreadCreate+0x54>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	699b      	ldr	r3, [r3, #24]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d01c      	beq.n	8002a9a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685c      	ldr	r4, [r3, #4]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681d      	ldr	r5, [r3, #0]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	691e      	ldr	r6, [r3, #16]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7ff ffb6 	bl	80029e4 <makeFreeRtosPriority>
 8002a78:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	695b      	ldr	r3, [r3, #20]
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002a82:	9202      	str	r2, [sp, #8]
 8002a84:	9301      	str	r3, [sp, #4]
 8002a86:	9100      	str	r1, [sp, #0]
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	4632      	mov	r2, r6
 8002a8c:	4629      	mov	r1, r5
 8002a8e:	4620      	mov	r0, r4
 8002a90:	f000 ff2f 	bl	80038f2 <xTaskCreateStatic>
 8002a94:	4603      	mov	r3, r0
 8002a96:	60fb      	str	r3, [r7, #12]
 8002a98:	e01c      	b.n	8002ad4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685c      	ldr	r4, [r3, #4]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002aa6:	b29e      	uxth	r6, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7ff ff98 	bl	80029e4 <makeFreeRtosPriority>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	f107 030c 	add.w	r3, r7, #12
 8002aba:	9301      	str	r3, [sp, #4]
 8002abc:	9200      	str	r2, [sp, #0]
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	4632      	mov	r2, r6
 8002ac2:	4629      	mov	r1, r5
 8002ac4:	4620      	mov	r0, r4
 8002ac6:	f000 ff6e 	bl	80039a6 <xTaskCreate>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d001      	beq.n	8002ad4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	e000      	b.n	8002ad6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3714      	adds	r7, #20
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ade <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002ade:	b580      	push	{r7, lr}
 8002ae0:	b084      	sub	sp, #16
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d001      	beq.n	8002af4 <osDelay+0x16>
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	e000      	b.n	8002af6 <osDelay+0x18>
 8002af4:	2301      	movs	r3, #1
 8002af6:	4618      	mov	r0, r3
 8002af8:	f001 f88a 	bl	8003c10 <vTaskDelay>
  
  return osOK;
 8002afc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3710      	adds	r7, #16
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b086      	sub	sp, #24
 8002b0a:	af02      	add	r7, sp, #8
 8002b0c:	6078      	str	r0, [r7, #4]
 8002b0e:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d010      	beq.n	8002b3a <osSemaphoreCreate+0x34>
    if (count == 1) {
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d10b      	bne.n	8002b36 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685a      	ldr	r2, [r3, #4]
 8002b22:	2303      	movs	r3, #3
 8002b24:	9300      	str	r3, [sp, #0]
 8002b26:	4613      	mov	r3, r2
 8002b28:	2200      	movs	r2, #0
 8002b2a:	2100      	movs	r1, #0
 8002b2c:	2001      	movs	r0, #1
 8002b2e:	f000 fa17 	bl	8002f60 <xQueueGenericCreateStatic>
 8002b32:	4603      	mov	r3, r0
 8002b34:	e016      	b.n	8002b64 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8002b36:	2300      	movs	r3, #0
 8002b38:	e014      	b.n	8002b64 <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d110      	bne.n	8002b62 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 8002b40:	2203      	movs	r2, #3
 8002b42:	2100      	movs	r1, #0
 8002b44:	2001      	movs	r0, #1
 8002b46:	f000 fa7e 	bl	8003046 <xQueueGenericCreate>
 8002b4a:	60f8      	str	r0, [r7, #12]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d005      	beq.n	8002b5e <osSemaphoreCreate+0x58>
 8002b52:	2300      	movs	r3, #0
 8002b54:	2200      	movs	r2, #0
 8002b56:	2100      	movs	r1, #0
 8002b58:	68f8      	ldr	r0, [r7, #12]
 8002b5a:	f000 fad3 	bl	8003104 <xQueueGenericSend>
      return sema;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	e000      	b.n	8002b64 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8002b62:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3710      	adds	r7, #16
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8002b6c:	b590      	push	{r4, r7, lr}
 8002b6e:	b085      	sub	sp, #20
 8002b70:	af02      	add	r7, sp, #8
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d012      	beq.n	8002ba4 <osMessageCreate+0x38>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d00e      	beq.n	8002ba4 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6818      	ldr	r0, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6859      	ldr	r1, [r3, #4]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	689a      	ldr	r2, [r3, #8]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	68dc      	ldr	r4, [r3, #12]
 8002b96:	2300      	movs	r3, #0
 8002b98:	9300      	str	r3, [sp, #0]
 8002b9a:	4623      	mov	r3, r4
 8002b9c:	f000 f9e0 	bl	8002f60 <xQueueGenericCreateStatic>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	e008      	b.n	8002bb6 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6818      	ldr	r0, [r3, #0]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	4619      	mov	r1, r3
 8002bb0:	f000 fa49 	bl	8003046 <xQueueGenericCreate>
 8002bb4:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	370c      	adds	r7, #12
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd90      	pop	{r4, r7, pc}
	...

08002bc0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b086      	sub	sp, #24
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	60b9      	str	r1, [r7, #8]
 8002bca:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d101      	bne.n	8002bde <osMessagePut+0x1e>
    ticks = 1;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8002bde:	f7ff ff19 	bl	8002a14 <inHandlerMode>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d018      	beq.n	8002c1a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8002be8:	f107 0210 	add.w	r2, r7, #16
 8002bec:	f107 0108 	add.w	r1, r7, #8
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	68f8      	ldr	r0, [r7, #12]
 8002bf4:	f000 fb80 	bl	80032f8 <xQueueGenericSendFromISR>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d001      	beq.n	8002c02 <osMessagePut+0x42>
      return osErrorOS;
 8002bfe:	23ff      	movs	r3, #255	; 0xff
 8002c00:	e018      	b.n	8002c34 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d014      	beq.n	8002c32 <osMessagePut+0x72>
 8002c08:	4b0c      	ldr	r3, [pc, #48]	; (8002c3c <osMessagePut+0x7c>)
 8002c0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c0e:	601a      	str	r2, [r3, #0]
 8002c10:	f3bf 8f4f 	dsb	sy
 8002c14:	f3bf 8f6f 	isb	sy
 8002c18:	e00b      	b.n	8002c32 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8002c1a:	f107 0108 	add.w	r1, r7, #8
 8002c1e:	2300      	movs	r3, #0
 8002c20:	697a      	ldr	r2, [r7, #20]
 8002c22:	68f8      	ldr	r0, [r7, #12]
 8002c24:	f000 fa6e 	bl	8003104 <xQueueGenericSend>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d001      	beq.n	8002c32 <osMessagePut+0x72>
      return osErrorOS;
 8002c2e:	23ff      	movs	r3, #255	; 0xff
 8002c30:	e000      	b.n	8002c34 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8002c32:	2300      	movs	r3, #0
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3718      	adds	r7, #24
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	e000ed04 	.word	0xe000ed04

08002c40 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8002c40:	b590      	push	{r4, r7, lr}
 8002c42:	b08b      	sub	sp, #44	; 0x2c
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	60f8      	str	r0, [r7, #12]
 8002c48:	60b9      	str	r1, [r7, #8]
 8002c4a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8002c50:	2300      	movs	r3, #0
 8002c52:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d10a      	bne.n	8002c70 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8002c5a:	2380      	movs	r3, #128	; 0x80
 8002c5c:	617b      	str	r3, [r7, #20]
    return event;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	461c      	mov	r4, r3
 8002c62:	f107 0314 	add.w	r3, r7, #20
 8002c66:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002c6a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002c6e:	e054      	b.n	8002d1a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8002c70:	2300      	movs	r3, #0
 8002c72:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8002c74:	2300      	movs	r3, #0
 8002c76:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c7e:	d103      	bne.n	8002c88 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8002c80:	f04f 33ff 	mov.w	r3, #4294967295
 8002c84:	627b      	str	r3, [r7, #36]	; 0x24
 8002c86:	e009      	b.n	8002c9c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d006      	beq.n	8002c9c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8002c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d101      	bne.n	8002c9c <osMessageGet+0x5c>
      ticks = 1;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8002c9c:	f7ff feba 	bl	8002a14 <inHandlerMode>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d01c      	beq.n	8002ce0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8002ca6:	f107 0220 	add.w	r2, r7, #32
 8002caa:	f107 0314 	add.w	r3, r7, #20
 8002cae:	3304      	adds	r3, #4
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	68b8      	ldr	r0, [r7, #8]
 8002cb4:	f000 fc90 	bl	80035d8 <xQueueReceiveFromISR>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d102      	bne.n	8002cc4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8002cbe:	2310      	movs	r3, #16
 8002cc0:	617b      	str	r3, [r7, #20]
 8002cc2:	e001      	b.n	8002cc8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002cc8:	6a3b      	ldr	r3, [r7, #32]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d01d      	beq.n	8002d0a <osMessageGet+0xca>
 8002cce:	4b15      	ldr	r3, [pc, #84]	; (8002d24 <osMessageGet+0xe4>)
 8002cd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cd4:	601a      	str	r2, [r3, #0]
 8002cd6:	f3bf 8f4f 	dsb	sy
 8002cda:	f3bf 8f6f 	isb	sy
 8002cde:	e014      	b.n	8002d0a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8002ce0:	f107 0314 	add.w	r3, r7, #20
 8002ce4:	3304      	adds	r3, #4
 8002ce6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ce8:	4619      	mov	r1, r3
 8002cea:	68b8      	ldr	r0, [r7, #8]
 8002cec:	f000 fb98 	bl	8003420 <xQueueReceive>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d102      	bne.n	8002cfc <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8002cf6:	2310      	movs	r3, #16
 8002cf8:	617b      	str	r3, [r7, #20]
 8002cfa:	e006      	b.n	8002d0a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8002cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d101      	bne.n	8002d06 <osMessageGet+0xc6>
 8002d02:	2300      	movs	r3, #0
 8002d04:	e000      	b.n	8002d08 <osMessageGet+0xc8>
 8002d06:	2340      	movs	r3, #64	; 0x40
 8002d08:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	461c      	mov	r4, r3
 8002d0e:	f107 0314 	add.w	r3, r7, #20
 8002d12:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002d16:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8002d1a:	68f8      	ldr	r0, [r7, #12]
 8002d1c:	372c      	adds	r7, #44	; 0x2c
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd90      	pop	{r4, r7, pc}
 8002d22:	bf00      	nop
 8002d24:	e000ed04 	.word	0xe000ed04

08002d28 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f103 0208 	add.w	r2, r3, #8
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8002d40:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f103 0208 	add.w	r2, r3, #8
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f103 0208 	add.w	r2, r3, #8
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002d76:	bf00      	nop
 8002d78:	370c      	adds	r7, #12
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr

08002d82 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002d82:	b480      	push	{r7}
 8002d84:	b085      	sub	sp, #20
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
 8002d8a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	68fa      	ldr	r2, [r7, #12]
 8002d96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	689a      	ldr	r2, [r3, #8]
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	683a      	ldr	r2, [r7, #0]
 8002da6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	683a      	ldr	r2, [r7, #0]
 8002dac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	1c5a      	adds	r2, r3, #1
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	601a      	str	r2, [r3, #0]
}
 8002dbe:	bf00      	nop
 8002dc0:	3714      	adds	r7, #20
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr

08002dca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002dca:	b480      	push	{r7}
 8002dcc:	b085      	sub	sp, #20
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]
 8002dd2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002de0:	d103      	bne.n	8002dea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	60fb      	str	r3, [r7, #12]
 8002de8:	e00c      	b.n	8002e04 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	3308      	adds	r3, #8
 8002dee:	60fb      	str	r3, [r7, #12]
 8002df0:	e002      	b.n	8002df8 <vListInsert+0x2e>
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	60fb      	str	r3, [r7, #12]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68ba      	ldr	r2, [r7, #8]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d2f6      	bcs.n	8002df2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	685a      	ldr	r2, [r3, #4]
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	683a      	ldr	r2, [r7, #0]
 8002e12:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	68fa      	ldr	r2, [r7, #12]
 8002e18:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	683a      	ldr	r2, [r7, #0]
 8002e1e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	1c5a      	adds	r2, r3, #1
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	601a      	str	r2, [r3, #0]
}
 8002e30:	bf00      	nop
 8002e32:	3714      	adds	r7, #20
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b085      	sub	sp, #20
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	691b      	ldr	r3, [r3, #16]
 8002e48:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	6892      	ldr	r2, [r2, #8]
 8002e52:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	6852      	ldr	r2, [r2, #4]
 8002e5c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d103      	bne.n	8002e70 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	689a      	ldr	r2, [r3, #8]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	1e5a      	subs	r2, r3, #1
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3714      	adds	r7, #20
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b084      	sub	sp, #16
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d109      	bne.n	8002eb8 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ea8:	f383 8811 	msr	BASEPRI, r3
 8002eac:	f3bf 8f6f 	isb	sy
 8002eb0:	f3bf 8f4f 	dsb	sy
 8002eb4:	60bb      	str	r3, [r7, #8]
 8002eb6:	e7fe      	b.n	8002eb6 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8002eb8:	f001 fd00 	bl	80048bc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ec4:	68f9      	ldr	r1, [r7, #12]
 8002ec6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002ec8:	fb01 f303 	mul.w	r3, r1, r3
 8002ecc:	441a      	add	r2, r3
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ee8:	3b01      	subs	r3, #1
 8002eea:	68f9      	ldr	r1, [r7, #12]
 8002eec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002eee:	fb01 f303 	mul.w	r3, r1, r3
 8002ef2:	441a      	add	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	22ff      	movs	r2, #255	; 0xff
 8002efc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	22ff      	movs	r2, #255	; 0xff
 8002f04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d114      	bne.n	8002f38 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d01a      	beq.n	8002f4c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	3310      	adds	r3, #16
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f001 f8ea 	bl	80040f4 <xTaskRemoveFromEventList>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d012      	beq.n	8002f4c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002f26:	4b0d      	ldr	r3, [pc, #52]	; (8002f5c <xQueueGenericReset+0xcc>)
 8002f28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f2c:	601a      	str	r2, [r3, #0]
 8002f2e:	f3bf 8f4f 	dsb	sy
 8002f32:	f3bf 8f6f 	isb	sy
 8002f36:	e009      	b.n	8002f4c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	3310      	adds	r3, #16
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f7ff fef3 	bl	8002d28 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	3324      	adds	r3, #36	; 0x24
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7ff feee 	bl	8002d28 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002f4c:	f001 fce4 	bl	8004918 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002f50:	2301      	movs	r3, #1
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3710      	adds	r7, #16
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	e000ed04 	.word	0xe000ed04

08002f60 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b08e      	sub	sp, #56	; 0x38
 8002f64:	af02      	add	r7, sp, #8
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	607a      	str	r2, [r7, #4]
 8002f6c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d109      	bne.n	8002f88 <xQueueGenericCreateStatic+0x28>
 8002f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f78:	f383 8811 	msr	BASEPRI, r3
 8002f7c:	f3bf 8f6f 	isb	sy
 8002f80:	f3bf 8f4f 	dsb	sy
 8002f84:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f86:	e7fe      	b.n	8002f86 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d109      	bne.n	8002fa2 <xQueueGenericCreateStatic+0x42>
 8002f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f92:	f383 8811 	msr	BASEPRI, r3
 8002f96:	f3bf 8f6f 	isb	sy
 8002f9a:	f3bf 8f4f 	dsb	sy
 8002f9e:	627b      	str	r3, [r7, #36]	; 0x24
 8002fa0:	e7fe      	b.n	8002fa0 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d002      	beq.n	8002fae <xQueueGenericCreateStatic+0x4e>
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d001      	beq.n	8002fb2 <xQueueGenericCreateStatic+0x52>
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e000      	b.n	8002fb4 <xQueueGenericCreateStatic+0x54>
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d109      	bne.n	8002fcc <xQueueGenericCreateStatic+0x6c>
 8002fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fbc:	f383 8811 	msr	BASEPRI, r3
 8002fc0:	f3bf 8f6f 	isb	sy
 8002fc4:	f3bf 8f4f 	dsb	sy
 8002fc8:	623b      	str	r3, [r7, #32]
 8002fca:	e7fe      	b.n	8002fca <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d102      	bne.n	8002fd8 <xQueueGenericCreateStatic+0x78>
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d101      	bne.n	8002fdc <xQueueGenericCreateStatic+0x7c>
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e000      	b.n	8002fde <xQueueGenericCreateStatic+0x7e>
 8002fdc:	2300      	movs	r3, #0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d109      	bne.n	8002ff6 <xQueueGenericCreateStatic+0x96>
 8002fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fe6:	f383 8811 	msr	BASEPRI, r3
 8002fea:	f3bf 8f6f 	isb	sy
 8002fee:	f3bf 8f4f 	dsb	sy
 8002ff2:	61fb      	str	r3, [r7, #28]
 8002ff4:	e7fe      	b.n	8002ff4 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002ff6:	2348      	movs	r3, #72	; 0x48
 8002ff8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	2b48      	cmp	r3, #72	; 0x48
 8002ffe:	d009      	beq.n	8003014 <xQueueGenericCreateStatic+0xb4>
 8003000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003004:	f383 8811 	msr	BASEPRI, r3
 8003008:	f3bf 8f6f 	isb	sy
 800300c:	f3bf 8f4f 	dsb	sy
 8003010:	61bb      	str	r3, [r7, #24]
 8003012:	e7fe      	b.n	8003012 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003014:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800301a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800301c:	2b00      	cmp	r3, #0
 800301e:	d00d      	beq.n	800303c <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003022:	2201      	movs	r2, #1
 8003024:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003028:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800302c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800302e:	9300      	str	r3, [sp, #0]
 8003030:	4613      	mov	r3, r2
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	68b9      	ldr	r1, [r7, #8]
 8003036:	68f8      	ldr	r0, [r7, #12]
 8003038:	f000 f844 	bl	80030c4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800303c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800303e:	4618      	mov	r0, r3
 8003040:	3730      	adds	r7, #48	; 0x30
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}

08003046 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003046:	b580      	push	{r7, lr}
 8003048:	b08a      	sub	sp, #40	; 0x28
 800304a:	af02      	add	r7, sp, #8
 800304c:	60f8      	str	r0, [r7, #12]
 800304e:	60b9      	str	r1, [r7, #8]
 8003050:	4613      	mov	r3, r2
 8003052:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d109      	bne.n	800306e <xQueueGenericCreate+0x28>
 800305a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800305e:	f383 8811 	msr	BASEPRI, r3
 8003062:	f3bf 8f6f 	isb	sy
 8003066:	f3bf 8f4f 	dsb	sy
 800306a:	613b      	str	r3, [r7, #16]
 800306c:	e7fe      	b.n	800306c <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d102      	bne.n	800307a <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003074:	2300      	movs	r3, #0
 8003076:	61fb      	str	r3, [r7, #28]
 8003078:	e004      	b.n	8003084 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	68ba      	ldr	r2, [r7, #8]
 800307e:	fb02 f303 	mul.w	r3, r2, r3
 8003082:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	3348      	adds	r3, #72	; 0x48
 8003088:	4618      	mov	r0, r3
 800308a:	f001 fd31 	bl	8004af0 <pvPortMalloc>
 800308e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003090:	69bb      	ldr	r3, [r7, #24]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d011      	beq.n	80030ba <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	3348      	adds	r3, #72	; 0x48
 800309e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80030a8:	79fa      	ldrb	r2, [r7, #7]
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	9300      	str	r3, [sp, #0]
 80030ae:	4613      	mov	r3, r2
 80030b0:	697a      	ldr	r2, [r7, #20]
 80030b2:	68b9      	ldr	r1, [r7, #8]
 80030b4:	68f8      	ldr	r0, [r7, #12]
 80030b6:	f000 f805 	bl	80030c4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80030ba:	69bb      	ldr	r3, [r7, #24]
	}
 80030bc:	4618      	mov	r0, r3
 80030be:	3720      	adds	r7, #32
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	60f8      	str	r0, [r7, #12]
 80030cc:	60b9      	str	r1, [r7, #8]
 80030ce:	607a      	str	r2, [r7, #4]
 80030d0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d103      	bne.n	80030e0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	69ba      	ldr	r2, [r7, #24]
 80030dc:	601a      	str	r2, [r3, #0]
 80030de:	e002      	b.n	80030e6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	68fa      	ldr	r2, [r7, #12]
 80030ea:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	68ba      	ldr	r2, [r7, #8]
 80030f0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80030f2:	2101      	movs	r1, #1
 80030f4:	69b8      	ldr	r0, [r7, #24]
 80030f6:	f7ff fecb 	bl	8002e90 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80030fa:	bf00      	nop
 80030fc:	3710      	adds	r7, #16
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
	...

08003104 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b08e      	sub	sp, #56	; 0x38
 8003108:	af00      	add	r7, sp, #0
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	60b9      	str	r1, [r7, #8]
 800310e:	607a      	str	r2, [r7, #4]
 8003110:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003112:	2300      	movs	r3, #0
 8003114:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800311a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800311c:	2b00      	cmp	r3, #0
 800311e:	d109      	bne.n	8003134 <xQueueGenericSend+0x30>
 8003120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003124:	f383 8811 	msr	BASEPRI, r3
 8003128:	f3bf 8f6f 	isb	sy
 800312c:	f3bf 8f4f 	dsb	sy
 8003130:	62bb      	str	r3, [r7, #40]	; 0x28
 8003132:	e7fe      	b.n	8003132 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d103      	bne.n	8003142 <xQueueGenericSend+0x3e>
 800313a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800313c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313e:	2b00      	cmp	r3, #0
 8003140:	d101      	bne.n	8003146 <xQueueGenericSend+0x42>
 8003142:	2301      	movs	r3, #1
 8003144:	e000      	b.n	8003148 <xQueueGenericSend+0x44>
 8003146:	2300      	movs	r3, #0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d109      	bne.n	8003160 <xQueueGenericSend+0x5c>
 800314c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003150:	f383 8811 	msr	BASEPRI, r3
 8003154:	f3bf 8f6f 	isb	sy
 8003158:	f3bf 8f4f 	dsb	sy
 800315c:	627b      	str	r3, [r7, #36]	; 0x24
 800315e:	e7fe      	b.n	800315e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	2b02      	cmp	r3, #2
 8003164:	d103      	bne.n	800316e <xQueueGenericSend+0x6a>
 8003166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800316a:	2b01      	cmp	r3, #1
 800316c:	d101      	bne.n	8003172 <xQueueGenericSend+0x6e>
 800316e:	2301      	movs	r3, #1
 8003170:	e000      	b.n	8003174 <xQueueGenericSend+0x70>
 8003172:	2300      	movs	r3, #0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d109      	bne.n	800318c <xQueueGenericSend+0x88>
 8003178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800317c:	f383 8811 	msr	BASEPRI, r3
 8003180:	f3bf 8f6f 	isb	sy
 8003184:	f3bf 8f4f 	dsb	sy
 8003188:	623b      	str	r3, [r7, #32]
 800318a:	e7fe      	b.n	800318a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800318c:	f001 f968 	bl	8004460 <xTaskGetSchedulerState>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d102      	bne.n	800319c <xQueueGenericSend+0x98>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d101      	bne.n	80031a0 <xQueueGenericSend+0x9c>
 800319c:	2301      	movs	r3, #1
 800319e:	e000      	b.n	80031a2 <xQueueGenericSend+0x9e>
 80031a0:	2300      	movs	r3, #0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d109      	bne.n	80031ba <xQueueGenericSend+0xb6>
 80031a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031aa:	f383 8811 	msr	BASEPRI, r3
 80031ae:	f3bf 8f6f 	isb	sy
 80031b2:	f3bf 8f4f 	dsb	sy
 80031b6:	61fb      	str	r3, [r7, #28]
 80031b8:	e7fe      	b.n	80031b8 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80031ba:	f001 fb7f 	bl	80048bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80031be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d302      	bcc.n	80031d0 <xQueueGenericSend+0xcc>
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	d129      	bne.n	8003224 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80031d0:	683a      	ldr	r2, [r7, #0]
 80031d2:	68b9      	ldr	r1, [r7, #8]
 80031d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80031d6:	f000 fa7c 	bl	80036d2 <prvCopyDataToQueue>
 80031da:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80031dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d010      	beq.n	8003206 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80031e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031e6:	3324      	adds	r3, #36	; 0x24
 80031e8:	4618      	mov	r0, r3
 80031ea:	f000 ff83 	bl	80040f4 <xTaskRemoveFromEventList>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d013      	beq.n	800321c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80031f4:	4b3f      	ldr	r3, [pc, #252]	; (80032f4 <xQueueGenericSend+0x1f0>)
 80031f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031fa:	601a      	str	r2, [r3, #0]
 80031fc:	f3bf 8f4f 	dsb	sy
 8003200:	f3bf 8f6f 	isb	sy
 8003204:	e00a      	b.n	800321c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003208:	2b00      	cmp	r3, #0
 800320a:	d007      	beq.n	800321c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800320c:	4b39      	ldr	r3, [pc, #228]	; (80032f4 <xQueueGenericSend+0x1f0>)
 800320e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003212:	601a      	str	r2, [r3, #0]
 8003214:	f3bf 8f4f 	dsb	sy
 8003218:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800321c:	f001 fb7c 	bl	8004918 <vPortExitCritical>
				return pdPASS;
 8003220:	2301      	movs	r3, #1
 8003222:	e063      	b.n	80032ec <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d103      	bne.n	8003232 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800322a:	f001 fb75 	bl	8004918 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800322e:	2300      	movs	r3, #0
 8003230:	e05c      	b.n	80032ec <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003234:	2b00      	cmp	r3, #0
 8003236:	d106      	bne.n	8003246 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003238:	f107 0314 	add.w	r3, r7, #20
 800323c:	4618      	mov	r0, r3
 800323e:	f000 ffbb 	bl	80041b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003242:	2301      	movs	r3, #1
 8003244:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003246:	f001 fb67 	bl	8004918 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800324a:	f000 fd73 	bl	8003d34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800324e:	f001 fb35 	bl	80048bc <vPortEnterCritical>
 8003252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003254:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003258:	b25b      	sxtb	r3, r3
 800325a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800325e:	d103      	bne.n	8003268 <xQueueGenericSend+0x164>
 8003260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003262:	2200      	movs	r2, #0
 8003264:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800326a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800326e:	b25b      	sxtb	r3, r3
 8003270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003274:	d103      	bne.n	800327e <xQueueGenericSend+0x17a>
 8003276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003278:	2200      	movs	r2, #0
 800327a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800327e:	f001 fb4b 	bl	8004918 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003282:	1d3a      	adds	r2, r7, #4
 8003284:	f107 0314 	add.w	r3, r7, #20
 8003288:	4611      	mov	r1, r2
 800328a:	4618      	mov	r0, r3
 800328c:	f000 ffaa 	bl	80041e4 <xTaskCheckForTimeOut>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d124      	bne.n	80032e0 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003296:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003298:	f000 fb13 	bl	80038c2 <prvIsQueueFull>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d018      	beq.n	80032d4 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80032a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032a4:	3310      	adds	r3, #16
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	4611      	mov	r1, r2
 80032aa:	4618      	mov	r0, r3
 80032ac:	f000 fefe 	bl	80040ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80032b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80032b2:	f000 fa9e 	bl	80037f2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80032b6:	f000 fd4b 	bl	8003d50 <xTaskResumeAll>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	f47f af7c 	bne.w	80031ba <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80032c2:	4b0c      	ldr	r3, [pc, #48]	; (80032f4 <xQueueGenericSend+0x1f0>)
 80032c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032c8:	601a      	str	r2, [r3, #0]
 80032ca:	f3bf 8f4f 	dsb	sy
 80032ce:	f3bf 8f6f 	isb	sy
 80032d2:	e772      	b.n	80031ba <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80032d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80032d6:	f000 fa8c 	bl	80037f2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80032da:	f000 fd39 	bl	8003d50 <xTaskResumeAll>
 80032de:	e76c      	b.n	80031ba <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80032e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80032e2:	f000 fa86 	bl	80037f2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80032e6:	f000 fd33 	bl	8003d50 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80032ea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3738      	adds	r7, #56	; 0x38
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	e000ed04 	.word	0xe000ed04

080032f8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b08e      	sub	sp, #56	; 0x38
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	607a      	str	r2, [r7, #4]
 8003304:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800330a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800330c:	2b00      	cmp	r3, #0
 800330e:	d109      	bne.n	8003324 <xQueueGenericSendFromISR+0x2c>
 8003310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003314:	f383 8811 	msr	BASEPRI, r3
 8003318:	f3bf 8f6f 	isb	sy
 800331c:	f3bf 8f4f 	dsb	sy
 8003320:	627b      	str	r3, [r7, #36]	; 0x24
 8003322:	e7fe      	b.n	8003322 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d103      	bne.n	8003332 <xQueueGenericSendFromISR+0x3a>
 800332a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800332c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332e:	2b00      	cmp	r3, #0
 8003330:	d101      	bne.n	8003336 <xQueueGenericSendFromISR+0x3e>
 8003332:	2301      	movs	r3, #1
 8003334:	e000      	b.n	8003338 <xQueueGenericSendFromISR+0x40>
 8003336:	2300      	movs	r3, #0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d109      	bne.n	8003350 <xQueueGenericSendFromISR+0x58>
 800333c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003340:	f383 8811 	msr	BASEPRI, r3
 8003344:	f3bf 8f6f 	isb	sy
 8003348:	f3bf 8f4f 	dsb	sy
 800334c:	623b      	str	r3, [r7, #32]
 800334e:	e7fe      	b.n	800334e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	2b02      	cmp	r3, #2
 8003354:	d103      	bne.n	800335e <xQueueGenericSendFromISR+0x66>
 8003356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800335a:	2b01      	cmp	r3, #1
 800335c:	d101      	bne.n	8003362 <xQueueGenericSendFromISR+0x6a>
 800335e:	2301      	movs	r3, #1
 8003360:	e000      	b.n	8003364 <xQueueGenericSendFromISR+0x6c>
 8003362:	2300      	movs	r3, #0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d109      	bne.n	800337c <xQueueGenericSendFromISR+0x84>
 8003368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800336c:	f383 8811 	msr	BASEPRI, r3
 8003370:	f3bf 8f6f 	isb	sy
 8003374:	f3bf 8f4f 	dsb	sy
 8003378:	61fb      	str	r3, [r7, #28]
 800337a:	e7fe      	b.n	800337a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800337c:	f001 fb7a 	bl	8004a74 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003380:	f3ef 8211 	mrs	r2, BASEPRI
 8003384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003388:	f383 8811 	msr	BASEPRI, r3
 800338c:	f3bf 8f6f 	isb	sy
 8003390:	f3bf 8f4f 	dsb	sy
 8003394:	61ba      	str	r2, [r7, #24]
 8003396:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003398:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800339a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800339c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800339e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d302      	bcc.n	80033ae <xQueueGenericSendFromISR+0xb6>
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d12c      	bne.n	8003408 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80033ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80033b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80033b8:	683a      	ldr	r2, [r7, #0]
 80033ba:	68b9      	ldr	r1, [r7, #8]
 80033bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80033be:	f000 f988 	bl	80036d2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80033c2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80033c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ca:	d112      	bne.n	80033f2 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80033cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d016      	beq.n	8003402 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80033d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d6:	3324      	adds	r3, #36	; 0x24
 80033d8:	4618      	mov	r0, r3
 80033da:	f000 fe8b 	bl	80040f4 <xTaskRemoveFromEventList>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d00e      	beq.n	8003402 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d00b      	beq.n	8003402 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2201      	movs	r2, #1
 80033ee:	601a      	str	r2, [r3, #0]
 80033f0:	e007      	b.n	8003402 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80033f2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80033f6:	3301      	adds	r3, #1
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	b25a      	sxtb	r2, r3
 80033fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003402:	2301      	movs	r3, #1
 8003404:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003406:	e001      	b.n	800340c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003408:	2300      	movs	r3, #0
 800340a:	637b      	str	r3, [r7, #52]	; 0x34
 800340c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800340e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003418:	4618      	mov	r0, r3
 800341a:	3738      	adds	r7, #56	; 0x38
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}

08003420 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b08c      	sub	sp, #48	; 0x30
 8003424:	af00      	add	r7, sp, #0
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800342c:	2300      	movs	r3, #0
 800342e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003436:	2b00      	cmp	r3, #0
 8003438:	d109      	bne.n	800344e <xQueueReceive+0x2e>
	__asm volatile
 800343a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800343e:	f383 8811 	msr	BASEPRI, r3
 8003442:	f3bf 8f6f 	isb	sy
 8003446:	f3bf 8f4f 	dsb	sy
 800344a:	623b      	str	r3, [r7, #32]
 800344c:	e7fe      	b.n	800344c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d103      	bne.n	800345c <xQueueReceive+0x3c>
 8003454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003458:	2b00      	cmp	r3, #0
 800345a:	d101      	bne.n	8003460 <xQueueReceive+0x40>
 800345c:	2301      	movs	r3, #1
 800345e:	e000      	b.n	8003462 <xQueueReceive+0x42>
 8003460:	2300      	movs	r3, #0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d109      	bne.n	800347a <xQueueReceive+0x5a>
 8003466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800346a:	f383 8811 	msr	BASEPRI, r3
 800346e:	f3bf 8f6f 	isb	sy
 8003472:	f3bf 8f4f 	dsb	sy
 8003476:	61fb      	str	r3, [r7, #28]
 8003478:	e7fe      	b.n	8003478 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800347a:	f000 fff1 	bl	8004460 <xTaskGetSchedulerState>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d102      	bne.n	800348a <xQueueReceive+0x6a>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d101      	bne.n	800348e <xQueueReceive+0x6e>
 800348a:	2301      	movs	r3, #1
 800348c:	e000      	b.n	8003490 <xQueueReceive+0x70>
 800348e:	2300      	movs	r3, #0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d109      	bne.n	80034a8 <xQueueReceive+0x88>
 8003494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003498:	f383 8811 	msr	BASEPRI, r3
 800349c:	f3bf 8f6f 	isb	sy
 80034a0:	f3bf 8f4f 	dsb	sy
 80034a4:	61bb      	str	r3, [r7, #24]
 80034a6:	e7fe      	b.n	80034a6 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80034a8:	f001 fa08 	bl	80048bc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80034ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034b0:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80034b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d01f      	beq.n	80034f8 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80034b8:	68b9      	ldr	r1, [r7, #8]
 80034ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80034bc:	f000 f973 	bl	80037a6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80034c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c2:	1e5a      	subs	r2, r3, #1
 80034c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034c6:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80034c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ca:	691b      	ldr	r3, [r3, #16]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d00f      	beq.n	80034f0 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80034d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034d2:	3310      	adds	r3, #16
 80034d4:	4618      	mov	r0, r3
 80034d6:	f000 fe0d 	bl	80040f4 <xTaskRemoveFromEventList>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d007      	beq.n	80034f0 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80034e0:	4b3c      	ldr	r3, [pc, #240]	; (80035d4 <xQueueReceive+0x1b4>)
 80034e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034e6:	601a      	str	r2, [r3, #0]
 80034e8:	f3bf 8f4f 	dsb	sy
 80034ec:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80034f0:	f001 fa12 	bl	8004918 <vPortExitCritical>
				return pdPASS;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e069      	b.n	80035cc <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d103      	bne.n	8003506 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80034fe:	f001 fa0b 	bl	8004918 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003502:	2300      	movs	r3, #0
 8003504:	e062      	b.n	80035cc <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003508:	2b00      	cmp	r3, #0
 800350a:	d106      	bne.n	800351a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800350c:	f107 0310 	add.w	r3, r7, #16
 8003510:	4618      	mov	r0, r3
 8003512:	f000 fe51 	bl	80041b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003516:	2301      	movs	r3, #1
 8003518:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800351a:	f001 f9fd 	bl	8004918 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800351e:	f000 fc09 	bl	8003d34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003522:	f001 f9cb 	bl	80048bc <vPortEnterCritical>
 8003526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003528:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800352c:	b25b      	sxtb	r3, r3
 800352e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003532:	d103      	bne.n	800353c <xQueueReceive+0x11c>
 8003534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003536:	2200      	movs	r2, #0
 8003538:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800353c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800353e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003542:	b25b      	sxtb	r3, r3
 8003544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003548:	d103      	bne.n	8003552 <xQueueReceive+0x132>
 800354a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800354c:	2200      	movs	r2, #0
 800354e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003552:	f001 f9e1 	bl	8004918 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003556:	1d3a      	adds	r2, r7, #4
 8003558:	f107 0310 	add.w	r3, r7, #16
 800355c:	4611      	mov	r1, r2
 800355e:	4618      	mov	r0, r3
 8003560:	f000 fe40 	bl	80041e4 <xTaskCheckForTimeOut>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d123      	bne.n	80035b2 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800356a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800356c:	f000 f993 	bl	8003896 <prvIsQueueEmpty>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d017      	beq.n	80035a6 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003578:	3324      	adds	r3, #36	; 0x24
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	4611      	mov	r1, r2
 800357e:	4618      	mov	r0, r3
 8003580:	f000 fd94 	bl	80040ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003584:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003586:	f000 f934 	bl	80037f2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800358a:	f000 fbe1 	bl	8003d50 <xTaskResumeAll>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d189      	bne.n	80034a8 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8003594:	4b0f      	ldr	r3, [pc, #60]	; (80035d4 <xQueueReceive+0x1b4>)
 8003596:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800359a:	601a      	str	r2, [r3, #0]
 800359c:	f3bf 8f4f 	dsb	sy
 80035a0:	f3bf 8f6f 	isb	sy
 80035a4:	e780      	b.n	80034a8 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80035a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80035a8:	f000 f923 	bl	80037f2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80035ac:	f000 fbd0 	bl	8003d50 <xTaskResumeAll>
 80035b0:	e77a      	b.n	80034a8 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80035b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80035b4:	f000 f91d 	bl	80037f2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80035b8:	f000 fbca 	bl	8003d50 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80035bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80035be:	f000 f96a 	bl	8003896 <prvIsQueueEmpty>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	f43f af6f 	beq.w	80034a8 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80035ca:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3730      	adds	r7, #48	; 0x30
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	e000ed04 	.word	0xe000ed04

080035d8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b08e      	sub	sp, #56	; 0x38
 80035dc:	af00      	add	r7, sp, #0
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	60b9      	str	r1, [r7, #8]
 80035e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80035e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d109      	bne.n	8003602 <xQueueReceiveFromISR+0x2a>
 80035ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f2:	f383 8811 	msr	BASEPRI, r3
 80035f6:	f3bf 8f6f 	isb	sy
 80035fa:	f3bf 8f4f 	dsb	sy
 80035fe:	623b      	str	r3, [r7, #32]
 8003600:	e7fe      	b.n	8003600 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d103      	bne.n	8003610 <xQueueReceiveFromISR+0x38>
 8003608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800360a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360c:	2b00      	cmp	r3, #0
 800360e:	d101      	bne.n	8003614 <xQueueReceiveFromISR+0x3c>
 8003610:	2301      	movs	r3, #1
 8003612:	e000      	b.n	8003616 <xQueueReceiveFromISR+0x3e>
 8003614:	2300      	movs	r3, #0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d109      	bne.n	800362e <xQueueReceiveFromISR+0x56>
 800361a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800361e:	f383 8811 	msr	BASEPRI, r3
 8003622:	f3bf 8f6f 	isb	sy
 8003626:	f3bf 8f4f 	dsb	sy
 800362a:	61fb      	str	r3, [r7, #28]
 800362c:	e7fe      	b.n	800362c <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800362e:	f001 fa21 	bl	8004a74 <vPortValidateInterruptPriority>
	__asm volatile
 8003632:	f3ef 8211 	mrs	r2, BASEPRI
 8003636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800363a:	f383 8811 	msr	BASEPRI, r3
 800363e:	f3bf 8f6f 	isb	sy
 8003642:	f3bf 8f4f 	dsb	sy
 8003646:	61ba      	str	r2, [r7, #24]
 8003648:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800364a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800364c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800364e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003652:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003656:	2b00      	cmp	r3, #0
 8003658:	d02f      	beq.n	80036ba <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800365a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800365c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003660:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003664:	68b9      	ldr	r1, [r7, #8]
 8003666:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003668:	f000 f89d 	bl	80037a6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800366c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800366e:	1e5a      	subs	r2, r3, #1
 8003670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003672:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003674:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800367c:	d112      	bne.n	80036a4 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800367e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003680:	691b      	ldr	r3, [r3, #16]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d016      	beq.n	80036b4 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003688:	3310      	adds	r3, #16
 800368a:	4618      	mov	r0, r3
 800368c:	f000 fd32 	bl	80040f4 <xTaskRemoveFromEventList>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00e      	beq.n	80036b4 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d00b      	beq.n	80036b4 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	601a      	str	r2, [r3, #0]
 80036a2:	e007      	b.n	80036b4 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80036a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80036a8:	3301      	adds	r3, #1
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	b25a      	sxtb	r2, r3
 80036ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80036b4:	2301      	movs	r3, #1
 80036b6:	637b      	str	r3, [r7, #52]	; 0x34
 80036b8:	e001      	b.n	80036be <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 80036ba:	2300      	movs	r3, #0
 80036bc:	637b      	str	r3, [r7, #52]	; 0x34
 80036be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036c0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80036c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3738      	adds	r7, #56	; 0x38
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}

080036d2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80036d2:	b580      	push	{r7, lr}
 80036d4:	b086      	sub	sp, #24
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	60f8      	str	r0, [r7, #12]
 80036da:	60b9      	str	r1, [r7, #8]
 80036dc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80036de:	2300      	movs	r3, #0
 80036e0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d10d      	bne.n	800370c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d14d      	bne.n	8003794 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	4618      	mov	r0, r3
 80036fe:	f000 fecd 	bl	800449c <xTaskPriorityDisinherit>
 8003702:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2200      	movs	r2, #0
 8003708:	609a      	str	r2, [r3, #8]
 800370a:	e043      	b.n	8003794 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d119      	bne.n	8003746 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6858      	ldr	r0, [r3, #4]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371a:	461a      	mov	r2, r3
 800371c:	68b9      	ldr	r1, [r7, #8]
 800371e:	f001 fbe7 	bl	8004ef0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	685a      	ldr	r2, [r3, #4]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372a:	441a      	add	r2, r3
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	685a      	ldr	r2, [r3, #4]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	429a      	cmp	r2, r3
 800373a:	d32b      	bcc.n	8003794 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	605a      	str	r2, [r3, #4]
 8003744:	e026      	b.n	8003794 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	68d8      	ldr	r0, [r3, #12]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374e:	461a      	mov	r2, r3
 8003750:	68b9      	ldr	r1, [r7, #8]
 8003752:	f001 fbcd 	bl	8004ef0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	68da      	ldr	r2, [r3, #12]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375e:	425b      	negs	r3, r3
 8003760:	441a      	add	r2, r3
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	68da      	ldr	r2, [r3, #12]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	429a      	cmp	r2, r3
 8003770:	d207      	bcs.n	8003782 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	689a      	ldr	r2, [r3, #8]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377a:	425b      	negs	r3, r3
 800377c:	441a      	add	r2, r3
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2b02      	cmp	r3, #2
 8003786:	d105      	bne.n	8003794 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d002      	beq.n	8003794 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	3b01      	subs	r3, #1
 8003792:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	1c5a      	adds	r2, r3, #1
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800379c:	697b      	ldr	r3, [r7, #20]
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3718      	adds	r7, #24
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}

080037a6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80037a6:	b580      	push	{r7, lr}
 80037a8:	b082      	sub	sp, #8
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
 80037ae:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d018      	beq.n	80037ea <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	68da      	ldr	r2, [r3, #12]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c0:	441a      	add	r2, r3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	68da      	ldr	r2, [r3, #12]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d303      	bcc.n	80037da <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	68d9      	ldr	r1, [r3, #12]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e2:	461a      	mov	r2, r3
 80037e4:	6838      	ldr	r0, [r7, #0]
 80037e6:	f001 fb83 	bl	8004ef0 <memcpy>
	}
}
 80037ea:	bf00      	nop
 80037ec:	3708      	adds	r7, #8
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}

080037f2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80037f2:	b580      	push	{r7, lr}
 80037f4:	b084      	sub	sp, #16
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80037fa:	f001 f85f 	bl	80048bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003804:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003806:	e011      	b.n	800382c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380c:	2b00      	cmp	r3, #0
 800380e:	d012      	beq.n	8003836 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	3324      	adds	r3, #36	; 0x24
 8003814:	4618      	mov	r0, r3
 8003816:	f000 fc6d 	bl	80040f4 <xTaskRemoveFromEventList>
 800381a:	4603      	mov	r3, r0
 800381c:	2b00      	cmp	r3, #0
 800381e:	d001      	beq.n	8003824 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003820:	f000 fd40 	bl	80042a4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003824:	7bfb      	ldrb	r3, [r7, #15]
 8003826:	3b01      	subs	r3, #1
 8003828:	b2db      	uxtb	r3, r3
 800382a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800382c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003830:	2b00      	cmp	r3, #0
 8003832:	dce9      	bgt.n	8003808 <prvUnlockQueue+0x16>
 8003834:	e000      	b.n	8003838 <prvUnlockQueue+0x46>
					break;
 8003836:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	22ff      	movs	r2, #255	; 0xff
 800383c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003840:	f001 f86a 	bl	8004918 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003844:	f001 f83a 	bl	80048bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800384e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003850:	e011      	b.n	8003876 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	691b      	ldr	r3, [r3, #16]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d012      	beq.n	8003880 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	3310      	adds	r3, #16
 800385e:	4618      	mov	r0, r3
 8003860:	f000 fc48 	bl	80040f4 <xTaskRemoveFromEventList>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d001      	beq.n	800386e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800386a:	f000 fd1b 	bl	80042a4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800386e:	7bbb      	ldrb	r3, [r7, #14]
 8003870:	3b01      	subs	r3, #1
 8003872:	b2db      	uxtb	r3, r3
 8003874:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003876:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800387a:	2b00      	cmp	r3, #0
 800387c:	dce9      	bgt.n	8003852 <prvUnlockQueue+0x60>
 800387e:	e000      	b.n	8003882 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003880:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	22ff      	movs	r2, #255	; 0xff
 8003886:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800388a:	f001 f845 	bl	8004918 <vPortExitCritical>
}
 800388e:	bf00      	nop
 8003890:	3710      	adds	r7, #16
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}

08003896 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003896:	b580      	push	{r7, lr}
 8003898:	b084      	sub	sp, #16
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800389e:	f001 f80d 	bl	80048bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d102      	bne.n	80038b0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80038aa:	2301      	movs	r3, #1
 80038ac:	60fb      	str	r3, [r7, #12]
 80038ae:	e001      	b.n	80038b4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80038b0:	2300      	movs	r3, #0
 80038b2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80038b4:	f001 f830 	bl	8004918 <vPortExitCritical>

	return xReturn;
 80038b8:	68fb      	ldr	r3, [r7, #12]
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3710      	adds	r7, #16
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}

080038c2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80038c2:	b580      	push	{r7, lr}
 80038c4:	b084      	sub	sp, #16
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80038ca:	f000 fff7 	bl	80048bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d102      	bne.n	80038e0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80038da:	2301      	movs	r3, #1
 80038dc:	60fb      	str	r3, [r7, #12]
 80038de:	e001      	b.n	80038e4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80038e0:	2300      	movs	r3, #0
 80038e2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80038e4:	f001 f818 	bl	8004918 <vPortExitCritical>

	return xReturn;
 80038e8:	68fb      	ldr	r3, [r7, #12]
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3710      	adds	r7, #16
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}

080038f2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80038f2:	b580      	push	{r7, lr}
 80038f4:	b08e      	sub	sp, #56	; 0x38
 80038f6:	af04      	add	r7, sp, #16
 80038f8:	60f8      	str	r0, [r7, #12]
 80038fa:	60b9      	str	r1, [r7, #8]
 80038fc:	607a      	str	r2, [r7, #4]
 80038fe:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003902:	2b00      	cmp	r3, #0
 8003904:	d109      	bne.n	800391a <xTaskCreateStatic+0x28>
	__asm volatile
 8003906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800390a:	f383 8811 	msr	BASEPRI, r3
 800390e:	f3bf 8f6f 	isb	sy
 8003912:	f3bf 8f4f 	dsb	sy
 8003916:	623b      	str	r3, [r7, #32]
 8003918:	e7fe      	b.n	8003918 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800391a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800391c:	2b00      	cmp	r3, #0
 800391e:	d109      	bne.n	8003934 <xTaskCreateStatic+0x42>
 8003920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003924:	f383 8811 	msr	BASEPRI, r3
 8003928:	f3bf 8f6f 	isb	sy
 800392c:	f3bf 8f4f 	dsb	sy
 8003930:	61fb      	str	r3, [r7, #28]
 8003932:	e7fe      	b.n	8003932 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003934:	2354      	movs	r3, #84	; 0x54
 8003936:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	2b54      	cmp	r3, #84	; 0x54
 800393c:	d009      	beq.n	8003952 <xTaskCreateStatic+0x60>
 800393e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003942:	f383 8811 	msr	BASEPRI, r3
 8003946:	f3bf 8f6f 	isb	sy
 800394a:	f3bf 8f4f 	dsb	sy
 800394e:	61bb      	str	r3, [r7, #24]
 8003950:	e7fe      	b.n	8003950 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003952:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003956:	2b00      	cmp	r3, #0
 8003958:	d01e      	beq.n	8003998 <xTaskCreateStatic+0xa6>
 800395a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800395c:	2b00      	cmp	r3, #0
 800395e:	d01b      	beq.n	8003998 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003962:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003966:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003968:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800396a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396c:	2202      	movs	r2, #2
 800396e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003972:	2300      	movs	r3, #0
 8003974:	9303      	str	r3, [sp, #12]
 8003976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003978:	9302      	str	r3, [sp, #8]
 800397a:	f107 0314 	add.w	r3, r7, #20
 800397e:	9301      	str	r3, [sp, #4]
 8003980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003982:	9300      	str	r3, [sp, #0]
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	68b9      	ldr	r1, [r7, #8]
 800398a:	68f8      	ldr	r0, [r7, #12]
 800398c:	f000 f850 	bl	8003a30 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003990:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003992:	f000 f8d3 	bl	8003b3c <prvAddNewTaskToReadyList>
 8003996:	e001      	b.n	800399c <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8003998:	2300      	movs	r3, #0
 800399a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800399c:	697b      	ldr	r3, [r7, #20]
	}
 800399e:	4618      	mov	r0, r3
 80039a0:	3728      	adds	r7, #40	; 0x28
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}

080039a6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80039a6:	b580      	push	{r7, lr}
 80039a8:	b08c      	sub	sp, #48	; 0x30
 80039aa:	af04      	add	r7, sp, #16
 80039ac:	60f8      	str	r0, [r7, #12]
 80039ae:	60b9      	str	r1, [r7, #8]
 80039b0:	603b      	str	r3, [r7, #0]
 80039b2:	4613      	mov	r3, r2
 80039b4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80039b6:	88fb      	ldrh	r3, [r7, #6]
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	4618      	mov	r0, r3
 80039bc:	f001 f898 	bl	8004af0 <pvPortMalloc>
 80039c0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d00e      	beq.n	80039e6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80039c8:	2054      	movs	r0, #84	; 0x54
 80039ca:	f001 f891 	bl	8004af0 <pvPortMalloc>
 80039ce:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d003      	beq.n	80039de <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	697a      	ldr	r2, [r7, #20]
 80039da:	631a      	str	r2, [r3, #48]	; 0x30
 80039dc:	e005      	b.n	80039ea <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80039de:	6978      	ldr	r0, [r7, #20]
 80039e0:	f001 f948 	bl	8004c74 <vPortFree>
 80039e4:	e001      	b.n	80039ea <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80039e6:	2300      	movs	r3, #0
 80039e8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d017      	beq.n	8003a20 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	2200      	movs	r2, #0
 80039f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80039f8:	88fa      	ldrh	r2, [r7, #6]
 80039fa:	2300      	movs	r3, #0
 80039fc:	9303      	str	r3, [sp, #12]
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	9302      	str	r3, [sp, #8]
 8003a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a04:	9301      	str	r3, [sp, #4]
 8003a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a08:	9300      	str	r3, [sp, #0]
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	68b9      	ldr	r1, [r7, #8]
 8003a0e:	68f8      	ldr	r0, [r7, #12]
 8003a10:	f000 f80e 	bl	8003a30 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a14:	69f8      	ldr	r0, [r7, #28]
 8003a16:	f000 f891 	bl	8003b3c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	61bb      	str	r3, [r7, #24]
 8003a1e:	e002      	b.n	8003a26 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003a20:	f04f 33ff 	mov.w	r3, #4294967295
 8003a24:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003a26:	69bb      	ldr	r3, [r7, #24]
	}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3720      	adds	r7, #32
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}

08003a30 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b088      	sub	sp, #32
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	607a      	str	r2, [r7, #4]
 8003a3c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003a48:	3b01      	subs	r3, #1
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	4413      	add	r3, r2
 8003a4e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	f023 0307 	bic.w	r3, r3, #7
 8003a56:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003a58:	69bb      	ldr	r3, [r7, #24]
 8003a5a:	f003 0307 	and.w	r3, r3, #7
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d009      	beq.n	8003a76 <prvInitialiseNewTask+0x46>
 8003a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a66:	f383 8811 	msr	BASEPRI, r3
 8003a6a:	f3bf 8f6f 	isb	sy
 8003a6e:	f3bf 8f4f 	dsb	sy
 8003a72:	617b      	str	r3, [r7, #20]
 8003a74:	e7fe      	b.n	8003a74 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d01f      	beq.n	8003abc <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	61fb      	str	r3, [r7, #28]
 8003a80:	e012      	b.n	8003aa8 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003a82:	68ba      	ldr	r2, [r7, #8]
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	4413      	add	r3, r2
 8003a88:	7819      	ldrb	r1, [r3, #0]
 8003a8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	4413      	add	r3, r2
 8003a90:	3334      	adds	r3, #52	; 0x34
 8003a92:	460a      	mov	r2, r1
 8003a94:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003a96:	68ba      	ldr	r2, [r7, #8]
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	4413      	add	r3, r2
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d006      	beq.n	8003ab0 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	3301      	adds	r3, #1
 8003aa6:	61fb      	str	r3, [r7, #28]
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	2b0f      	cmp	r3, #15
 8003aac:	d9e9      	bls.n	8003a82 <prvInitialiseNewTask+0x52>
 8003aae:	e000      	b.n	8003ab2 <prvInitialiseNewTask+0x82>
			{
				break;
 8003ab0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003aba:	e003      	b.n	8003ac4 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ac6:	2b06      	cmp	r3, #6
 8003ac8:	d901      	bls.n	8003ace <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003aca:	2306      	movs	r3, #6
 8003acc:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ad2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ad8:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003adc:	2200      	movs	r2, #0
 8003ade:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae2:	3304      	adds	r3, #4
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f7ff f93f 	bl	8002d68 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aec:	3318      	adds	r3, #24
 8003aee:	4618      	mov	r0, r3
 8003af0:	f7ff f93a 	bl	8002d68 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003af8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003afc:	f1c3 0207 	rsb	r2, r3, #7
 8003b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b02:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b08:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003b18:	683a      	ldr	r2, [r7, #0]
 8003b1a:	68f9      	ldr	r1, [r7, #12]
 8003b1c:	69b8      	ldr	r0, [r7, #24]
 8003b1e:	f000 fda7 	bl	8004670 <pxPortInitialiseStack>
 8003b22:	4602      	mov	r2, r0
 8003b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b26:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d002      	beq.n	8003b34 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b32:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b34:	bf00      	nop
 8003b36:	3720      	adds	r7, #32
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b082      	sub	sp, #8
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003b44:	f000 feba 	bl	80048bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003b48:	4b2a      	ldr	r3, [pc, #168]	; (8003bf4 <prvAddNewTaskToReadyList+0xb8>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	3301      	adds	r3, #1
 8003b4e:	4a29      	ldr	r2, [pc, #164]	; (8003bf4 <prvAddNewTaskToReadyList+0xb8>)
 8003b50:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003b52:	4b29      	ldr	r3, [pc, #164]	; (8003bf8 <prvAddNewTaskToReadyList+0xbc>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d109      	bne.n	8003b6e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003b5a:	4a27      	ldr	r2, [pc, #156]	; (8003bf8 <prvAddNewTaskToReadyList+0xbc>)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003b60:	4b24      	ldr	r3, [pc, #144]	; (8003bf4 <prvAddNewTaskToReadyList+0xb8>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d110      	bne.n	8003b8a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003b68:	f000 fbc0 	bl	80042ec <prvInitialiseTaskLists>
 8003b6c:	e00d      	b.n	8003b8a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003b6e:	4b23      	ldr	r3, [pc, #140]	; (8003bfc <prvAddNewTaskToReadyList+0xc0>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d109      	bne.n	8003b8a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003b76:	4b20      	ldr	r3, [pc, #128]	; (8003bf8 <prvAddNewTaskToReadyList+0xbc>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d802      	bhi.n	8003b8a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003b84:	4a1c      	ldr	r2, [pc, #112]	; (8003bf8 <prvAddNewTaskToReadyList+0xbc>)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003b8a:	4b1d      	ldr	r3, [pc, #116]	; (8003c00 <prvAddNewTaskToReadyList+0xc4>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	3301      	adds	r3, #1
 8003b90:	4a1b      	ldr	r2, [pc, #108]	; (8003c00 <prvAddNewTaskToReadyList+0xc4>)
 8003b92:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b98:	2201      	movs	r2, #1
 8003b9a:	409a      	lsls	r2, r3
 8003b9c:	4b19      	ldr	r3, [pc, #100]	; (8003c04 <prvAddNewTaskToReadyList+0xc8>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	4a18      	ldr	r2, [pc, #96]	; (8003c04 <prvAddNewTaskToReadyList+0xc8>)
 8003ba4:	6013      	str	r3, [r2, #0]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003baa:	4613      	mov	r3, r2
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	4413      	add	r3, r2
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	4a15      	ldr	r2, [pc, #84]	; (8003c08 <prvAddNewTaskToReadyList+0xcc>)
 8003bb4:	441a      	add	r2, r3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	3304      	adds	r3, #4
 8003bba:	4619      	mov	r1, r3
 8003bbc:	4610      	mov	r0, r2
 8003bbe:	f7ff f8e0 	bl	8002d82 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003bc2:	f000 fea9 	bl	8004918 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003bc6:	4b0d      	ldr	r3, [pc, #52]	; (8003bfc <prvAddNewTaskToReadyList+0xc0>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d00e      	beq.n	8003bec <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003bce:	4b0a      	ldr	r3, [pc, #40]	; (8003bf8 <prvAddNewTaskToReadyList+0xbc>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d207      	bcs.n	8003bec <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003bdc:	4b0b      	ldr	r3, [pc, #44]	; (8003c0c <prvAddNewTaskToReadyList+0xd0>)
 8003bde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003be2:	601a      	str	r2, [r3, #0]
 8003be4:	f3bf 8f4f 	dsb	sy
 8003be8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003bec:	bf00      	nop
 8003bee:	3708      	adds	r7, #8
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	200003e8 	.word	0x200003e8
 8003bf8:	200002e8 	.word	0x200002e8
 8003bfc:	200003f4 	.word	0x200003f4
 8003c00:	20000404 	.word	0x20000404
 8003c04:	200003f0 	.word	0x200003f0
 8003c08:	200002ec 	.word	0x200002ec
 8003c0c:	e000ed04 	.word	0xe000ed04

08003c10 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d016      	beq.n	8003c50 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003c22:	4b13      	ldr	r3, [pc, #76]	; (8003c70 <vTaskDelay+0x60>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d009      	beq.n	8003c3e <vTaskDelay+0x2e>
 8003c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c2e:	f383 8811 	msr	BASEPRI, r3
 8003c32:	f3bf 8f6f 	isb	sy
 8003c36:	f3bf 8f4f 	dsb	sy
 8003c3a:	60bb      	str	r3, [r7, #8]
 8003c3c:	e7fe      	b.n	8003c3c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8003c3e:	f000 f879 	bl	8003d34 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003c42:	2100      	movs	r1, #0
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f000 fcad 	bl	80045a4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003c4a:	f000 f881 	bl	8003d50 <xTaskResumeAll>
 8003c4e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d107      	bne.n	8003c66 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8003c56:	4b07      	ldr	r3, [pc, #28]	; (8003c74 <vTaskDelay+0x64>)
 8003c58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c5c:	601a      	str	r2, [r3, #0]
 8003c5e:	f3bf 8f4f 	dsb	sy
 8003c62:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003c66:	bf00      	nop
 8003c68:	3710      	adds	r7, #16
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	20000410 	.word	0x20000410
 8003c74:	e000ed04 	.word	0xe000ed04

08003c78 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b08a      	sub	sp, #40	; 0x28
 8003c7c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003c82:	2300      	movs	r3, #0
 8003c84:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003c86:	463a      	mov	r2, r7
 8003c88:	1d39      	adds	r1, r7, #4
 8003c8a:	f107 0308 	add.w	r3, r7, #8
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7fc fc7e 	bl	8000590 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003c94:	6839      	ldr	r1, [r7, #0]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	68ba      	ldr	r2, [r7, #8]
 8003c9a:	9202      	str	r2, [sp, #8]
 8003c9c:	9301      	str	r3, [sp, #4]
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	9300      	str	r3, [sp, #0]
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	460a      	mov	r2, r1
 8003ca6:	491d      	ldr	r1, [pc, #116]	; (8003d1c <vTaskStartScheduler+0xa4>)
 8003ca8:	481d      	ldr	r0, [pc, #116]	; (8003d20 <vTaskStartScheduler+0xa8>)
 8003caa:	f7ff fe22 	bl	80038f2 <xTaskCreateStatic>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	4b1c      	ldr	r3, [pc, #112]	; (8003d24 <vTaskStartScheduler+0xac>)
 8003cb2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003cb4:	4b1b      	ldr	r3, [pc, #108]	; (8003d24 <vTaskStartScheduler+0xac>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d002      	beq.n	8003cc2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	617b      	str	r3, [r7, #20]
 8003cc0:	e001      	b.n	8003cc6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d115      	bne.n	8003cf8 <vTaskStartScheduler+0x80>
 8003ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd0:	f383 8811 	msr	BASEPRI, r3
 8003cd4:	f3bf 8f6f 	isb	sy
 8003cd8:	f3bf 8f4f 	dsb	sy
 8003cdc:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003cde:	4b12      	ldr	r3, [pc, #72]	; (8003d28 <vTaskStartScheduler+0xb0>)
 8003ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ce4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003ce6:	4b11      	ldr	r3, [pc, #68]	; (8003d2c <vTaskStartScheduler+0xb4>)
 8003ce8:	2201      	movs	r2, #1
 8003cea:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003cec:	4b10      	ldr	r3, [pc, #64]	; (8003d30 <vTaskStartScheduler+0xb8>)
 8003cee:	2200      	movs	r2, #0
 8003cf0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003cf2:	f000 fd45 	bl	8004780 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003cf6:	e00d      	b.n	8003d14 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cfe:	d109      	bne.n	8003d14 <vTaskStartScheduler+0x9c>
 8003d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d04:	f383 8811 	msr	BASEPRI, r3
 8003d08:	f3bf 8f6f 	isb	sy
 8003d0c:	f3bf 8f4f 	dsb	sy
 8003d10:	60fb      	str	r3, [r7, #12]
 8003d12:	e7fe      	b.n	8003d12 <vTaskStartScheduler+0x9a>
}
 8003d14:	bf00      	nop
 8003d16:	3718      	adds	r7, #24
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	08005858 	.word	0x08005858
 8003d20:	080042bd 	.word	0x080042bd
 8003d24:	2000040c 	.word	0x2000040c
 8003d28:	20000408 	.word	0x20000408
 8003d2c:	200003f4 	.word	0x200003f4
 8003d30:	200003ec 	.word	0x200003ec

08003d34 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003d34:	b480      	push	{r7}
 8003d36:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003d38:	4b04      	ldr	r3, [pc, #16]	; (8003d4c <vTaskSuspendAll+0x18>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	3301      	adds	r3, #1
 8003d3e:	4a03      	ldr	r2, [pc, #12]	; (8003d4c <vTaskSuspendAll+0x18>)
 8003d40:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8003d42:	bf00      	nop
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr
 8003d4c:	20000410 	.word	0x20000410

08003d50 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003d56:	2300      	movs	r3, #0
 8003d58:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003d5e:	4b41      	ldr	r3, [pc, #260]	; (8003e64 <xTaskResumeAll+0x114>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d109      	bne.n	8003d7a <xTaskResumeAll+0x2a>
 8003d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d6a:	f383 8811 	msr	BASEPRI, r3
 8003d6e:	f3bf 8f6f 	isb	sy
 8003d72:	f3bf 8f4f 	dsb	sy
 8003d76:	603b      	str	r3, [r7, #0]
 8003d78:	e7fe      	b.n	8003d78 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003d7a:	f000 fd9f 	bl	80048bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003d7e:	4b39      	ldr	r3, [pc, #228]	; (8003e64 <xTaskResumeAll+0x114>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	3b01      	subs	r3, #1
 8003d84:	4a37      	ldr	r2, [pc, #220]	; (8003e64 <xTaskResumeAll+0x114>)
 8003d86:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d88:	4b36      	ldr	r3, [pc, #216]	; (8003e64 <xTaskResumeAll+0x114>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d161      	bne.n	8003e54 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003d90:	4b35      	ldr	r3, [pc, #212]	; (8003e68 <xTaskResumeAll+0x118>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d05d      	beq.n	8003e54 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d98:	e02e      	b.n	8003df8 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d9a:	4b34      	ldr	r3, [pc, #208]	; (8003e6c <xTaskResumeAll+0x11c>)
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	3318      	adds	r3, #24
 8003da6:	4618      	mov	r0, r3
 8003da8:	f7ff f848 	bl	8002e3c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	3304      	adds	r3, #4
 8003db0:	4618      	mov	r0, r3
 8003db2:	f7ff f843 	bl	8002e3c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dba:	2201      	movs	r2, #1
 8003dbc:	409a      	lsls	r2, r3
 8003dbe:	4b2c      	ldr	r3, [pc, #176]	; (8003e70 <xTaskResumeAll+0x120>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	4a2a      	ldr	r2, [pc, #168]	; (8003e70 <xTaskResumeAll+0x120>)
 8003dc6:	6013      	str	r3, [r2, #0]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dcc:	4613      	mov	r3, r2
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	4413      	add	r3, r2
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	4a27      	ldr	r2, [pc, #156]	; (8003e74 <xTaskResumeAll+0x124>)
 8003dd6:	441a      	add	r2, r3
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	3304      	adds	r3, #4
 8003ddc:	4619      	mov	r1, r3
 8003dde:	4610      	mov	r0, r2
 8003de0:	f7fe ffcf 	bl	8002d82 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003de8:	4b23      	ldr	r3, [pc, #140]	; (8003e78 <xTaskResumeAll+0x128>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d302      	bcc.n	8003df8 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8003df2:	4b22      	ldr	r3, [pc, #136]	; (8003e7c <xTaskResumeAll+0x12c>)
 8003df4:	2201      	movs	r2, #1
 8003df6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003df8:	4b1c      	ldr	r3, [pc, #112]	; (8003e6c <xTaskResumeAll+0x11c>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d1cc      	bne.n	8003d9a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d001      	beq.n	8003e0a <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003e06:	f000 fb0b 	bl	8004420 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003e0a:	4b1d      	ldr	r3, [pc, #116]	; (8003e80 <xTaskResumeAll+0x130>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d010      	beq.n	8003e38 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003e16:	f000 f837 	bl	8003e88 <xTaskIncrementTick>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d002      	beq.n	8003e26 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8003e20:	4b16      	ldr	r3, [pc, #88]	; (8003e7c <xTaskResumeAll+0x12c>)
 8003e22:	2201      	movs	r2, #1
 8003e24:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	3b01      	subs	r3, #1
 8003e2a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d1f1      	bne.n	8003e16 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8003e32:	4b13      	ldr	r3, [pc, #76]	; (8003e80 <xTaskResumeAll+0x130>)
 8003e34:	2200      	movs	r2, #0
 8003e36:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003e38:	4b10      	ldr	r3, [pc, #64]	; (8003e7c <xTaskResumeAll+0x12c>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d009      	beq.n	8003e54 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003e40:	2301      	movs	r3, #1
 8003e42:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003e44:	4b0f      	ldr	r3, [pc, #60]	; (8003e84 <xTaskResumeAll+0x134>)
 8003e46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e4a:	601a      	str	r2, [r3, #0]
 8003e4c:	f3bf 8f4f 	dsb	sy
 8003e50:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003e54:	f000 fd60 	bl	8004918 <vPortExitCritical>

	return xAlreadyYielded;
 8003e58:	68bb      	ldr	r3, [r7, #8]
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3710      	adds	r7, #16
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	20000410 	.word	0x20000410
 8003e68:	200003e8 	.word	0x200003e8
 8003e6c:	200003a8 	.word	0x200003a8
 8003e70:	200003f0 	.word	0x200003f0
 8003e74:	200002ec 	.word	0x200002ec
 8003e78:	200002e8 	.word	0x200002e8
 8003e7c:	200003fc 	.word	0x200003fc
 8003e80:	200003f8 	.word	0x200003f8
 8003e84:	e000ed04 	.word	0xe000ed04

08003e88 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b086      	sub	sp, #24
 8003e8c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e92:	4b4e      	ldr	r3, [pc, #312]	; (8003fcc <xTaskIncrementTick+0x144>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	f040 8087 	bne.w	8003faa <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003e9c:	4b4c      	ldr	r3, [pc, #304]	; (8003fd0 <xTaskIncrementTick+0x148>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	3301      	adds	r3, #1
 8003ea2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003ea4:	4a4a      	ldr	r2, [pc, #296]	; (8003fd0 <xTaskIncrementTick+0x148>)
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d11f      	bne.n	8003ef0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003eb0:	4b48      	ldr	r3, [pc, #288]	; (8003fd4 <xTaskIncrementTick+0x14c>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d009      	beq.n	8003ece <xTaskIncrementTick+0x46>
 8003eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ebe:	f383 8811 	msr	BASEPRI, r3
 8003ec2:	f3bf 8f6f 	isb	sy
 8003ec6:	f3bf 8f4f 	dsb	sy
 8003eca:	603b      	str	r3, [r7, #0]
 8003ecc:	e7fe      	b.n	8003ecc <xTaskIncrementTick+0x44>
 8003ece:	4b41      	ldr	r3, [pc, #260]	; (8003fd4 <xTaskIncrementTick+0x14c>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	60fb      	str	r3, [r7, #12]
 8003ed4:	4b40      	ldr	r3, [pc, #256]	; (8003fd8 <xTaskIncrementTick+0x150>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a3e      	ldr	r2, [pc, #248]	; (8003fd4 <xTaskIncrementTick+0x14c>)
 8003eda:	6013      	str	r3, [r2, #0]
 8003edc:	4a3e      	ldr	r2, [pc, #248]	; (8003fd8 <xTaskIncrementTick+0x150>)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6013      	str	r3, [r2, #0]
 8003ee2:	4b3e      	ldr	r3, [pc, #248]	; (8003fdc <xTaskIncrementTick+0x154>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	4a3c      	ldr	r2, [pc, #240]	; (8003fdc <xTaskIncrementTick+0x154>)
 8003eea:	6013      	str	r3, [r2, #0]
 8003eec:	f000 fa98 	bl	8004420 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003ef0:	4b3b      	ldr	r3, [pc, #236]	; (8003fe0 <xTaskIncrementTick+0x158>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	693a      	ldr	r2, [r7, #16]
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d348      	bcc.n	8003f8c <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003efa:	4b36      	ldr	r3, [pc, #216]	; (8003fd4 <xTaskIncrementTick+0x14c>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d104      	bne.n	8003f0e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f04:	4b36      	ldr	r3, [pc, #216]	; (8003fe0 <xTaskIncrementTick+0x158>)
 8003f06:	f04f 32ff 	mov.w	r2, #4294967295
 8003f0a:	601a      	str	r2, [r3, #0]
					break;
 8003f0c:	e03e      	b.n	8003f8c <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f0e:	4b31      	ldr	r3, [pc, #196]	; (8003fd4 <xTaskIncrementTick+0x14c>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003f1e:	693a      	ldr	r2, [r7, #16]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d203      	bcs.n	8003f2e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003f26:	4a2e      	ldr	r2, [pc, #184]	; (8003fe0 <xTaskIncrementTick+0x158>)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003f2c:	e02e      	b.n	8003f8c <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	3304      	adds	r3, #4
 8003f32:	4618      	mov	r0, r3
 8003f34:	f7fe ff82 	bl	8002e3c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d004      	beq.n	8003f4a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	3318      	adds	r3, #24
 8003f44:	4618      	mov	r0, r3
 8003f46:	f7fe ff79 	bl	8002e3c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f4e:	2201      	movs	r2, #1
 8003f50:	409a      	lsls	r2, r3
 8003f52:	4b24      	ldr	r3, [pc, #144]	; (8003fe4 <xTaskIncrementTick+0x15c>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	4a22      	ldr	r2, [pc, #136]	; (8003fe4 <xTaskIncrementTick+0x15c>)
 8003f5a:	6013      	str	r3, [r2, #0]
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f60:	4613      	mov	r3, r2
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	4413      	add	r3, r2
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	4a1f      	ldr	r2, [pc, #124]	; (8003fe8 <xTaskIncrementTick+0x160>)
 8003f6a:	441a      	add	r2, r3
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	3304      	adds	r3, #4
 8003f70:	4619      	mov	r1, r3
 8003f72:	4610      	mov	r0, r2
 8003f74:	f7fe ff05 	bl	8002d82 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f7c:	4b1b      	ldr	r3, [pc, #108]	; (8003fec <xTaskIncrementTick+0x164>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d3b9      	bcc.n	8003efa <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8003f86:	2301      	movs	r3, #1
 8003f88:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f8a:	e7b6      	b.n	8003efa <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003f8c:	4b17      	ldr	r3, [pc, #92]	; (8003fec <xTaskIncrementTick+0x164>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f92:	4915      	ldr	r1, [pc, #84]	; (8003fe8 <xTaskIncrementTick+0x160>)
 8003f94:	4613      	mov	r3, r2
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	4413      	add	r3, r2
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	440b      	add	r3, r1
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d907      	bls.n	8003fb4 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	617b      	str	r3, [r7, #20]
 8003fa8:	e004      	b.n	8003fb4 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003faa:	4b11      	ldr	r3, [pc, #68]	; (8003ff0 <xTaskIncrementTick+0x168>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	3301      	adds	r3, #1
 8003fb0:	4a0f      	ldr	r2, [pc, #60]	; (8003ff0 <xTaskIncrementTick+0x168>)
 8003fb2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003fb4:	4b0f      	ldr	r3, [pc, #60]	; (8003ff4 <xTaskIncrementTick+0x16c>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d001      	beq.n	8003fc0 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003fc0:	697b      	ldr	r3, [r7, #20]
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3718      	adds	r7, #24
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	bf00      	nop
 8003fcc:	20000410 	.word	0x20000410
 8003fd0:	200003ec 	.word	0x200003ec
 8003fd4:	200003a0 	.word	0x200003a0
 8003fd8:	200003a4 	.word	0x200003a4
 8003fdc:	20000400 	.word	0x20000400
 8003fe0:	20000408 	.word	0x20000408
 8003fe4:	200003f0 	.word	0x200003f0
 8003fe8:	200002ec 	.word	0x200002ec
 8003fec:	200002e8 	.word	0x200002e8
 8003ff0:	200003f8 	.word	0x200003f8
 8003ff4:	200003fc 	.word	0x200003fc

08003ff8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b087      	sub	sp, #28
 8003ffc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003ffe:	4b26      	ldr	r3, [pc, #152]	; (8004098 <vTaskSwitchContext+0xa0>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d003      	beq.n	800400e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004006:	4b25      	ldr	r3, [pc, #148]	; (800409c <vTaskSwitchContext+0xa4>)
 8004008:	2201      	movs	r2, #1
 800400a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800400c:	e03e      	b.n	800408c <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800400e:	4b23      	ldr	r3, [pc, #140]	; (800409c <vTaskSwitchContext+0xa4>)
 8004010:	2200      	movs	r2, #0
 8004012:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004014:	4b22      	ldr	r3, [pc, #136]	; (80040a0 <vTaskSwitchContext+0xa8>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	fab3 f383 	clz	r3, r3
 8004020:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004022:	7afb      	ldrb	r3, [r7, #11]
 8004024:	f1c3 031f 	rsb	r3, r3, #31
 8004028:	617b      	str	r3, [r7, #20]
 800402a:	491e      	ldr	r1, [pc, #120]	; (80040a4 <vTaskSwitchContext+0xac>)
 800402c:	697a      	ldr	r2, [r7, #20]
 800402e:	4613      	mov	r3, r2
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	4413      	add	r3, r2
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	440b      	add	r3, r1
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d109      	bne.n	8004052 <vTaskSwitchContext+0x5a>
	__asm volatile
 800403e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004042:	f383 8811 	msr	BASEPRI, r3
 8004046:	f3bf 8f6f 	isb	sy
 800404a:	f3bf 8f4f 	dsb	sy
 800404e:	607b      	str	r3, [r7, #4]
 8004050:	e7fe      	b.n	8004050 <vTaskSwitchContext+0x58>
 8004052:	697a      	ldr	r2, [r7, #20]
 8004054:	4613      	mov	r3, r2
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	4413      	add	r3, r2
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	4a11      	ldr	r2, [pc, #68]	; (80040a4 <vTaskSwitchContext+0xac>)
 800405e:	4413      	add	r3, r2
 8004060:	613b      	str	r3, [r7, #16]
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	685a      	ldr	r2, [r3, #4]
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	605a      	str	r2, [r3, #4]
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	685a      	ldr	r2, [r3, #4]
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	3308      	adds	r3, #8
 8004074:	429a      	cmp	r2, r3
 8004076:	d104      	bne.n	8004082 <vTaskSwitchContext+0x8a>
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	685a      	ldr	r2, [r3, #4]
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	605a      	str	r2, [r3, #4]
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	4a07      	ldr	r2, [pc, #28]	; (80040a8 <vTaskSwitchContext+0xb0>)
 800408a:	6013      	str	r3, [r2, #0]
}
 800408c:	bf00      	nop
 800408e:	371c      	adds	r7, #28
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr
 8004098:	20000410 	.word	0x20000410
 800409c:	200003fc 	.word	0x200003fc
 80040a0:	200003f0 	.word	0x200003f0
 80040a4:	200002ec 	.word	0x200002ec
 80040a8:	200002e8 	.word	0x200002e8

080040ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d109      	bne.n	80040d0 <vTaskPlaceOnEventList+0x24>
 80040bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c0:	f383 8811 	msr	BASEPRI, r3
 80040c4:	f3bf 8f6f 	isb	sy
 80040c8:	f3bf 8f4f 	dsb	sy
 80040cc:	60fb      	str	r3, [r7, #12]
 80040ce:	e7fe      	b.n	80040ce <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80040d0:	4b07      	ldr	r3, [pc, #28]	; (80040f0 <vTaskPlaceOnEventList+0x44>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	3318      	adds	r3, #24
 80040d6:	4619      	mov	r1, r3
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f7fe fe76 	bl	8002dca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80040de:	2101      	movs	r1, #1
 80040e0:	6838      	ldr	r0, [r7, #0]
 80040e2:	f000 fa5f 	bl	80045a4 <prvAddCurrentTaskToDelayedList>
}
 80040e6:	bf00      	nop
 80040e8:	3710      	adds	r7, #16
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	200002e8 	.word	0x200002e8

080040f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b086      	sub	sp, #24
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d109      	bne.n	800411e <xTaskRemoveFromEventList+0x2a>
 800410a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800410e:	f383 8811 	msr	BASEPRI, r3
 8004112:	f3bf 8f6f 	isb	sy
 8004116:	f3bf 8f4f 	dsb	sy
 800411a:	60fb      	str	r3, [r7, #12]
 800411c:	e7fe      	b.n	800411c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	3318      	adds	r3, #24
 8004122:	4618      	mov	r0, r3
 8004124:	f7fe fe8a 	bl	8002e3c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004128:	4b1d      	ldr	r3, [pc, #116]	; (80041a0 <xTaskRemoveFromEventList+0xac>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d11c      	bne.n	800416a <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	3304      	adds	r3, #4
 8004134:	4618      	mov	r0, r3
 8004136:	f7fe fe81 	bl	8002e3c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800413e:	2201      	movs	r2, #1
 8004140:	409a      	lsls	r2, r3
 8004142:	4b18      	ldr	r3, [pc, #96]	; (80041a4 <xTaskRemoveFromEventList+0xb0>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4313      	orrs	r3, r2
 8004148:	4a16      	ldr	r2, [pc, #88]	; (80041a4 <xTaskRemoveFromEventList+0xb0>)
 800414a:	6013      	str	r3, [r2, #0]
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004150:	4613      	mov	r3, r2
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	4413      	add	r3, r2
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	4a13      	ldr	r2, [pc, #76]	; (80041a8 <xTaskRemoveFromEventList+0xb4>)
 800415a:	441a      	add	r2, r3
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	3304      	adds	r3, #4
 8004160:	4619      	mov	r1, r3
 8004162:	4610      	mov	r0, r2
 8004164:	f7fe fe0d 	bl	8002d82 <vListInsertEnd>
 8004168:	e005      	b.n	8004176 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	3318      	adds	r3, #24
 800416e:	4619      	mov	r1, r3
 8004170:	480e      	ldr	r0, [pc, #56]	; (80041ac <xTaskRemoveFromEventList+0xb8>)
 8004172:	f7fe fe06 	bl	8002d82 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800417a:	4b0d      	ldr	r3, [pc, #52]	; (80041b0 <xTaskRemoveFromEventList+0xbc>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004180:	429a      	cmp	r2, r3
 8004182:	d905      	bls.n	8004190 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004184:	2301      	movs	r3, #1
 8004186:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004188:	4b0a      	ldr	r3, [pc, #40]	; (80041b4 <xTaskRemoveFromEventList+0xc0>)
 800418a:	2201      	movs	r2, #1
 800418c:	601a      	str	r2, [r3, #0]
 800418e:	e001      	b.n	8004194 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8004190:	2300      	movs	r3, #0
 8004192:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004194:	697b      	ldr	r3, [r7, #20]
}
 8004196:	4618      	mov	r0, r3
 8004198:	3718      	adds	r7, #24
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	20000410 	.word	0x20000410
 80041a4:	200003f0 	.word	0x200003f0
 80041a8:	200002ec 	.word	0x200002ec
 80041ac:	200003a8 	.word	0x200003a8
 80041b0:	200002e8 	.word	0x200002e8
 80041b4:	200003fc 	.word	0x200003fc

080041b8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80041c0:	4b06      	ldr	r3, [pc, #24]	; (80041dc <vTaskInternalSetTimeOutState+0x24>)
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80041c8:	4b05      	ldr	r3, [pc, #20]	; (80041e0 <vTaskInternalSetTimeOutState+0x28>)
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	605a      	str	r2, [r3, #4]
}
 80041d0:	bf00      	nop
 80041d2:	370c      	adds	r7, #12
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr
 80041dc:	20000400 	.word	0x20000400
 80041e0:	200003ec 	.word	0x200003ec

080041e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b088      	sub	sp, #32
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d109      	bne.n	8004208 <xTaskCheckForTimeOut+0x24>
 80041f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f8:	f383 8811 	msr	BASEPRI, r3
 80041fc:	f3bf 8f6f 	isb	sy
 8004200:	f3bf 8f4f 	dsb	sy
 8004204:	613b      	str	r3, [r7, #16]
 8004206:	e7fe      	b.n	8004206 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d109      	bne.n	8004222 <xTaskCheckForTimeOut+0x3e>
 800420e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004212:	f383 8811 	msr	BASEPRI, r3
 8004216:	f3bf 8f6f 	isb	sy
 800421a:	f3bf 8f4f 	dsb	sy
 800421e:	60fb      	str	r3, [r7, #12]
 8004220:	e7fe      	b.n	8004220 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8004222:	f000 fb4b 	bl	80048bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004226:	4b1d      	ldr	r3, [pc, #116]	; (800429c <xTaskCheckForTimeOut+0xb8>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	69ba      	ldr	r2, [r7, #24]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800423e:	d102      	bne.n	8004246 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004240:	2300      	movs	r3, #0
 8004242:	61fb      	str	r3, [r7, #28]
 8004244:	e023      	b.n	800428e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	4b15      	ldr	r3, [pc, #84]	; (80042a0 <xTaskCheckForTimeOut+0xbc>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	429a      	cmp	r2, r3
 8004250:	d007      	beq.n	8004262 <xTaskCheckForTimeOut+0x7e>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	69ba      	ldr	r2, [r7, #24]
 8004258:	429a      	cmp	r2, r3
 800425a:	d302      	bcc.n	8004262 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800425c:	2301      	movs	r3, #1
 800425e:	61fb      	str	r3, [r7, #28]
 8004260:	e015      	b.n	800428e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	697a      	ldr	r2, [r7, #20]
 8004268:	429a      	cmp	r2, r3
 800426a:	d20b      	bcs.n	8004284 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	1ad2      	subs	r2, r2, r3
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f7ff ff9d 	bl	80041b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800427e:	2300      	movs	r3, #0
 8004280:	61fb      	str	r3, [r7, #28]
 8004282:	e004      	b.n	800428e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	2200      	movs	r2, #0
 8004288:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800428a:	2301      	movs	r3, #1
 800428c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800428e:	f000 fb43 	bl	8004918 <vPortExitCritical>

	return xReturn;
 8004292:	69fb      	ldr	r3, [r7, #28]
}
 8004294:	4618      	mov	r0, r3
 8004296:	3720      	adds	r7, #32
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}
 800429c:	200003ec 	.word	0x200003ec
 80042a0:	20000400 	.word	0x20000400

080042a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80042a4:	b480      	push	{r7}
 80042a6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80042a8:	4b03      	ldr	r3, [pc, #12]	; (80042b8 <vTaskMissedYield+0x14>)
 80042aa:	2201      	movs	r2, #1
 80042ac:	601a      	str	r2, [r3, #0]
}
 80042ae:	bf00      	nop
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr
 80042b8:	200003fc 	.word	0x200003fc

080042bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b082      	sub	sp, #8
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80042c4:	f000 f852 	bl	800436c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80042c8:	4b06      	ldr	r3, [pc, #24]	; (80042e4 <prvIdleTask+0x28>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d9f9      	bls.n	80042c4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80042d0:	4b05      	ldr	r3, [pc, #20]	; (80042e8 <prvIdleTask+0x2c>)
 80042d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042d6:	601a      	str	r2, [r3, #0]
 80042d8:	f3bf 8f4f 	dsb	sy
 80042dc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80042e0:	e7f0      	b.n	80042c4 <prvIdleTask+0x8>
 80042e2:	bf00      	nop
 80042e4:	200002ec 	.word	0x200002ec
 80042e8:	e000ed04 	.word	0xe000ed04

080042ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80042f2:	2300      	movs	r3, #0
 80042f4:	607b      	str	r3, [r7, #4]
 80042f6:	e00c      	b.n	8004312 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	4613      	mov	r3, r2
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	4413      	add	r3, r2
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	4a12      	ldr	r2, [pc, #72]	; (800434c <prvInitialiseTaskLists+0x60>)
 8004304:	4413      	add	r3, r2
 8004306:	4618      	mov	r0, r3
 8004308:	f7fe fd0e 	bl	8002d28 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	3301      	adds	r3, #1
 8004310:	607b      	str	r3, [r7, #4]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2b06      	cmp	r3, #6
 8004316:	d9ef      	bls.n	80042f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004318:	480d      	ldr	r0, [pc, #52]	; (8004350 <prvInitialiseTaskLists+0x64>)
 800431a:	f7fe fd05 	bl	8002d28 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800431e:	480d      	ldr	r0, [pc, #52]	; (8004354 <prvInitialiseTaskLists+0x68>)
 8004320:	f7fe fd02 	bl	8002d28 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004324:	480c      	ldr	r0, [pc, #48]	; (8004358 <prvInitialiseTaskLists+0x6c>)
 8004326:	f7fe fcff 	bl	8002d28 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800432a:	480c      	ldr	r0, [pc, #48]	; (800435c <prvInitialiseTaskLists+0x70>)
 800432c:	f7fe fcfc 	bl	8002d28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004330:	480b      	ldr	r0, [pc, #44]	; (8004360 <prvInitialiseTaskLists+0x74>)
 8004332:	f7fe fcf9 	bl	8002d28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004336:	4b0b      	ldr	r3, [pc, #44]	; (8004364 <prvInitialiseTaskLists+0x78>)
 8004338:	4a05      	ldr	r2, [pc, #20]	; (8004350 <prvInitialiseTaskLists+0x64>)
 800433a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800433c:	4b0a      	ldr	r3, [pc, #40]	; (8004368 <prvInitialiseTaskLists+0x7c>)
 800433e:	4a05      	ldr	r2, [pc, #20]	; (8004354 <prvInitialiseTaskLists+0x68>)
 8004340:	601a      	str	r2, [r3, #0]
}
 8004342:	bf00      	nop
 8004344:	3708      	adds	r7, #8
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	200002ec 	.word	0x200002ec
 8004350:	20000378 	.word	0x20000378
 8004354:	2000038c 	.word	0x2000038c
 8004358:	200003a8 	.word	0x200003a8
 800435c:	200003bc 	.word	0x200003bc
 8004360:	200003d4 	.word	0x200003d4
 8004364:	200003a0 	.word	0x200003a0
 8004368:	200003a4 	.word	0x200003a4

0800436c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b082      	sub	sp, #8
 8004370:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004372:	e019      	b.n	80043a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004374:	f000 faa2 	bl	80048bc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004378:	4b0f      	ldr	r3, [pc, #60]	; (80043b8 <prvCheckTasksWaitingTermination+0x4c>)
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	3304      	adds	r3, #4
 8004384:	4618      	mov	r0, r3
 8004386:	f7fe fd59 	bl	8002e3c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800438a:	4b0c      	ldr	r3, [pc, #48]	; (80043bc <prvCheckTasksWaitingTermination+0x50>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	3b01      	subs	r3, #1
 8004390:	4a0a      	ldr	r2, [pc, #40]	; (80043bc <prvCheckTasksWaitingTermination+0x50>)
 8004392:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004394:	4b0a      	ldr	r3, [pc, #40]	; (80043c0 <prvCheckTasksWaitingTermination+0x54>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	3b01      	subs	r3, #1
 800439a:	4a09      	ldr	r2, [pc, #36]	; (80043c0 <prvCheckTasksWaitingTermination+0x54>)
 800439c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800439e:	f000 fabb 	bl	8004918 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f000 f80e 	bl	80043c4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80043a8:	4b05      	ldr	r3, [pc, #20]	; (80043c0 <prvCheckTasksWaitingTermination+0x54>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d1e1      	bne.n	8004374 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80043b0:	bf00      	nop
 80043b2:	3708      	adds	r7, #8
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}
 80043b8:	200003bc 	.word	0x200003bc
 80043bc:	200003e8 	.word	0x200003e8
 80043c0:	200003d0 	.word	0x200003d0

080043c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b084      	sub	sp, #16
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d108      	bne.n	80043e8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043da:	4618      	mov	r0, r3
 80043dc:	f000 fc4a 	bl	8004c74 <vPortFree>
				vPortFree( pxTCB );
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f000 fc47 	bl	8004c74 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80043e6:	e017      	b.n	8004418 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d103      	bne.n	80043fa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f000 fc3e 	bl	8004c74 <vPortFree>
	}
 80043f8:	e00e      	b.n	8004418 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004400:	2b02      	cmp	r3, #2
 8004402:	d009      	beq.n	8004418 <prvDeleteTCB+0x54>
 8004404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004408:	f383 8811 	msr	BASEPRI, r3
 800440c:	f3bf 8f6f 	isb	sy
 8004410:	f3bf 8f4f 	dsb	sy
 8004414:	60fb      	str	r3, [r7, #12]
 8004416:	e7fe      	b.n	8004416 <prvDeleteTCB+0x52>
	}
 8004418:	bf00      	nop
 800441a:	3710      	adds	r7, #16
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}

08004420 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004420:	b480      	push	{r7}
 8004422:	b083      	sub	sp, #12
 8004424:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004426:	4b0c      	ldr	r3, [pc, #48]	; (8004458 <prvResetNextTaskUnblockTime+0x38>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d104      	bne.n	800443a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004430:	4b0a      	ldr	r3, [pc, #40]	; (800445c <prvResetNextTaskUnblockTime+0x3c>)
 8004432:	f04f 32ff 	mov.w	r2, #4294967295
 8004436:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004438:	e008      	b.n	800444c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800443a:	4b07      	ldr	r3, [pc, #28]	; (8004458 <prvResetNextTaskUnblockTime+0x38>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	4a04      	ldr	r2, [pc, #16]	; (800445c <prvResetNextTaskUnblockTime+0x3c>)
 800444a:	6013      	str	r3, [r2, #0]
}
 800444c:	bf00      	nop
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr
 8004458:	200003a0 	.word	0x200003a0
 800445c:	20000408 	.word	0x20000408

08004460 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004466:	4b0b      	ldr	r3, [pc, #44]	; (8004494 <xTaskGetSchedulerState+0x34>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d102      	bne.n	8004474 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800446e:	2301      	movs	r3, #1
 8004470:	607b      	str	r3, [r7, #4]
 8004472:	e008      	b.n	8004486 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004474:	4b08      	ldr	r3, [pc, #32]	; (8004498 <xTaskGetSchedulerState+0x38>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d102      	bne.n	8004482 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800447c:	2302      	movs	r3, #2
 800447e:	607b      	str	r3, [r7, #4]
 8004480:	e001      	b.n	8004486 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004482:	2300      	movs	r3, #0
 8004484:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004486:	687b      	ldr	r3, [r7, #4]
	}
 8004488:	4618      	mov	r0, r3
 800448a:	370c      	adds	r7, #12
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr
 8004494:	200003f4 	.word	0x200003f4
 8004498:	20000410 	.word	0x20000410

0800449c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800449c:	b580      	push	{r7, lr}
 800449e:	b086      	sub	sp, #24
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80044a8:	2300      	movs	r3, #0
 80044aa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d06c      	beq.n	800458c <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80044b2:	4b39      	ldr	r3, [pc, #228]	; (8004598 <xTaskPriorityDisinherit+0xfc>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	693a      	ldr	r2, [r7, #16]
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d009      	beq.n	80044d0 <xTaskPriorityDisinherit+0x34>
 80044bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c0:	f383 8811 	msr	BASEPRI, r3
 80044c4:	f3bf 8f6f 	isb	sy
 80044c8:	f3bf 8f4f 	dsb	sy
 80044cc:	60fb      	str	r3, [r7, #12]
 80044ce:	e7fe      	b.n	80044ce <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d109      	bne.n	80044ec <xTaskPriorityDisinherit+0x50>
 80044d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044dc:	f383 8811 	msr	BASEPRI, r3
 80044e0:	f3bf 8f6f 	isb	sy
 80044e4:	f3bf 8f4f 	dsb	sy
 80044e8:	60bb      	str	r3, [r7, #8]
 80044ea:	e7fe      	b.n	80044ea <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044f0:	1e5a      	subs	r2, r3, #1
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044fe:	429a      	cmp	r2, r3
 8004500:	d044      	beq.n	800458c <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004506:	2b00      	cmp	r3, #0
 8004508:	d140      	bne.n	800458c <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	3304      	adds	r3, #4
 800450e:	4618      	mov	r0, r3
 8004510:	f7fe fc94 	bl	8002e3c <uxListRemove>
 8004514:	4603      	mov	r3, r0
 8004516:	2b00      	cmp	r3, #0
 8004518:	d115      	bne.n	8004546 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800451e:	491f      	ldr	r1, [pc, #124]	; (800459c <xTaskPriorityDisinherit+0x100>)
 8004520:	4613      	mov	r3, r2
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	4413      	add	r3, r2
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	440b      	add	r3, r1
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d10a      	bne.n	8004546 <xTaskPriorityDisinherit+0xaa>
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004534:	2201      	movs	r2, #1
 8004536:	fa02 f303 	lsl.w	r3, r2, r3
 800453a:	43da      	mvns	r2, r3
 800453c:	4b18      	ldr	r3, [pc, #96]	; (80045a0 <xTaskPriorityDisinherit+0x104>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4013      	ands	r3, r2
 8004542:	4a17      	ldr	r2, [pc, #92]	; (80045a0 <xTaskPriorityDisinherit+0x104>)
 8004544:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004552:	f1c3 0207 	rsb	r2, r3, #7
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800455e:	2201      	movs	r2, #1
 8004560:	409a      	lsls	r2, r3
 8004562:	4b0f      	ldr	r3, [pc, #60]	; (80045a0 <xTaskPriorityDisinherit+0x104>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4313      	orrs	r3, r2
 8004568:	4a0d      	ldr	r2, [pc, #52]	; (80045a0 <xTaskPriorityDisinherit+0x104>)
 800456a:	6013      	str	r3, [r2, #0]
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004570:	4613      	mov	r3, r2
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	4413      	add	r3, r2
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	4a08      	ldr	r2, [pc, #32]	; (800459c <xTaskPriorityDisinherit+0x100>)
 800457a:	441a      	add	r2, r3
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	3304      	adds	r3, #4
 8004580:	4619      	mov	r1, r3
 8004582:	4610      	mov	r0, r2
 8004584:	f7fe fbfd 	bl	8002d82 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004588:	2301      	movs	r3, #1
 800458a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800458c:	697b      	ldr	r3, [r7, #20]
	}
 800458e:	4618      	mov	r0, r3
 8004590:	3718      	adds	r7, #24
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	200002e8 	.word	0x200002e8
 800459c:	200002ec 	.word	0x200002ec
 80045a0:	200003f0 	.word	0x200003f0

080045a4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b084      	sub	sp, #16
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80045ae:	4b29      	ldr	r3, [pc, #164]	; (8004654 <prvAddCurrentTaskToDelayedList+0xb0>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80045b4:	4b28      	ldr	r3, [pc, #160]	; (8004658 <prvAddCurrentTaskToDelayedList+0xb4>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	3304      	adds	r3, #4
 80045ba:	4618      	mov	r0, r3
 80045bc:	f7fe fc3e 	bl	8002e3c <uxListRemove>
 80045c0:	4603      	mov	r3, r0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d10b      	bne.n	80045de <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80045c6:	4b24      	ldr	r3, [pc, #144]	; (8004658 <prvAddCurrentTaskToDelayedList+0xb4>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045cc:	2201      	movs	r2, #1
 80045ce:	fa02 f303 	lsl.w	r3, r2, r3
 80045d2:	43da      	mvns	r2, r3
 80045d4:	4b21      	ldr	r3, [pc, #132]	; (800465c <prvAddCurrentTaskToDelayedList+0xb8>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4013      	ands	r3, r2
 80045da:	4a20      	ldr	r2, [pc, #128]	; (800465c <prvAddCurrentTaskToDelayedList+0xb8>)
 80045dc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045e4:	d10a      	bne.n	80045fc <prvAddCurrentTaskToDelayedList+0x58>
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d007      	beq.n	80045fc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045ec:	4b1a      	ldr	r3, [pc, #104]	; (8004658 <prvAddCurrentTaskToDelayedList+0xb4>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	3304      	adds	r3, #4
 80045f2:	4619      	mov	r1, r3
 80045f4:	481a      	ldr	r0, [pc, #104]	; (8004660 <prvAddCurrentTaskToDelayedList+0xbc>)
 80045f6:	f7fe fbc4 	bl	8002d82 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80045fa:	e026      	b.n	800464a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80045fc:	68fa      	ldr	r2, [r7, #12]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4413      	add	r3, r2
 8004602:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004604:	4b14      	ldr	r3, [pc, #80]	; (8004658 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	68ba      	ldr	r2, [r7, #8]
 800460a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800460c:	68ba      	ldr	r2, [r7, #8]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	429a      	cmp	r2, r3
 8004612:	d209      	bcs.n	8004628 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004614:	4b13      	ldr	r3, [pc, #76]	; (8004664 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	4b0f      	ldr	r3, [pc, #60]	; (8004658 <prvAddCurrentTaskToDelayedList+0xb4>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	3304      	adds	r3, #4
 800461e:	4619      	mov	r1, r3
 8004620:	4610      	mov	r0, r2
 8004622:	f7fe fbd2 	bl	8002dca <vListInsert>
}
 8004626:	e010      	b.n	800464a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004628:	4b0f      	ldr	r3, [pc, #60]	; (8004668 <prvAddCurrentTaskToDelayedList+0xc4>)
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	4b0a      	ldr	r3, [pc, #40]	; (8004658 <prvAddCurrentTaskToDelayedList+0xb4>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	3304      	adds	r3, #4
 8004632:	4619      	mov	r1, r3
 8004634:	4610      	mov	r0, r2
 8004636:	f7fe fbc8 	bl	8002dca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800463a:	4b0c      	ldr	r3, [pc, #48]	; (800466c <prvAddCurrentTaskToDelayedList+0xc8>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	68ba      	ldr	r2, [r7, #8]
 8004640:	429a      	cmp	r2, r3
 8004642:	d202      	bcs.n	800464a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004644:	4a09      	ldr	r2, [pc, #36]	; (800466c <prvAddCurrentTaskToDelayedList+0xc8>)
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	6013      	str	r3, [r2, #0]
}
 800464a:	bf00      	nop
 800464c:	3710      	adds	r7, #16
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
 8004652:	bf00      	nop
 8004654:	200003ec 	.word	0x200003ec
 8004658:	200002e8 	.word	0x200002e8
 800465c:	200003f0 	.word	0x200003f0
 8004660:	200003d4 	.word	0x200003d4
 8004664:	200003a4 	.word	0x200003a4
 8004668:	200003a0 	.word	0x200003a0
 800466c:	20000408 	.word	0x20000408

08004670 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004670:	b480      	push	{r7}
 8004672:	b085      	sub	sp, #20
 8004674:	af00      	add	r7, sp, #0
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	60b9      	str	r1, [r7, #8]
 800467a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	3b04      	subs	r3, #4
 8004680:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004688:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	3b04      	subs	r3, #4
 800468e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	f023 0201 	bic.w	r2, r3, #1
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	3b04      	subs	r3, #4
 800469e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80046a0:	4a0c      	ldr	r2, [pc, #48]	; (80046d4 <pxPortInitialiseStack+0x64>)
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	3b14      	subs	r3, #20
 80046aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	3b04      	subs	r3, #4
 80046b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f06f 0202 	mvn.w	r2, #2
 80046be:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	3b20      	subs	r3, #32
 80046c4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80046c6:	68fb      	ldr	r3, [r7, #12]
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3714      	adds	r7, #20
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr
 80046d4:	080046d9 	.word	0x080046d9

080046d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80046d8:	b480      	push	{r7}
 80046da:	b085      	sub	sp, #20
 80046dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80046de:	2300      	movs	r3, #0
 80046e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80046e2:	4b11      	ldr	r3, [pc, #68]	; (8004728 <prvTaskExitError+0x50>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ea:	d009      	beq.n	8004700 <prvTaskExitError+0x28>
 80046ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f0:	f383 8811 	msr	BASEPRI, r3
 80046f4:	f3bf 8f6f 	isb	sy
 80046f8:	f3bf 8f4f 	dsb	sy
 80046fc:	60fb      	str	r3, [r7, #12]
 80046fe:	e7fe      	b.n	80046fe <prvTaskExitError+0x26>
 8004700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004704:	f383 8811 	msr	BASEPRI, r3
 8004708:	f3bf 8f6f 	isb	sy
 800470c:	f3bf 8f4f 	dsb	sy
 8004710:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004712:	bf00      	nop
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d0fc      	beq.n	8004714 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800471a:	bf00      	nop
 800471c:	3714      	adds	r7, #20
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr
 8004726:	bf00      	nop
 8004728:	2000000c 	.word	0x2000000c
 800472c:	00000000 	.word	0x00000000

08004730 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004730:	4b07      	ldr	r3, [pc, #28]	; (8004750 <pxCurrentTCBConst2>)
 8004732:	6819      	ldr	r1, [r3, #0]
 8004734:	6808      	ldr	r0, [r1, #0]
 8004736:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800473a:	f380 8809 	msr	PSP, r0
 800473e:	f3bf 8f6f 	isb	sy
 8004742:	f04f 0000 	mov.w	r0, #0
 8004746:	f380 8811 	msr	BASEPRI, r0
 800474a:	4770      	bx	lr
 800474c:	f3af 8000 	nop.w

08004750 <pxCurrentTCBConst2>:
 8004750:	200002e8 	.word	0x200002e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004754:	bf00      	nop
 8004756:	bf00      	nop

08004758 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004758:	4808      	ldr	r0, [pc, #32]	; (800477c <prvPortStartFirstTask+0x24>)
 800475a:	6800      	ldr	r0, [r0, #0]
 800475c:	6800      	ldr	r0, [r0, #0]
 800475e:	f380 8808 	msr	MSP, r0
 8004762:	f04f 0000 	mov.w	r0, #0
 8004766:	f380 8814 	msr	CONTROL, r0
 800476a:	b662      	cpsie	i
 800476c:	b661      	cpsie	f
 800476e:	f3bf 8f4f 	dsb	sy
 8004772:	f3bf 8f6f 	isb	sy
 8004776:	df00      	svc	0
 8004778:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800477a:	bf00      	nop
 800477c:	e000ed08 	.word	0xe000ed08

08004780 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b086      	sub	sp, #24
 8004784:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004786:	4b44      	ldr	r3, [pc, #272]	; (8004898 <xPortStartScheduler+0x118>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a44      	ldr	r2, [pc, #272]	; (800489c <xPortStartScheduler+0x11c>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d109      	bne.n	80047a4 <xPortStartScheduler+0x24>
 8004790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004794:	f383 8811 	msr	BASEPRI, r3
 8004798:	f3bf 8f6f 	isb	sy
 800479c:	f3bf 8f4f 	dsb	sy
 80047a0:	613b      	str	r3, [r7, #16]
 80047a2:	e7fe      	b.n	80047a2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80047a4:	4b3c      	ldr	r3, [pc, #240]	; (8004898 <xPortStartScheduler+0x118>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a3d      	ldr	r2, [pc, #244]	; (80048a0 <xPortStartScheduler+0x120>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d109      	bne.n	80047c2 <xPortStartScheduler+0x42>
 80047ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b2:	f383 8811 	msr	BASEPRI, r3
 80047b6:	f3bf 8f6f 	isb	sy
 80047ba:	f3bf 8f4f 	dsb	sy
 80047be:	60fb      	str	r3, [r7, #12]
 80047c0:	e7fe      	b.n	80047c0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80047c2:	4b38      	ldr	r3, [pc, #224]	; (80048a4 <xPortStartScheduler+0x124>)
 80047c4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	22ff      	movs	r2, #255	; 0xff
 80047d2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80047dc:	78fb      	ldrb	r3, [r7, #3]
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80047e4:	b2da      	uxtb	r2, r3
 80047e6:	4b30      	ldr	r3, [pc, #192]	; (80048a8 <xPortStartScheduler+0x128>)
 80047e8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80047ea:	4b30      	ldr	r3, [pc, #192]	; (80048ac <xPortStartScheduler+0x12c>)
 80047ec:	2207      	movs	r2, #7
 80047ee:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80047f0:	e009      	b.n	8004806 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80047f2:	4b2e      	ldr	r3, [pc, #184]	; (80048ac <xPortStartScheduler+0x12c>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	3b01      	subs	r3, #1
 80047f8:	4a2c      	ldr	r2, [pc, #176]	; (80048ac <xPortStartScheduler+0x12c>)
 80047fa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80047fc:	78fb      	ldrb	r3, [r7, #3]
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	005b      	lsls	r3, r3, #1
 8004802:	b2db      	uxtb	r3, r3
 8004804:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004806:	78fb      	ldrb	r3, [r7, #3]
 8004808:	b2db      	uxtb	r3, r3
 800480a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800480e:	2b80      	cmp	r3, #128	; 0x80
 8004810:	d0ef      	beq.n	80047f2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004812:	4b26      	ldr	r3, [pc, #152]	; (80048ac <xPortStartScheduler+0x12c>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f1c3 0307 	rsb	r3, r3, #7
 800481a:	2b04      	cmp	r3, #4
 800481c:	d009      	beq.n	8004832 <xPortStartScheduler+0xb2>
 800481e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004822:	f383 8811 	msr	BASEPRI, r3
 8004826:	f3bf 8f6f 	isb	sy
 800482a:	f3bf 8f4f 	dsb	sy
 800482e:	60bb      	str	r3, [r7, #8]
 8004830:	e7fe      	b.n	8004830 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004832:	4b1e      	ldr	r3, [pc, #120]	; (80048ac <xPortStartScheduler+0x12c>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	021b      	lsls	r3, r3, #8
 8004838:	4a1c      	ldr	r2, [pc, #112]	; (80048ac <xPortStartScheduler+0x12c>)
 800483a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800483c:	4b1b      	ldr	r3, [pc, #108]	; (80048ac <xPortStartScheduler+0x12c>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004844:	4a19      	ldr	r2, [pc, #100]	; (80048ac <xPortStartScheduler+0x12c>)
 8004846:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	b2da      	uxtb	r2, r3
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004850:	4b17      	ldr	r3, [pc, #92]	; (80048b0 <xPortStartScheduler+0x130>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a16      	ldr	r2, [pc, #88]	; (80048b0 <xPortStartScheduler+0x130>)
 8004856:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800485a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800485c:	4b14      	ldr	r3, [pc, #80]	; (80048b0 <xPortStartScheduler+0x130>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a13      	ldr	r2, [pc, #76]	; (80048b0 <xPortStartScheduler+0x130>)
 8004862:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004866:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004868:	f000 f8d6 	bl	8004a18 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800486c:	4b11      	ldr	r3, [pc, #68]	; (80048b4 <xPortStartScheduler+0x134>)
 800486e:	2200      	movs	r2, #0
 8004870:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004872:	f000 f8f5 	bl	8004a60 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004876:	4b10      	ldr	r3, [pc, #64]	; (80048b8 <xPortStartScheduler+0x138>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a0f      	ldr	r2, [pc, #60]	; (80048b8 <xPortStartScheduler+0x138>)
 800487c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004880:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004882:	f7ff ff69 	bl	8004758 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004886:	f7ff fbb7 	bl	8003ff8 <vTaskSwitchContext>
	prvTaskExitError();
 800488a:	f7ff ff25 	bl	80046d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800488e:	2300      	movs	r3, #0
}
 8004890:	4618      	mov	r0, r3
 8004892:	3718      	adds	r7, #24
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}
 8004898:	e000ed00 	.word	0xe000ed00
 800489c:	410fc271 	.word	0x410fc271
 80048a0:	410fc270 	.word	0x410fc270
 80048a4:	e000e400 	.word	0xe000e400
 80048a8:	20000414 	.word	0x20000414
 80048ac:	20000418 	.word	0x20000418
 80048b0:	e000ed20 	.word	0xe000ed20
 80048b4:	2000000c 	.word	0x2000000c
 80048b8:	e000ef34 	.word	0xe000ef34

080048bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c6:	f383 8811 	msr	BASEPRI, r3
 80048ca:	f3bf 8f6f 	isb	sy
 80048ce:	f3bf 8f4f 	dsb	sy
 80048d2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80048d4:	4b0e      	ldr	r3, [pc, #56]	; (8004910 <vPortEnterCritical+0x54>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	3301      	adds	r3, #1
 80048da:	4a0d      	ldr	r2, [pc, #52]	; (8004910 <vPortEnterCritical+0x54>)
 80048dc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80048de:	4b0c      	ldr	r3, [pc, #48]	; (8004910 <vPortEnterCritical+0x54>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d10e      	bne.n	8004904 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80048e6:	4b0b      	ldr	r3, [pc, #44]	; (8004914 <vPortEnterCritical+0x58>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d009      	beq.n	8004904 <vPortEnterCritical+0x48>
 80048f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f4:	f383 8811 	msr	BASEPRI, r3
 80048f8:	f3bf 8f6f 	isb	sy
 80048fc:	f3bf 8f4f 	dsb	sy
 8004900:	603b      	str	r3, [r7, #0]
 8004902:	e7fe      	b.n	8004902 <vPortEnterCritical+0x46>
	}
}
 8004904:	bf00      	nop
 8004906:	370c      	adds	r7, #12
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr
 8004910:	2000000c 	.word	0x2000000c
 8004914:	e000ed04 	.word	0xe000ed04

08004918 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004918:	b480      	push	{r7}
 800491a:	b083      	sub	sp, #12
 800491c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800491e:	4b11      	ldr	r3, [pc, #68]	; (8004964 <vPortExitCritical+0x4c>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d109      	bne.n	800493a <vPortExitCritical+0x22>
 8004926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800492a:	f383 8811 	msr	BASEPRI, r3
 800492e:	f3bf 8f6f 	isb	sy
 8004932:	f3bf 8f4f 	dsb	sy
 8004936:	607b      	str	r3, [r7, #4]
 8004938:	e7fe      	b.n	8004938 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800493a:	4b0a      	ldr	r3, [pc, #40]	; (8004964 <vPortExitCritical+0x4c>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	3b01      	subs	r3, #1
 8004940:	4a08      	ldr	r2, [pc, #32]	; (8004964 <vPortExitCritical+0x4c>)
 8004942:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004944:	4b07      	ldr	r3, [pc, #28]	; (8004964 <vPortExitCritical+0x4c>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d104      	bne.n	8004956 <vPortExitCritical+0x3e>
 800494c:	2300      	movs	r3, #0
 800494e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004956:	bf00      	nop
 8004958:	370c      	adds	r7, #12
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr
 8004962:	bf00      	nop
 8004964:	2000000c 	.word	0x2000000c
	...

08004970 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004970:	f3ef 8009 	mrs	r0, PSP
 8004974:	f3bf 8f6f 	isb	sy
 8004978:	4b15      	ldr	r3, [pc, #84]	; (80049d0 <pxCurrentTCBConst>)
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	f01e 0f10 	tst.w	lr, #16
 8004980:	bf08      	it	eq
 8004982:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004986:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800498a:	6010      	str	r0, [r2, #0]
 800498c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004990:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004994:	f380 8811 	msr	BASEPRI, r0
 8004998:	f3bf 8f4f 	dsb	sy
 800499c:	f3bf 8f6f 	isb	sy
 80049a0:	f7ff fb2a 	bl	8003ff8 <vTaskSwitchContext>
 80049a4:	f04f 0000 	mov.w	r0, #0
 80049a8:	f380 8811 	msr	BASEPRI, r0
 80049ac:	bc09      	pop	{r0, r3}
 80049ae:	6819      	ldr	r1, [r3, #0]
 80049b0:	6808      	ldr	r0, [r1, #0]
 80049b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049b6:	f01e 0f10 	tst.w	lr, #16
 80049ba:	bf08      	it	eq
 80049bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80049c0:	f380 8809 	msr	PSP, r0
 80049c4:	f3bf 8f6f 	isb	sy
 80049c8:	4770      	bx	lr
 80049ca:	bf00      	nop
 80049cc:	f3af 8000 	nop.w

080049d0 <pxCurrentTCBConst>:
 80049d0:	200002e8 	.word	0x200002e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80049d4:	bf00      	nop
 80049d6:	bf00      	nop

080049d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b082      	sub	sp, #8
 80049dc:	af00      	add	r7, sp, #0
	__asm volatile
 80049de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e2:	f383 8811 	msr	BASEPRI, r3
 80049e6:	f3bf 8f6f 	isb	sy
 80049ea:	f3bf 8f4f 	dsb	sy
 80049ee:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80049f0:	f7ff fa4a 	bl	8003e88 <xTaskIncrementTick>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d003      	beq.n	8004a02 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80049fa:	4b06      	ldr	r3, [pc, #24]	; (8004a14 <SysTick_Handler+0x3c>)
 80049fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a00:	601a      	str	r2, [r3, #0]
 8004a02:	2300      	movs	r3, #0
 8004a04:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8004a0c:	bf00      	nop
 8004a0e:	3708      	adds	r7, #8
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	e000ed04 	.word	0xe000ed04

08004a18 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004a18:	b480      	push	{r7}
 8004a1a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004a1c:	4b0b      	ldr	r3, [pc, #44]	; (8004a4c <vPortSetupTimerInterrupt+0x34>)
 8004a1e:	2200      	movs	r2, #0
 8004a20:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004a22:	4b0b      	ldr	r3, [pc, #44]	; (8004a50 <vPortSetupTimerInterrupt+0x38>)
 8004a24:	2200      	movs	r2, #0
 8004a26:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004a28:	4b0a      	ldr	r3, [pc, #40]	; (8004a54 <vPortSetupTimerInterrupt+0x3c>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a0a      	ldr	r2, [pc, #40]	; (8004a58 <vPortSetupTimerInterrupt+0x40>)
 8004a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a32:	099b      	lsrs	r3, r3, #6
 8004a34:	4a09      	ldr	r2, [pc, #36]	; (8004a5c <vPortSetupTimerInterrupt+0x44>)
 8004a36:	3b01      	subs	r3, #1
 8004a38:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004a3a:	4b04      	ldr	r3, [pc, #16]	; (8004a4c <vPortSetupTimerInterrupt+0x34>)
 8004a3c:	2207      	movs	r2, #7
 8004a3e:	601a      	str	r2, [r3, #0]
}
 8004a40:	bf00      	nop
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr
 8004a4a:	bf00      	nop
 8004a4c:	e000e010 	.word	0xe000e010
 8004a50:	e000e018 	.word	0xe000e018
 8004a54:	20000000 	.word	0x20000000
 8004a58:	10624dd3 	.word	0x10624dd3
 8004a5c:	e000e014 	.word	0xe000e014

08004a60 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004a60:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004a70 <vPortEnableVFP+0x10>
 8004a64:	6801      	ldr	r1, [r0, #0]
 8004a66:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004a6a:	6001      	str	r1, [r0, #0]
 8004a6c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004a6e:	bf00      	nop
 8004a70:	e000ed88 	.word	0xe000ed88

08004a74 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004a74:	b480      	push	{r7}
 8004a76:	b085      	sub	sp, #20
 8004a78:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004a7a:	f3ef 8305 	mrs	r3, IPSR
 8004a7e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2b0f      	cmp	r3, #15
 8004a84:	d913      	bls.n	8004aae <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004a86:	4a16      	ldr	r2, [pc, #88]	; (8004ae0 <vPortValidateInterruptPriority+0x6c>)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	4413      	add	r3, r2
 8004a8c:	781b      	ldrb	r3, [r3, #0]
 8004a8e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004a90:	4b14      	ldr	r3, [pc, #80]	; (8004ae4 <vPortValidateInterruptPriority+0x70>)
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	7afa      	ldrb	r2, [r7, #11]
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d209      	bcs.n	8004aae <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8004a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a9e:	f383 8811 	msr	BASEPRI, r3
 8004aa2:	f3bf 8f6f 	isb	sy
 8004aa6:	f3bf 8f4f 	dsb	sy
 8004aaa:	607b      	str	r3, [r7, #4]
 8004aac:	e7fe      	b.n	8004aac <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004aae:	4b0e      	ldr	r3, [pc, #56]	; (8004ae8 <vPortValidateInterruptPriority+0x74>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004ab6:	4b0d      	ldr	r3, [pc, #52]	; (8004aec <vPortValidateInterruptPriority+0x78>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d909      	bls.n	8004ad2 <vPortValidateInterruptPriority+0x5e>
 8004abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac2:	f383 8811 	msr	BASEPRI, r3
 8004ac6:	f3bf 8f6f 	isb	sy
 8004aca:	f3bf 8f4f 	dsb	sy
 8004ace:	603b      	str	r3, [r7, #0]
 8004ad0:	e7fe      	b.n	8004ad0 <vPortValidateInterruptPriority+0x5c>
	}
 8004ad2:	bf00      	nop
 8004ad4:	3714      	adds	r7, #20
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr
 8004ade:	bf00      	nop
 8004ae0:	e000e3f0 	.word	0xe000e3f0
 8004ae4:	20000414 	.word	0x20000414
 8004ae8:	e000ed0c 	.word	0xe000ed0c
 8004aec:	20000418 	.word	0x20000418

08004af0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b08a      	sub	sp, #40	; 0x28
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004af8:	2300      	movs	r3, #0
 8004afa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004afc:	f7ff f91a 	bl	8003d34 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004b00:	4b57      	ldr	r3, [pc, #348]	; (8004c60 <pvPortMalloc+0x170>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d101      	bne.n	8004b0c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004b08:	f000 f90c 	bl	8004d24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004b0c:	4b55      	ldr	r3, [pc, #340]	; (8004c64 <pvPortMalloc+0x174>)
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	4013      	ands	r3, r2
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	f040 808c 	bne.w	8004c32 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d01c      	beq.n	8004b5a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8004b20:	2208      	movs	r2, #8
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4413      	add	r3, r2
 8004b26:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f003 0307 	and.w	r3, r3, #7
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d013      	beq.n	8004b5a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f023 0307 	bic.w	r3, r3, #7
 8004b38:	3308      	adds	r3, #8
 8004b3a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f003 0307 	and.w	r3, r3, #7
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d009      	beq.n	8004b5a <pvPortMalloc+0x6a>
 8004b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b4a:	f383 8811 	msr	BASEPRI, r3
 8004b4e:	f3bf 8f6f 	isb	sy
 8004b52:	f3bf 8f4f 	dsb	sy
 8004b56:	617b      	str	r3, [r7, #20]
 8004b58:	e7fe      	b.n	8004b58 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d068      	beq.n	8004c32 <pvPortMalloc+0x142>
 8004b60:	4b41      	ldr	r3, [pc, #260]	; (8004c68 <pvPortMalloc+0x178>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d863      	bhi.n	8004c32 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004b6a:	4b40      	ldr	r3, [pc, #256]	; (8004c6c <pvPortMalloc+0x17c>)
 8004b6c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004b6e:	4b3f      	ldr	r3, [pc, #252]	; (8004c6c <pvPortMalloc+0x17c>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b74:	e004      	b.n	8004b80 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8004b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b78:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d903      	bls.n	8004b92 <pvPortMalloc+0xa2>
 8004b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d1f1      	bne.n	8004b76 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004b92:	4b33      	ldr	r3, [pc, #204]	; (8004c60 <pvPortMalloc+0x170>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d04a      	beq.n	8004c32 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004b9c:	6a3b      	ldr	r3, [r7, #32]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	2208      	movs	r2, #8
 8004ba2:	4413      	add	r3, r2
 8004ba4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	6a3b      	ldr	r3, [r7, #32]
 8004bac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb0:	685a      	ldr	r2, [r3, #4]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	1ad2      	subs	r2, r2, r3
 8004bb6:	2308      	movs	r3, #8
 8004bb8:	005b      	lsls	r3, r3, #1
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d91e      	bls.n	8004bfc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004bbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4413      	add	r3, r2
 8004bc4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004bc6:	69bb      	ldr	r3, [r7, #24]
 8004bc8:	f003 0307 	and.w	r3, r3, #7
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d009      	beq.n	8004be4 <pvPortMalloc+0xf4>
 8004bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd4:	f383 8811 	msr	BASEPRI, r3
 8004bd8:	f3bf 8f6f 	isb	sy
 8004bdc:	f3bf 8f4f 	dsb	sy
 8004be0:	613b      	str	r3, [r7, #16]
 8004be2:	e7fe      	b.n	8004be2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be6:	685a      	ldr	r2, [r3, #4]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	1ad2      	subs	r2, r2, r3
 8004bec:	69bb      	ldr	r3, [r7, #24]
 8004bee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004bf6:	69b8      	ldr	r0, [r7, #24]
 8004bf8:	f000 f8f6 	bl	8004de8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004bfc:	4b1a      	ldr	r3, [pc, #104]	; (8004c68 <pvPortMalloc+0x178>)
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	4a18      	ldr	r2, [pc, #96]	; (8004c68 <pvPortMalloc+0x178>)
 8004c08:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004c0a:	4b17      	ldr	r3, [pc, #92]	; (8004c68 <pvPortMalloc+0x178>)
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	4b18      	ldr	r3, [pc, #96]	; (8004c70 <pvPortMalloc+0x180>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d203      	bcs.n	8004c1e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004c16:	4b14      	ldr	r3, [pc, #80]	; (8004c68 <pvPortMalloc+0x178>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a15      	ldr	r2, [pc, #84]	; (8004c70 <pvPortMalloc+0x180>)
 8004c1c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c20:	685a      	ldr	r2, [r3, #4]
 8004c22:	4b10      	ldr	r3, [pc, #64]	; (8004c64 <pvPortMalloc+0x174>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	431a      	orrs	r2, r3
 8004c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2e:	2200      	movs	r2, #0
 8004c30:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004c32:	f7ff f88d 	bl	8003d50 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	f003 0307 	and.w	r3, r3, #7
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d009      	beq.n	8004c54 <pvPortMalloc+0x164>
 8004c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c44:	f383 8811 	msr	BASEPRI, r3
 8004c48:	f3bf 8f6f 	isb	sy
 8004c4c:	f3bf 8f4f 	dsb	sy
 8004c50:	60fb      	str	r3, [r7, #12]
 8004c52:	e7fe      	b.n	8004c52 <pvPortMalloc+0x162>
	return pvReturn;
 8004c54:	69fb      	ldr	r3, [r7, #28]
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3728      	adds	r7, #40	; 0x28
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	20004024 	.word	0x20004024
 8004c64:	20004030 	.word	0x20004030
 8004c68:	20004028 	.word	0x20004028
 8004c6c:	2000401c 	.word	0x2000401c
 8004c70:	2000402c 	.word	0x2000402c

08004c74 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b086      	sub	sp, #24
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d046      	beq.n	8004d14 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004c86:	2308      	movs	r3, #8
 8004c88:	425b      	negs	r3, r3
 8004c8a:	697a      	ldr	r2, [r7, #20]
 8004c8c:	4413      	add	r3, r2
 8004c8e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	685a      	ldr	r2, [r3, #4]
 8004c98:	4b20      	ldr	r3, [pc, #128]	; (8004d1c <vPortFree+0xa8>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d109      	bne.n	8004cb6 <vPortFree+0x42>
 8004ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca6:	f383 8811 	msr	BASEPRI, r3
 8004caa:	f3bf 8f6f 	isb	sy
 8004cae:	f3bf 8f4f 	dsb	sy
 8004cb2:	60fb      	str	r3, [r7, #12]
 8004cb4:	e7fe      	b.n	8004cb4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d009      	beq.n	8004cd2 <vPortFree+0x5e>
 8004cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc2:	f383 8811 	msr	BASEPRI, r3
 8004cc6:	f3bf 8f6f 	isb	sy
 8004cca:	f3bf 8f4f 	dsb	sy
 8004cce:	60bb      	str	r3, [r7, #8]
 8004cd0:	e7fe      	b.n	8004cd0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	685a      	ldr	r2, [r3, #4]
 8004cd6:	4b11      	ldr	r3, [pc, #68]	; (8004d1c <vPortFree+0xa8>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4013      	ands	r3, r2
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d019      	beq.n	8004d14 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d115      	bne.n	8004d14 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	685a      	ldr	r2, [r3, #4]
 8004cec:	4b0b      	ldr	r3, [pc, #44]	; (8004d1c <vPortFree+0xa8>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	43db      	mvns	r3, r3
 8004cf2:	401a      	ands	r2, r3
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004cf8:	f7ff f81c 	bl	8003d34 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	685a      	ldr	r2, [r3, #4]
 8004d00:	4b07      	ldr	r3, [pc, #28]	; (8004d20 <vPortFree+0xac>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4413      	add	r3, r2
 8004d06:	4a06      	ldr	r2, [pc, #24]	; (8004d20 <vPortFree+0xac>)
 8004d08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004d0a:	6938      	ldr	r0, [r7, #16]
 8004d0c:	f000 f86c 	bl	8004de8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004d10:	f7ff f81e 	bl	8003d50 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004d14:	bf00      	nop
 8004d16:	3718      	adds	r7, #24
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}
 8004d1c:	20004030 	.word	0x20004030
 8004d20:	20004028 	.word	0x20004028

08004d24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004d24:	b480      	push	{r7}
 8004d26:	b085      	sub	sp, #20
 8004d28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004d2a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004d2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004d30:	4b27      	ldr	r3, [pc, #156]	; (8004dd0 <prvHeapInit+0xac>)
 8004d32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f003 0307 	and.w	r3, r3, #7
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d00c      	beq.n	8004d58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	3307      	adds	r3, #7
 8004d42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f023 0307 	bic.w	r3, r3, #7
 8004d4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004d4c:	68ba      	ldr	r2, [r7, #8]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	4a1f      	ldr	r2, [pc, #124]	; (8004dd0 <prvHeapInit+0xac>)
 8004d54:	4413      	add	r3, r2
 8004d56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004d5c:	4a1d      	ldr	r2, [pc, #116]	; (8004dd4 <prvHeapInit+0xb0>)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004d62:	4b1c      	ldr	r3, [pc, #112]	; (8004dd4 <prvHeapInit+0xb0>)
 8004d64:	2200      	movs	r2, #0
 8004d66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	68ba      	ldr	r2, [r7, #8]
 8004d6c:	4413      	add	r3, r2
 8004d6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004d70:	2208      	movs	r2, #8
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	1a9b      	subs	r3, r3, r2
 8004d76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f023 0307 	bic.w	r3, r3, #7
 8004d7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	4a15      	ldr	r2, [pc, #84]	; (8004dd8 <prvHeapInit+0xb4>)
 8004d84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004d86:	4b14      	ldr	r3, [pc, #80]	; (8004dd8 <prvHeapInit+0xb4>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004d8e:	4b12      	ldr	r3, [pc, #72]	; (8004dd8 <prvHeapInit+0xb4>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	2200      	movs	r2, #0
 8004d94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	68fa      	ldr	r2, [r7, #12]
 8004d9e:	1ad2      	subs	r2, r2, r3
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004da4:	4b0c      	ldr	r3, [pc, #48]	; (8004dd8 <prvHeapInit+0xb4>)
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	4a0a      	ldr	r2, [pc, #40]	; (8004ddc <prvHeapInit+0xb8>)
 8004db2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	4a09      	ldr	r2, [pc, #36]	; (8004de0 <prvHeapInit+0xbc>)
 8004dba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004dbc:	4b09      	ldr	r3, [pc, #36]	; (8004de4 <prvHeapInit+0xc0>)
 8004dbe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004dc2:	601a      	str	r2, [r3, #0]
}
 8004dc4:	bf00      	nop
 8004dc6:	3714      	adds	r7, #20
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr
 8004dd0:	2000041c 	.word	0x2000041c
 8004dd4:	2000401c 	.word	0x2000401c
 8004dd8:	20004024 	.word	0x20004024
 8004ddc:	2000402c 	.word	0x2000402c
 8004de0:	20004028 	.word	0x20004028
 8004de4:	20004030 	.word	0x20004030

08004de8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004de8:	b480      	push	{r7}
 8004dea:	b085      	sub	sp, #20
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004df0:	4b28      	ldr	r3, [pc, #160]	; (8004e94 <prvInsertBlockIntoFreeList+0xac>)
 8004df2:	60fb      	str	r3, [r7, #12]
 8004df4:	e002      	b.n	8004dfc <prvInsertBlockIntoFreeList+0x14>
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	60fb      	str	r3, [r7, #12]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d8f7      	bhi.n	8004df6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	68ba      	ldr	r2, [r7, #8]
 8004e10:	4413      	add	r3, r2
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d108      	bne.n	8004e2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	685a      	ldr	r2, [r3, #4]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	441a      	add	r2, r3
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	68ba      	ldr	r2, [r7, #8]
 8004e34:	441a      	add	r2, r3
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d118      	bne.n	8004e70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	4b15      	ldr	r3, [pc, #84]	; (8004e98 <prvInsertBlockIntoFreeList+0xb0>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d00d      	beq.n	8004e66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	685a      	ldr	r2, [r3, #4]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	441a      	add	r2, r3
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	601a      	str	r2, [r3, #0]
 8004e64:	e008      	b.n	8004e78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004e66:	4b0c      	ldr	r3, [pc, #48]	; (8004e98 <prvInsertBlockIntoFreeList+0xb0>)
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	601a      	str	r2, [r3, #0]
 8004e6e:	e003      	b.n	8004e78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004e78:	68fa      	ldr	r2, [r7, #12]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d002      	beq.n	8004e86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e86:	bf00      	nop
 8004e88:	3714      	adds	r7, #20
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr
 8004e92:	bf00      	nop
 8004e94:	2000401c 	.word	0x2000401c
 8004e98:	20004024 	.word	0x20004024

08004e9c <__errno>:
 8004e9c:	4b01      	ldr	r3, [pc, #4]	; (8004ea4 <__errno+0x8>)
 8004e9e:	6818      	ldr	r0, [r3, #0]
 8004ea0:	4770      	bx	lr
 8004ea2:	bf00      	nop
 8004ea4:	20000010 	.word	0x20000010

08004ea8 <__libc_init_array>:
 8004ea8:	b570      	push	{r4, r5, r6, lr}
 8004eaa:	4e0d      	ldr	r6, [pc, #52]	; (8004ee0 <__libc_init_array+0x38>)
 8004eac:	4c0d      	ldr	r4, [pc, #52]	; (8004ee4 <__libc_init_array+0x3c>)
 8004eae:	1ba4      	subs	r4, r4, r6
 8004eb0:	10a4      	asrs	r4, r4, #2
 8004eb2:	2500      	movs	r5, #0
 8004eb4:	42a5      	cmp	r5, r4
 8004eb6:	d109      	bne.n	8004ecc <__libc_init_array+0x24>
 8004eb8:	4e0b      	ldr	r6, [pc, #44]	; (8004ee8 <__libc_init_array+0x40>)
 8004eba:	4c0c      	ldr	r4, [pc, #48]	; (8004eec <__libc_init_array+0x44>)
 8004ebc:	f000 fc28 	bl	8005710 <_init>
 8004ec0:	1ba4      	subs	r4, r4, r6
 8004ec2:	10a4      	asrs	r4, r4, #2
 8004ec4:	2500      	movs	r5, #0
 8004ec6:	42a5      	cmp	r5, r4
 8004ec8:	d105      	bne.n	8004ed6 <__libc_init_array+0x2e>
 8004eca:	bd70      	pop	{r4, r5, r6, pc}
 8004ecc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004ed0:	4798      	blx	r3
 8004ed2:	3501      	adds	r5, #1
 8004ed4:	e7ee      	b.n	8004eb4 <__libc_init_array+0xc>
 8004ed6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004eda:	4798      	blx	r3
 8004edc:	3501      	adds	r5, #1
 8004ede:	e7f2      	b.n	8004ec6 <__libc_init_array+0x1e>
 8004ee0:	080058b4 	.word	0x080058b4
 8004ee4:	080058b4 	.word	0x080058b4
 8004ee8:	080058b4 	.word	0x080058b4
 8004eec:	080058b8 	.word	0x080058b8

08004ef0 <memcpy>:
 8004ef0:	b510      	push	{r4, lr}
 8004ef2:	1e43      	subs	r3, r0, #1
 8004ef4:	440a      	add	r2, r1
 8004ef6:	4291      	cmp	r1, r2
 8004ef8:	d100      	bne.n	8004efc <memcpy+0xc>
 8004efa:	bd10      	pop	{r4, pc}
 8004efc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f00:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f04:	e7f7      	b.n	8004ef6 <memcpy+0x6>

08004f06 <memset>:
 8004f06:	4402      	add	r2, r0
 8004f08:	4603      	mov	r3, r0
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d100      	bne.n	8004f10 <memset+0xa>
 8004f0e:	4770      	bx	lr
 8004f10:	f803 1b01 	strb.w	r1, [r3], #1
 8004f14:	e7f9      	b.n	8004f0a <memset+0x4>
	...

08004f18 <siprintf>:
 8004f18:	b40e      	push	{r1, r2, r3}
 8004f1a:	b500      	push	{lr}
 8004f1c:	b09c      	sub	sp, #112	; 0x70
 8004f1e:	ab1d      	add	r3, sp, #116	; 0x74
 8004f20:	9002      	str	r0, [sp, #8]
 8004f22:	9006      	str	r0, [sp, #24]
 8004f24:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004f28:	4809      	ldr	r0, [pc, #36]	; (8004f50 <siprintf+0x38>)
 8004f2a:	9107      	str	r1, [sp, #28]
 8004f2c:	9104      	str	r1, [sp, #16]
 8004f2e:	4909      	ldr	r1, [pc, #36]	; (8004f54 <siprintf+0x3c>)
 8004f30:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f34:	9105      	str	r1, [sp, #20]
 8004f36:	6800      	ldr	r0, [r0, #0]
 8004f38:	9301      	str	r3, [sp, #4]
 8004f3a:	a902      	add	r1, sp, #8
 8004f3c:	f000 f866 	bl	800500c <_svfiprintf_r>
 8004f40:	9b02      	ldr	r3, [sp, #8]
 8004f42:	2200      	movs	r2, #0
 8004f44:	701a      	strb	r2, [r3, #0]
 8004f46:	b01c      	add	sp, #112	; 0x70
 8004f48:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f4c:	b003      	add	sp, #12
 8004f4e:	4770      	bx	lr
 8004f50:	20000010 	.word	0x20000010
 8004f54:	ffff0208 	.word	0xffff0208

08004f58 <__ssputs_r>:
 8004f58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f5c:	688e      	ldr	r6, [r1, #8]
 8004f5e:	429e      	cmp	r6, r3
 8004f60:	4682      	mov	sl, r0
 8004f62:	460c      	mov	r4, r1
 8004f64:	4690      	mov	r8, r2
 8004f66:	4699      	mov	r9, r3
 8004f68:	d837      	bhi.n	8004fda <__ssputs_r+0x82>
 8004f6a:	898a      	ldrh	r2, [r1, #12]
 8004f6c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004f70:	d031      	beq.n	8004fd6 <__ssputs_r+0x7e>
 8004f72:	6825      	ldr	r5, [r4, #0]
 8004f74:	6909      	ldr	r1, [r1, #16]
 8004f76:	1a6f      	subs	r7, r5, r1
 8004f78:	6965      	ldr	r5, [r4, #20]
 8004f7a:	2302      	movs	r3, #2
 8004f7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004f80:	fb95 f5f3 	sdiv	r5, r5, r3
 8004f84:	f109 0301 	add.w	r3, r9, #1
 8004f88:	443b      	add	r3, r7
 8004f8a:	429d      	cmp	r5, r3
 8004f8c:	bf38      	it	cc
 8004f8e:	461d      	movcc	r5, r3
 8004f90:	0553      	lsls	r3, r2, #21
 8004f92:	d530      	bpl.n	8004ff6 <__ssputs_r+0x9e>
 8004f94:	4629      	mov	r1, r5
 8004f96:	f000 fb21 	bl	80055dc <_malloc_r>
 8004f9a:	4606      	mov	r6, r0
 8004f9c:	b950      	cbnz	r0, 8004fb4 <__ssputs_r+0x5c>
 8004f9e:	230c      	movs	r3, #12
 8004fa0:	f8ca 3000 	str.w	r3, [sl]
 8004fa4:	89a3      	ldrh	r3, [r4, #12]
 8004fa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004faa:	81a3      	strh	r3, [r4, #12]
 8004fac:	f04f 30ff 	mov.w	r0, #4294967295
 8004fb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fb4:	463a      	mov	r2, r7
 8004fb6:	6921      	ldr	r1, [r4, #16]
 8004fb8:	f7ff ff9a 	bl	8004ef0 <memcpy>
 8004fbc:	89a3      	ldrh	r3, [r4, #12]
 8004fbe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004fc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fc6:	81a3      	strh	r3, [r4, #12]
 8004fc8:	6126      	str	r6, [r4, #16]
 8004fca:	6165      	str	r5, [r4, #20]
 8004fcc:	443e      	add	r6, r7
 8004fce:	1bed      	subs	r5, r5, r7
 8004fd0:	6026      	str	r6, [r4, #0]
 8004fd2:	60a5      	str	r5, [r4, #8]
 8004fd4:	464e      	mov	r6, r9
 8004fd6:	454e      	cmp	r6, r9
 8004fd8:	d900      	bls.n	8004fdc <__ssputs_r+0x84>
 8004fda:	464e      	mov	r6, r9
 8004fdc:	4632      	mov	r2, r6
 8004fde:	4641      	mov	r1, r8
 8004fe0:	6820      	ldr	r0, [r4, #0]
 8004fe2:	f000 fa93 	bl	800550c <memmove>
 8004fe6:	68a3      	ldr	r3, [r4, #8]
 8004fe8:	1b9b      	subs	r3, r3, r6
 8004fea:	60a3      	str	r3, [r4, #8]
 8004fec:	6823      	ldr	r3, [r4, #0]
 8004fee:	441e      	add	r6, r3
 8004ff0:	6026      	str	r6, [r4, #0]
 8004ff2:	2000      	movs	r0, #0
 8004ff4:	e7dc      	b.n	8004fb0 <__ssputs_r+0x58>
 8004ff6:	462a      	mov	r2, r5
 8004ff8:	f000 fb4a 	bl	8005690 <_realloc_r>
 8004ffc:	4606      	mov	r6, r0
 8004ffe:	2800      	cmp	r0, #0
 8005000:	d1e2      	bne.n	8004fc8 <__ssputs_r+0x70>
 8005002:	6921      	ldr	r1, [r4, #16]
 8005004:	4650      	mov	r0, sl
 8005006:	f000 fa9b 	bl	8005540 <_free_r>
 800500a:	e7c8      	b.n	8004f9e <__ssputs_r+0x46>

0800500c <_svfiprintf_r>:
 800500c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005010:	461d      	mov	r5, r3
 8005012:	898b      	ldrh	r3, [r1, #12]
 8005014:	061f      	lsls	r7, r3, #24
 8005016:	b09d      	sub	sp, #116	; 0x74
 8005018:	4680      	mov	r8, r0
 800501a:	460c      	mov	r4, r1
 800501c:	4616      	mov	r6, r2
 800501e:	d50f      	bpl.n	8005040 <_svfiprintf_r+0x34>
 8005020:	690b      	ldr	r3, [r1, #16]
 8005022:	b96b      	cbnz	r3, 8005040 <_svfiprintf_r+0x34>
 8005024:	2140      	movs	r1, #64	; 0x40
 8005026:	f000 fad9 	bl	80055dc <_malloc_r>
 800502a:	6020      	str	r0, [r4, #0]
 800502c:	6120      	str	r0, [r4, #16]
 800502e:	b928      	cbnz	r0, 800503c <_svfiprintf_r+0x30>
 8005030:	230c      	movs	r3, #12
 8005032:	f8c8 3000 	str.w	r3, [r8]
 8005036:	f04f 30ff 	mov.w	r0, #4294967295
 800503a:	e0c8      	b.n	80051ce <_svfiprintf_r+0x1c2>
 800503c:	2340      	movs	r3, #64	; 0x40
 800503e:	6163      	str	r3, [r4, #20]
 8005040:	2300      	movs	r3, #0
 8005042:	9309      	str	r3, [sp, #36]	; 0x24
 8005044:	2320      	movs	r3, #32
 8005046:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800504a:	2330      	movs	r3, #48	; 0x30
 800504c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005050:	9503      	str	r5, [sp, #12]
 8005052:	f04f 0b01 	mov.w	fp, #1
 8005056:	4637      	mov	r7, r6
 8005058:	463d      	mov	r5, r7
 800505a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800505e:	b10b      	cbz	r3, 8005064 <_svfiprintf_r+0x58>
 8005060:	2b25      	cmp	r3, #37	; 0x25
 8005062:	d13e      	bne.n	80050e2 <_svfiprintf_r+0xd6>
 8005064:	ebb7 0a06 	subs.w	sl, r7, r6
 8005068:	d00b      	beq.n	8005082 <_svfiprintf_r+0x76>
 800506a:	4653      	mov	r3, sl
 800506c:	4632      	mov	r2, r6
 800506e:	4621      	mov	r1, r4
 8005070:	4640      	mov	r0, r8
 8005072:	f7ff ff71 	bl	8004f58 <__ssputs_r>
 8005076:	3001      	adds	r0, #1
 8005078:	f000 80a4 	beq.w	80051c4 <_svfiprintf_r+0x1b8>
 800507c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800507e:	4453      	add	r3, sl
 8005080:	9309      	str	r3, [sp, #36]	; 0x24
 8005082:	783b      	ldrb	r3, [r7, #0]
 8005084:	2b00      	cmp	r3, #0
 8005086:	f000 809d 	beq.w	80051c4 <_svfiprintf_r+0x1b8>
 800508a:	2300      	movs	r3, #0
 800508c:	f04f 32ff 	mov.w	r2, #4294967295
 8005090:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005094:	9304      	str	r3, [sp, #16]
 8005096:	9307      	str	r3, [sp, #28]
 8005098:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800509c:	931a      	str	r3, [sp, #104]	; 0x68
 800509e:	462f      	mov	r7, r5
 80050a0:	2205      	movs	r2, #5
 80050a2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80050a6:	4850      	ldr	r0, [pc, #320]	; (80051e8 <_svfiprintf_r+0x1dc>)
 80050a8:	f7fb f8a2 	bl	80001f0 <memchr>
 80050ac:	9b04      	ldr	r3, [sp, #16]
 80050ae:	b9d0      	cbnz	r0, 80050e6 <_svfiprintf_r+0xda>
 80050b0:	06d9      	lsls	r1, r3, #27
 80050b2:	bf44      	itt	mi
 80050b4:	2220      	movmi	r2, #32
 80050b6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80050ba:	071a      	lsls	r2, r3, #28
 80050bc:	bf44      	itt	mi
 80050be:	222b      	movmi	r2, #43	; 0x2b
 80050c0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80050c4:	782a      	ldrb	r2, [r5, #0]
 80050c6:	2a2a      	cmp	r2, #42	; 0x2a
 80050c8:	d015      	beq.n	80050f6 <_svfiprintf_r+0xea>
 80050ca:	9a07      	ldr	r2, [sp, #28]
 80050cc:	462f      	mov	r7, r5
 80050ce:	2000      	movs	r0, #0
 80050d0:	250a      	movs	r5, #10
 80050d2:	4639      	mov	r1, r7
 80050d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80050d8:	3b30      	subs	r3, #48	; 0x30
 80050da:	2b09      	cmp	r3, #9
 80050dc:	d94d      	bls.n	800517a <_svfiprintf_r+0x16e>
 80050de:	b1b8      	cbz	r0, 8005110 <_svfiprintf_r+0x104>
 80050e0:	e00f      	b.n	8005102 <_svfiprintf_r+0xf6>
 80050e2:	462f      	mov	r7, r5
 80050e4:	e7b8      	b.n	8005058 <_svfiprintf_r+0x4c>
 80050e6:	4a40      	ldr	r2, [pc, #256]	; (80051e8 <_svfiprintf_r+0x1dc>)
 80050e8:	1a80      	subs	r0, r0, r2
 80050ea:	fa0b f000 	lsl.w	r0, fp, r0
 80050ee:	4318      	orrs	r0, r3
 80050f0:	9004      	str	r0, [sp, #16]
 80050f2:	463d      	mov	r5, r7
 80050f4:	e7d3      	b.n	800509e <_svfiprintf_r+0x92>
 80050f6:	9a03      	ldr	r2, [sp, #12]
 80050f8:	1d11      	adds	r1, r2, #4
 80050fa:	6812      	ldr	r2, [r2, #0]
 80050fc:	9103      	str	r1, [sp, #12]
 80050fe:	2a00      	cmp	r2, #0
 8005100:	db01      	blt.n	8005106 <_svfiprintf_r+0xfa>
 8005102:	9207      	str	r2, [sp, #28]
 8005104:	e004      	b.n	8005110 <_svfiprintf_r+0x104>
 8005106:	4252      	negs	r2, r2
 8005108:	f043 0302 	orr.w	r3, r3, #2
 800510c:	9207      	str	r2, [sp, #28]
 800510e:	9304      	str	r3, [sp, #16]
 8005110:	783b      	ldrb	r3, [r7, #0]
 8005112:	2b2e      	cmp	r3, #46	; 0x2e
 8005114:	d10c      	bne.n	8005130 <_svfiprintf_r+0x124>
 8005116:	787b      	ldrb	r3, [r7, #1]
 8005118:	2b2a      	cmp	r3, #42	; 0x2a
 800511a:	d133      	bne.n	8005184 <_svfiprintf_r+0x178>
 800511c:	9b03      	ldr	r3, [sp, #12]
 800511e:	1d1a      	adds	r2, r3, #4
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	9203      	str	r2, [sp, #12]
 8005124:	2b00      	cmp	r3, #0
 8005126:	bfb8      	it	lt
 8005128:	f04f 33ff 	movlt.w	r3, #4294967295
 800512c:	3702      	adds	r7, #2
 800512e:	9305      	str	r3, [sp, #20]
 8005130:	4d2e      	ldr	r5, [pc, #184]	; (80051ec <_svfiprintf_r+0x1e0>)
 8005132:	7839      	ldrb	r1, [r7, #0]
 8005134:	2203      	movs	r2, #3
 8005136:	4628      	mov	r0, r5
 8005138:	f7fb f85a 	bl	80001f0 <memchr>
 800513c:	b138      	cbz	r0, 800514e <_svfiprintf_r+0x142>
 800513e:	2340      	movs	r3, #64	; 0x40
 8005140:	1b40      	subs	r0, r0, r5
 8005142:	fa03 f000 	lsl.w	r0, r3, r0
 8005146:	9b04      	ldr	r3, [sp, #16]
 8005148:	4303      	orrs	r3, r0
 800514a:	3701      	adds	r7, #1
 800514c:	9304      	str	r3, [sp, #16]
 800514e:	7839      	ldrb	r1, [r7, #0]
 8005150:	4827      	ldr	r0, [pc, #156]	; (80051f0 <_svfiprintf_r+0x1e4>)
 8005152:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005156:	2206      	movs	r2, #6
 8005158:	1c7e      	adds	r6, r7, #1
 800515a:	f7fb f849 	bl	80001f0 <memchr>
 800515e:	2800      	cmp	r0, #0
 8005160:	d038      	beq.n	80051d4 <_svfiprintf_r+0x1c8>
 8005162:	4b24      	ldr	r3, [pc, #144]	; (80051f4 <_svfiprintf_r+0x1e8>)
 8005164:	bb13      	cbnz	r3, 80051ac <_svfiprintf_r+0x1a0>
 8005166:	9b03      	ldr	r3, [sp, #12]
 8005168:	3307      	adds	r3, #7
 800516a:	f023 0307 	bic.w	r3, r3, #7
 800516e:	3308      	adds	r3, #8
 8005170:	9303      	str	r3, [sp, #12]
 8005172:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005174:	444b      	add	r3, r9
 8005176:	9309      	str	r3, [sp, #36]	; 0x24
 8005178:	e76d      	b.n	8005056 <_svfiprintf_r+0x4a>
 800517a:	fb05 3202 	mla	r2, r5, r2, r3
 800517e:	2001      	movs	r0, #1
 8005180:	460f      	mov	r7, r1
 8005182:	e7a6      	b.n	80050d2 <_svfiprintf_r+0xc6>
 8005184:	2300      	movs	r3, #0
 8005186:	3701      	adds	r7, #1
 8005188:	9305      	str	r3, [sp, #20]
 800518a:	4619      	mov	r1, r3
 800518c:	250a      	movs	r5, #10
 800518e:	4638      	mov	r0, r7
 8005190:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005194:	3a30      	subs	r2, #48	; 0x30
 8005196:	2a09      	cmp	r2, #9
 8005198:	d903      	bls.n	80051a2 <_svfiprintf_r+0x196>
 800519a:	2b00      	cmp	r3, #0
 800519c:	d0c8      	beq.n	8005130 <_svfiprintf_r+0x124>
 800519e:	9105      	str	r1, [sp, #20]
 80051a0:	e7c6      	b.n	8005130 <_svfiprintf_r+0x124>
 80051a2:	fb05 2101 	mla	r1, r5, r1, r2
 80051a6:	2301      	movs	r3, #1
 80051a8:	4607      	mov	r7, r0
 80051aa:	e7f0      	b.n	800518e <_svfiprintf_r+0x182>
 80051ac:	ab03      	add	r3, sp, #12
 80051ae:	9300      	str	r3, [sp, #0]
 80051b0:	4622      	mov	r2, r4
 80051b2:	4b11      	ldr	r3, [pc, #68]	; (80051f8 <_svfiprintf_r+0x1ec>)
 80051b4:	a904      	add	r1, sp, #16
 80051b6:	4640      	mov	r0, r8
 80051b8:	f3af 8000 	nop.w
 80051bc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80051c0:	4681      	mov	r9, r0
 80051c2:	d1d6      	bne.n	8005172 <_svfiprintf_r+0x166>
 80051c4:	89a3      	ldrh	r3, [r4, #12]
 80051c6:	065b      	lsls	r3, r3, #25
 80051c8:	f53f af35 	bmi.w	8005036 <_svfiprintf_r+0x2a>
 80051cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80051ce:	b01d      	add	sp, #116	; 0x74
 80051d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051d4:	ab03      	add	r3, sp, #12
 80051d6:	9300      	str	r3, [sp, #0]
 80051d8:	4622      	mov	r2, r4
 80051da:	4b07      	ldr	r3, [pc, #28]	; (80051f8 <_svfiprintf_r+0x1ec>)
 80051dc:	a904      	add	r1, sp, #16
 80051de:	4640      	mov	r0, r8
 80051e0:	f000 f882 	bl	80052e8 <_printf_i>
 80051e4:	e7ea      	b.n	80051bc <_svfiprintf_r+0x1b0>
 80051e6:	bf00      	nop
 80051e8:	08005878 	.word	0x08005878
 80051ec:	0800587e 	.word	0x0800587e
 80051f0:	08005882 	.word	0x08005882
 80051f4:	00000000 	.word	0x00000000
 80051f8:	08004f59 	.word	0x08004f59

080051fc <_printf_common>:
 80051fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005200:	4691      	mov	r9, r2
 8005202:	461f      	mov	r7, r3
 8005204:	688a      	ldr	r2, [r1, #8]
 8005206:	690b      	ldr	r3, [r1, #16]
 8005208:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800520c:	4293      	cmp	r3, r2
 800520e:	bfb8      	it	lt
 8005210:	4613      	movlt	r3, r2
 8005212:	f8c9 3000 	str.w	r3, [r9]
 8005216:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800521a:	4606      	mov	r6, r0
 800521c:	460c      	mov	r4, r1
 800521e:	b112      	cbz	r2, 8005226 <_printf_common+0x2a>
 8005220:	3301      	adds	r3, #1
 8005222:	f8c9 3000 	str.w	r3, [r9]
 8005226:	6823      	ldr	r3, [r4, #0]
 8005228:	0699      	lsls	r1, r3, #26
 800522a:	bf42      	ittt	mi
 800522c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005230:	3302      	addmi	r3, #2
 8005232:	f8c9 3000 	strmi.w	r3, [r9]
 8005236:	6825      	ldr	r5, [r4, #0]
 8005238:	f015 0506 	ands.w	r5, r5, #6
 800523c:	d107      	bne.n	800524e <_printf_common+0x52>
 800523e:	f104 0a19 	add.w	sl, r4, #25
 8005242:	68e3      	ldr	r3, [r4, #12]
 8005244:	f8d9 2000 	ldr.w	r2, [r9]
 8005248:	1a9b      	subs	r3, r3, r2
 800524a:	42ab      	cmp	r3, r5
 800524c:	dc28      	bgt.n	80052a0 <_printf_common+0xa4>
 800524e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005252:	6822      	ldr	r2, [r4, #0]
 8005254:	3300      	adds	r3, #0
 8005256:	bf18      	it	ne
 8005258:	2301      	movne	r3, #1
 800525a:	0692      	lsls	r2, r2, #26
 800525c:	d42d      	bmi.n	80052ba <_printf_common+0xbe>
 800525e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005262:	4639      	mov	r1, r7
 8005264:	4630      	mov	r0, r6
 8005266:	47c0      	blx	r8
 8005268:	3001      	adds	r0, #1
 800526a:	d020      	beq.n	80052ae <_printf_common+0xb2>
 800526c:	6823      	ldr	r3, [r4, #0]
 800526e:	68e5      	ldr	r5, [r4, #12]
 8005270:	f8d9 2000 	ldr.w	r2, [r9]
 8005274:	f003 0306 	and.w	r3, r3, #6
 8005278:	2b04      	cmp	r3, #4
 800527a:	bf08      	it	eq
 800527c:	1aad      	subeq	r5, r5, r2
 800527e:	68a3      	ldr	r3, [r4, #8]
 8005280:	6922      	ldr	r2, [r4, #16]
 8005282:	bf0c      	ite	eq
 8005284:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005288:	2500      	movne	r5, #0
 800528a:	4293      	cmp	r3, r2
 800528c:	bfc4      	itt	gt
 800528e:	1a9b      	subgt	r3, r3, r2
 8005290:	18ed      	addgt	r5, r5, r3
 8005292:	f04f 0900 	mov.w	r9, #0
 8005296:	341a      	adds	r4, #26
 8005298:	454d      	cmp	r5, r9
 800529a:	d11a      	bne.n	80052d2 <_printf_common+0xd6>
 800529c:	2000      	movs	r0, #0
 800529e:	e008      	b.n	80052b2 <_printf_common+0xb6>
 80052a0:	2301      	movs	r3, #1
 80052a2:	4652      	mov	r2, sl
 80052a4:	4639      	mov	r1, r7
 80052a6:	4630      	mov	r0, r6
 80052a8:	47c0      	blx	r8
 80052aa:	3001      	adds	r0, #1
 80052ac:	d103      	bne.n	80052b6 <_printf_common+0xba>
 80052ae:	f04f 30ff 	mov.w	r0, #4294967295
 80052b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052b6:	3501      	adds	r5, #1
 80052b8:	e7c3      	b.n	8005242 <_printf_common+0x46>
 80052ba:	18e1      	adds	r1, r4, r3
 80052bc:	1c5a      	adds	r2, r3, #1
 80052be:	2030      	movs	r0, #48	; 0x30
 80052c0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80052c4:	4422      	add	r2, r4
 80052c6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80052ca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80052ce:	3302      	adds	r3, #2
 80052d0:	e7c5      	b.n	800525e <_printf_common+0x62>
 80052d2:	2301      	movs	r3, #1
 80052d4:	4622      	mov	r2, r4
 80052d6:	4639      	mov	r1, r7
 80052d8:	4630      	mov	r0, r6
 80052da:	47c0      	blx	r8
 80052dc:	3001      	adds	r0, #1
 80052de:	d0e6      	beq.n	80052ae <_printf_common+0xb2>
 80052e0:	f109 0901 	add.w	r9, r9, #1
 80052e4:	e7d8      	b.n	8005298 <_printf_common+0x9c>
	...

080052e8 <_printf_i>:
 80052e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80052ec:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80052f0:	460c      	mov	r4, r1
 80052f2:	7e09      	ldrb	r1, [r1, #24]
 80052f4:	b085      	sub	sp, #20
 80052f6:	296e      	cmp	r1, #110	; 0x6e
 80052f8:	4617      	mov	r7, r2
 80052fa:	4606      	mov	r6, r0
 80052fc:	4698      	mov	r8, r3
 80052fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005300:	f000 80b3 	beq.w	800546a <_printf_i+0x182>
 8005304:	d822      	bhi.n	800534c <_printf_i+0x64>
 8005306:	2963      	cmp	r1, #99	; 0x63
 8005308:	d036      	beq.n	8005378 <_printf_i+0x90>
 800530a:	d80a      	bhi.n	8005322 <_printf_i+0x3a>
 800530c:	2900      	cmp	r1, #0
 800530e:	f000 80b9 	beq.w	8005484 <_printf_i+0x19c>
 8005312:	2958      	cmp	r1, #88	; 0x58
 8005314:	f000 8083 	beq.w	800541e <_printf_i+0x136>
 8005318:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800531c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005320:	e032      	b.n	8005388 <_printf_i+0xa0>
 8005322:	2964      	cmp	r1, #100	; 0x64
 8005324:	d001      	beq.n	800532a <_printf_i+0x42>
 8005326:	2969      	cmp	r1, #105	; 0x69
 8005328:	d1f6      	bne.n	8005318 <_printf_i+0x30>
 800532a:	6820      	ldr	r0, [r4, #0]
 800532c:	6813      	ldr	r3, [r2, #0]
 800532e:	0605      	lsls	r5, r0, #24
 8005330:	f103 0104 	add.w	r1, r3, #4
 8005334:	d52a      	bpl.n	800538c <_printf_i+0xa4>
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	6011      	str	r1, [r2, #0]
 800533a:	2b00      	cmp	r3, #0
 800533c:	da03      	bge.n	8005346 <_printf_i+0x5e>
 800533e:	222d      	movs	r2, #45	; 0x2d
 8005340:	425b      	negs	r3, r3
 8005342:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005346:	486f      	ldr	r0, [pc, #444]	; (8005504 <_printf_i+0x21c>)
 8005348:	220a      	movs	r2, #10
 800534a:	e039      	b.n	80053c0 <_printf_i+0xd8>
 800534c:	2973      	cmp	r1, #115	; 0x73
 800534e:	f000 809d 	beq.w	800548c <_printf_i+0x1a4>
 8005352:	d808      	bhi.n	8005366 <_printf_i+0x7e>
 8005354:	296f      	cmp	r1, #111	; 0x6f
 8005356:	d020      	beq.n	800539a <_printf_i+0xb2>
 8005358:	2970      	cmp	r1, #112	; 0x70
 800535a:	d1dd      	bne.n	8005318 <_printf_i+0x30>
 800535c:	6823      	ldr	r3, [r4, #0]
 800535e:	f043 0320 	orr.w	r3, r3, #32
 8005362:	6023      	str	r3, [r4, #0]
 8005364:	e003      	b.n	800536e <_printf_i+0x86>
 8005366:	2975      	cmp	r1, #117	; 0x75
 8005368:	d017      	beq.n	800539a <_printf_i+0xb2>
 800536a:	2978      	cmp	r1, #120	; 0x78
 800536c:	d1d4      	bne.n	8005318 <_printf_i+0x30>
 800536e:	2378      	movs	r3, #120	; 0x78
 8005370:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005374:	4864      	ldr	r0, [pc, #400]	; (8005508 <_printf_i+0x220>)
 8005376:	e055      	b.n	8005424 <_printf_i+0x13c>
 8005378:	6813      	ldr	r3, [r2, #0]
 800537a:	1d19      	adds	r1, r3, #4
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	6011      	str	r1, [r2, #0]
 8005380:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005384:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005388:	2301      	movs	r3, #1
 800538a:	e08c      	b.n	80054a6 <_printf_i+0x1be>
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	6011      	str	r1, [r2, #0]
 8005390:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005394:	bf18      	it	ne
 8005396:	b21b      	sxthne	r3, r3
 8005398:	e7cf      	b.n	800533a <_printf_i+0x52>
 800539a:	6813      	ldr	r3, [r2, #0]
 800539c:	6825      	ldr	r5, [r4, #0]
 800539e:	1d18      	adds	r0, r3, #4
 80053a0:	6010      	str	r0, [r2, #0]
 80053a2:	0628      	lsls	r0, r5, #24
 80053a4:	d501      	bpl.n	80053aa <_printf_i+0xc2>
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	e002      	b.n	80053b0 <_printf_i+0xc8>
 80053aa:	0668      	lsls	r0, r5, #25
 80053ac:	d5fb      	bpl.n	80053a6 <_printf_i+0xbe>
 80053ae:	881b      	ldrh	r3, [r3, #0]
 80053b0:	4854      	ldr	r0, [pc, #336]	; (8005504 <_printf_i+0x21c>)
 80053b2:	296f      	cmp	r1, #111	; 0x6f
 80053b4:	bf14      	ite	ne
 80053b6:	220a      	movne	r2, #10
 80053b8:	2208      	moveq	r2, #8
 80053ba:	2100      	movs	r1, #0
 80053bc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80053c0:	6865      	ldr	r5, [r4, #4]
 80053c2:	60a5      	str	r5, [r4, #8]
 80053c4:	2d00      	cmp	r5, #0
 80053c6:	f2c0 8095 	blt.w	80054f4 <_printf_i+0x20c>
 80053ca:	6821      	ldr	r1, [r4, #0]
 80053cc:	f021 0104 	bic.w	r1, r1, #4
 80053d0:	6021      	str	r1, [r4, #0]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d13d      	bne.n	8005452 <_printf_i+0x16a>
 80053d6:	2d00      	cmp	r5, #0
 80053d8:	f040 808e 	bne.w	80054f8 <_printf_i+0x210>
 80053dc:	4665      	mov	r5, ip
 80053de:	2a08      	cmp	r2, #8
 80053e0:	d10b      	bne.n	80053fa <_printf_i+0x112>
 80053e2:	6823      	ldr	r3, [r4, #0]
 80053e4:	07db      	lsls	r3, r3, #31
 80053e6:	d508      	bpl.n	80053fa <_printf_i+0x112>
 80053e8:	6923      	ldr	r3, [r4, #16]
 80053ea:	6862      	ldr	r2, [r4, #4]
 80053ec:	429a      	cmp	r2, r3
 80053ee:	bfde      	ittt	le
 80053f0:	2330      	movle	r3, #48	; 0x30
 80053f2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80053f6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80053fa:	ebac 0305 	sub.w	r3, ip, r5
 80053fe:	6123      	str	r3, [r4, #16]
 8005400:	f8cd 8000 	str.w	r8, [sp]
 8005404:	463b      	mov	r3, r7
 8005406:	aa03      	add	r2, sp, #12
 8005408:	4621      	mov	r1, r4
 800540a:	4630      	mov	r0, r6
 800540c:	f7ff fef6 	bl	80051fc <_printf_common>
 8005410:	3001      	adds	r0, #1
 8005412:	d14d      	bne.n	80054b0 <_printf_i+0x1c8>
 8005414:	f04f 30ff 	mov.w	r0, #4294967295
 8005418:	b005      	add	sp, #20
 800541a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800541e:	4839      	ldr	r0, [pc, #228]	; (8005504 <_printf_i+0x21c>)
 8005420:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005424:	6813      	ldr	r3, [r2, #0]
 8005426:	6821      	ldr	r1, [r4, #0]
 8005428:	1d1d      	adds	r5, r3, #4
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	6015      	str	r5, [r2, #0]
 800542e:	060a      	lsls	r2, r1, #24
 8005430:	d50b      	bpl.n	800544a <_printf_i+0x162>
 8005432:	07ca      	lsls	r2, r1, #31
 8005434:	bf44      	itt	mi
 8005436:	f041 0120 	orrmi.w	r1, r1, #32
 800543a:	6021      	strmi	r1, [r4, #0]
 800543c:	b91b      	cbnz	r3, 8005446 <_printf_i+0x15e>
 800543e:	6822      	ldr	r2, [r4, #0]
 8005440:	f022 0220 	bic.w	r2, r2, #32
 8005444:	6022      	str	r2, [r4, #0]
 8005446:	2210      	movs	r2, #16
 8005448:	e7b7      	b.n	80053ba <_printf_i+0xd2>
 800544a:	064d      	lsls	r5, r1, #25
 800544c:	bf48      	it	mi
 800544e:	b29b      	uxthmi	r3, r3
 8005450:	e7ef      	b.n	8005432 <_printf_i+0x14a>
 8005452:	4665      	mov	r5, ip
 8005454:	fbb3 f1f2 	udiv	r1, r3, r2
 8005458:	fb02 3311 	mls	r3, r2, r1, r3
 800545c:	5cc3      	ldrb	r3, [r0, r3]
 800545e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005462:	460b      	mov	r3, r1
 8005464:	2900      	cmp	r1, #0
 8005466:	d1f5      	bne.n	8005454 <_printf_i+0x16c>
 8005468:	e7b9      	b.n	80053de <_printf_i+0xf6>
 800546a:	6813      	ldr	r3, [r2, #0]
 800546c:	6825      	ldr	r5, [r4, #0]
 800546e:	6961      	ldr	r1, [r4, #20]
 8005470:	1d18      	adds	r0, r3, #4
 8005472:	6010      	str	r0, [r2, #0]
 8005474:	0628      	lsls	r0, r5, #24
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	d501      	bpl.n	800547e <_printf_i+0x196>
 800547a:	6019      	str	r1, [r3, #0]
 800547c:	e002      	b.n	8005484 <_printf_i+0x19c>
 800547e:	066a      	lsls	r2, r5, #25
 8005480:	d5fb      	bpl.n	800547a <_printf_i+0x192>
 8005482:	8019      	strh	r1, [r3, #0]
 8005484:	2300      	movs	r3, #0
 8005486:	6123      	str	r3, [r4, #16]
 8005488:	4665      	mov	r5, ip
 800548a:	e7b9      	b.n	8005400 <_printf_i+0x118>
 800548c:	6813      	ldr	r3, [r2, #0]
 800548e:	1d19      	adds	r1, r3, #4
 8005490:	6011      	str	r1, [r2, #0]
 8005492:	681d      	ldr	r5, [r3, #0]
 8005494:	6862      	ldr	r2, [r4, #4]
 8005496:	2100      	movs	r1, #0
 8005498:	4628      	mov	r0, r5
 800549a:	f7fa fea9 	bl	80001f0 <memchr>
 800549e:	b108      	cbz	r0, 80054a4 <_printf_i+0x1bc>
 80054a0:	1b40      	subs	r0, r0, r5
 80054a2:	6060      	str	r0, [r4, #4]
 80054a4:	6863      	ldr	r3, [r4, #4]
 80054a6:	6123      	str	r3, [r4, #16]
 80054a8:	2300      	movs	r3, #0
 80054aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054ae:	e7a7      	b.n	8005400 <_printf_i+0x118>
 80054b0:	6923      	ldr	r3, [r4, #16]
 80054b2:	462a      	mov	r2, r5
 80054b4:	4639      	mov	r1, r7
 80054b6:	4630      	mov	r0, r6
 80054b8:	47c0      	blx	r8
 80054ba:	3001      	adds	r0, #1
 80054bc:	d0aa      	beq.n	8005414 <_printf_i+0x12c>
 80054be:	6823      	ldr	r3, [r4, #0]
 80054c0:	079b      	lsls	r3, r3, #30
 80054c2:	d413      	bmi.n	80054ec <_printf_i+0x204>
 80054c4:	68e0      	ldr	r0, [r4, #12]
 80054c6:	9b03      	ldr	r3, [sp, #12]
 80054c8:	4298      	cmp	r0, r3
 80054ca:	bfb8      	it	lt
 80054cc:	4618      	movlt	r0, r3
 80054ce:	e7a3      	b.n	8005418 <_printf_i+0x130>
 80054d0:	2301      	movs	r3, #1
 80054d2:	464a      	mov	r2, r9
 80054d4:	4639      	mov	r1, r7
 80054d6:	4630      	mov	r0, r6
 80054d8:	47c0      	blx	r8
 80054da:	3001      	adds	r0, #1
 80054dc:	d09a      	beq.n	8005414 <_printf_i+0x12c>
 80054de:	3501      	adds	r5, #1
 80054e0:	68e3      	ldr	r3, [r4, #12]
 80054e2:	9a03      	ldr	r2, [sp, #12]
 80054e4:	1a9b      	subs	r3, r3, r2
 80054e6:	42ab      	cmp	r3, r5
 80054e8:	dcf2      	bgt.n	80054d0 <_printf_i+0x1e8>
 80054ea:	e7eb      	b.n	80054c4 <_printf_i+0x1dc>
 80054ec:	2500      	movs	r5, #0
 80054ee:	f104 0919 	add.w	r9, r4, #25
 80054f2:	e7f5      	b.n	80054e0 <_printf_i+0x1f8>
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d1ac      	bne.n	8005452 <_printf_i+0x16a>
 80054f8:	7803      	ldrb	r3, [r0, #0]
 80054fa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80054fe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005502:	e76c      	b.n	80053de <_printf_i+0xf6>
 8005504:	08005889 	.word	0x08005889
 8005508:	0800589a 	.word	0x0800589a

0800550c <memmove>:
 800550c:	4288      	cmp	r0, r1
 800550e:	b510      	push	{r4, lr}
 8005510:	eb01 0302 	add.w	r3, r1, r2
 8005514:	d807      	bhi.n	8005526 <memmove+0x1a>
 8005516:	1e42      	subs	r2, r0, #1
 8005518:	4299      	cmp	r1, r3
 800551a:	d00a      	beq.n	8005532 <memmove+0x26>
 800551c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005520:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005524:	e7f8      	b.n	8005518 <memmove+0xc>
 8005526:	4283      	cmp	r3, r0
 8005528:	d9f5      	bls.n	8005516 <memmove+0xa>
 800552a:	1881      	adds	r1, r0, r2
 800552c:	1ad2      	subs	r2, r2, r3
 800552e:	42d3      	cmn	r3, r2
 8005530:	d100      	bne.n	8005534 <memmove+0x28>
 8005532:	bd10      	pop	{r4, pc}
 8005534:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005538:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800553c:	e7f7      	b.n	800552e <memmove+0x22>
	...

08005540 <_free_r>:
 8005540:	b538      	push	{r3, r4, r5, lr}
 8005542:	4605      	mov	r5, r0
 8005544:	2900      	cmp	r1, #0
 8005546:	d045      	beq.n	80055d4 <_free_r+0x94>
 8005548:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800554c:	1f0c      	subs	r4, r1, #4
 800554e:	2b00      	cmp	r3, #0
 8005550:	bfb8      	it	lt
 8005552:	18e4      	addlt	r4, r4, r3
 8005554:	f000 f8d2 	bl	80056fc <__malloc_lock>
 8005558:	4a1f      	ldr	r2, [pc, #124]	; (80055d8 <_free_r+0x98>)
 800555a:	6813      	ldr	r3, [r2, #0]
 800555c:	4610      	mov	r0, r2
 800555e:	b933      	cbnz	r3, 800556e <_free_r+0x2e>
 8005560:	6063      	str	r3, [r4, #4]
 8005562:	6014      	str	r4, [r2, #0]
 8005564:	4628      	mov	r0, r5
 8005566:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800556a:	f000 b8c8 	b.w	80056fe <__malloc_unlock>
 800556e:	42a3      	cmp	r3, r4
 8005570:	d90c      	bls.n	800558c <_free_r+0x4c>
 8005572:	6821      	ldr	r1, [r4, #0]
 8005574:	1862      	adds	r2, r4, r1
 8005576:	4293      	cmp	r3, r2
 8005578:	bf04      	itt	eq
 800557a:	681a      	ldreq	r2, [r3, #0]
 800557c:	685b      	ldreq	r3, [r3, #4]
 800557e:	6063      	str	r3, [r4, #4]
 8005580:	bf04      	itt	eq
 8005582:	1852      	addeq	r2, r2, r1
 8005584:	6022      	streq	r2, [r4, #0]
 8005586:	6004      	str	r4, [r0, #0]
 8005588:	e7ec      	b.n	8005564 <_free_r+0x24>
 800558a:	4613      	mov	r3, r2
 800558c:	685a      	ldr	r2, [r3, #4]
 800558e:	b10a      	cbz	r2, 8005594 <_free_r+0x54>
 8005590:	42a2      	cmp	r2, r4
 8005592:	d9fa      	bls.n	800558a <_free_r+0x4a>
 8005594:	6819      	ldr	r1, [r3, #0]
 8005596:	1858      	adds	r0, r3, r1
 8005598:	42a0      	cmp	r0, r4
 800559a:	d10b      	bne.n	80055b4 <_free_r+0x74>
 800559c:	6820      	ldr	r0, [r4, #0]
 800559e:	4401      	add	r1, r0
 80055a0:	1858      	adds	r0, r3, r1
 80055a2:	4282      	cmp	r2, r0
 80055a4:	6019      	str	r1, [r3, #0]
 80055a6:	d1dd      	bne.n	8005564 <_free_r+0x24>
 80055a8:	6810      	ldr	r0, [r2, #0]
 80055aa:	6852      	ldr	r2, [r2, #4]
 80055ac:	605a      	str	r2, [r3, #4]
 80055ae:	4401      	add	r1, r0
 80055b0:	6019      	str	r1, [r3, #0]
 80055b2:	e7d7      	b.n	8005564 <_free_r+0x24>
 80055b4:	d902      	bls.n	80055bc <_free_r+0x7c>
 80055b6:	230c      	movs	r3, #12
 80055b8:	602b      	str	r3, [r5, #0]
 80055ba:	e7d3      	b.n	8005564 <_free_r+0x24>
 80055bc:	6820      	ldr	r0, [r4, #0]
 80055be:	1821      	adds	r1, r4, r0
 80055c0:	428a      	cmp	r2, r1
 80055c2:	bf04      	itt	eq
 80055c4:	6811      	ldreq	r1, [r2, #0]
 80055c6:	6852      	ldreq	r2, [r2, #4]
 80055c8:	6062      	str	r2, [r4, #4]
 80055ca:	bf04      	itt	eq
 80055cc:	1809      	addeq	r1, r1, r0
 80055ce:	6021      	streq	r1, [r4, #0]
 80055d0:	605c      	str	r4, [r3, #4]
 80055d2:	e7c7      	b.n	8005564 <_free_r+0x24>
 80055d4:	bd38      	pop	{r3, r4, r5, pc}
 80055d6:	bf00      	nop
 80055d8:	20004034 	.word	0x20004034

080055dc <_malloc_r>:
 80055dc:	b570      	push	{r4, r5, r6, lr}
 80055de:	1ccd      	adds	r5, r1, #3
 80055e0:	f025 0503 	bic.w	r5, r5, #3
 80055e4:	3508      	adds	r5, #8
 80055e6:	2d0c      	cmp	r5, #12
 80055e8:	bf38      	it	cc
 80055ea:	250c      	movcc	r5, #12
 80055ec:	2d00      	cmp	r5, #0
 80055ee:	4606      	mov	r6, r0
 80055f0:	db01      	blt.n	80055f6 <_malloc_r+0x1a>
 80055f2:	42a9      	cmp	r1, r5
 80055f4:	d903      	bls.n	80055fe <_malloc_r+0x22>
 80055f6:	230c      	movs	r3, #12
 80055f8:	6033      	str	r3, [r6, #0]
 80055fa:	2000      	movs	r0, #0
 80055fc:	bd70      	pop	{r4, r5, r6, pc}
 80055fe:	f000 f87d 	bl	80056fc <__malloc_lock>
 8005602:	4a21      	ldr	r2, [pc, #132]	; (8005688 <_malloc_r+0xac>)
 8005604:	6814      	ldr	r4, [r2, #0]
 8005606:	4621      	mov	r1, r4
 8005608:	b991      	cbnz	r1, 8005630 <_malloc_r+0x54>
 800560a:	4c20      	ldr	r4, [pc, #128]	; (800568c <_malloc_r+0xb0>)
 800560c:	6823      	ldr	r3, [r4, #0]
 800560e:	b91b      	cbnz	r3, 8005618 <_malloc_r+0x3c>
 8005610:	4630      	mov	r0, r6
 8005612:	f000 f863 	bl	80056dc <_sbrk_r>
 8005616:	6020      	str	r0, [r4, #0]
 8005618:	4629      	mov	r1, r5
 800561a:	4630      	mov	r0, r6
 800561c:	f000 f85e 	bl	80056dc <_sbrk_r>
 8005620:	1c43      	adds	r3, r0, #1
 8005622:	d124      	bne.n	800566e <_malloc_r+0x92>
 8005624:	230c      	movs	r3, #12
 8005626:	6033      	str	r3, [r6, #0]
 8005628:	4630      	mov	r0, r6
 800562a:	f000 f868 	bl	80056fe <__malloc_unlock>
 800562e:	e7e4      	b.n	80055fa <_malloc_r+0x1e>
 8005630:	680b      	ldr	r3, [r1, #0]
 8005632:	1b5b      	subs	r3, r3, r5
 8005634:	d418      	bmi.n	8005668 <_malloc_r+0x8c>
 8005636:	2b0b      	cmp	r3, #11
 8005638:	d90f      	bls.n	800565a <_malloc_r+0x7e>
 800563a:	600b      	str	r3, [r1, #0]
 800563c:	50cd      	str	r5, [r1, r3]
 800563e:	18cc      	adds	r4, r1, r3
 8005640:	4630      	mov	r0, r6
 8005642:	f000 f85c 	bl	80056fe <__malloc_unlock>
 8005646:	f104 000b 	add.w	r0, r4, #11
 800564a:	1d23      	adds	r3, r4, #4
 800564c:	f020 0007 	bic.w	r0, r0, #7
 8005650:	1ac3      	subs	r3, r0, r3
 8005652:	d0d3      	beq.n	80055fc <_malloc_r+0x20>
 8005654:	425a      	negs	r2, r3
 8005656:	50e2      	str	r2, [r4, r3]
 8005658:	e7d0      	b.n	80055fc <_malloc_r+0x20>
 800565a:	428c      	cmp	r4, r1
 800565c:	684b      	ldr	r3, [r1, #4]
 800565e:	bf16      	itet	ne
 8005660:	6063      	strne	r3, [r4, #4]
 8005662:	6013      	streq	r3, [r2, #0]
 8005664:	460c      	movne	r4, r1
 8005666:	e7eb      	b.n	8005640 <_malloc_r+0x64>
 8005668:	460c      	mov	r4, r1
 800566a:	6849      	ldr	r1, [r1, #4]
 800566c:	e7cc      	b.n	8005608 <_malloc_r+0x2c>
 800566e:	1cc4      	adds	r4, r0, #3
 8005670:	f024 0403 	bic.w	r4, r4, #3
 8005674:	42a0      	cmp	r0, r4
 8005676:	d005      	beq.n	8005684 <_malloc_r+0xa8>
 8005678:	1a21      	subs	r1, r4, r0
 800567a:	4630      	mov	r0, r6
 800567c:	f000 f82e 	bl	80056dc <_sbrk_r>
 8005680:	3001      	adds	r0, #1
 8005682:	d0cf      	beq.n	8005624 <_malloc_r+0x48>
 8005684:	6025      	str	r5, [r4, #0]
 8005686:	e7db      	b.n	8005640 <_malloc_r+0x64>
 8005688:	20004034 	.word	0x20004034
 800568c:	20004038 	.word	0x20004038

08005690 <_realloc_r>:
 8005690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005692:	4607      	mov	r7, r0
 8005694:	4614      	mov	r4, r2
 8005696:	460e      	mov	r6, r1
 8005698:	b921      	cbnz	r1, 80056a4 <_realloc_r+0x14>
 800569a:	4611      	mov	r1, r2
 800569c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80056a0:	f7ff bf9c 	b.w	80055dc <_malloc_r>
 80056a4:	b922      	cbnz	r2, 80056b0 <_realloc_r+0x20>
 80056a6:	f7ff ff4b 	bl	8005540 <_free_r>
 80056aa:	4625      	mov	r5, r4
 80056ac:	4628      	mov	r0, r5
 80056ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056b0:	f000 f826 	bl	8005700 <_malloc_usable_size_r>
 80056b4:	42a0      	cmp	r0, r4
 80056b6:	d20f      	bcs.n	80056d8 <_realloc_r+0x48>
 80056b8:	4621      	mov	r1, r4
 80056ba:	4638      	mov	r0, r7
 80056bc:	f7ff ff8e 	bl	80055dc <_malloc_r>
 80056c0:	4605      	mov	r5, r0
 80056c2:	2800      	cmp	r0, #0
 80056c4:	d0f2      	beq.n	80056ac <_realloc_r+0x1c>
 80056c6:	4631      	mov	r1, r6
 80056c8:	4622      	mov	r2, r4
 80056ca:	f7ff fc11 	bl	8004ef0 <memcpy>
 80056ce:	4631      	mov	r1, r6
 80056d0:	4638      	mov	r0, r7
 80056d2:	f7ff ff35 	bl	8005540 <_free_r>
 80056d6:	e7e9      	b.n	80056ac <_realloc_r+0x1c>
 80056d8:	4635      	mov	r5, r6
 80056da:	e7e7      	b.n	80056ac <_realloc_r+0x1c>

080056dc <_sbrk_r>:
 80056dc:	b538      	push	{r3, r4, r5, lr}
 80056de:	4c06      	ldr	r4, [pc, #24]	; (80056f8 <_sbrk_r+0x1c>)
 80056e0:	2300      	movs	r3, #0
 80056e2:	4605      	mov	r5, r0
 80056e4:	4608      	mov	r0, r1
 80056e6:	6023      	str	r3, [r4, #0]
 80056e8:	f7fb face 	bl	8000c88 <_sbrk>
 80056ec:	1c43      	adds	r3, r0, #1
 80056ee:	d102      	bne.n	80056f6 <_sbrk_r+0x1a>
 80056f0:	6823      	ldr	r3, [r4, #0]
 80056f2:	b103      	cbz	r3, 80056f6 <_sbrk_r+0x1a>
 80056f4:	602b      	str	r3, [r5, #0]
 80056f6:	bd38      	pop	{r3, r4, r5, pc}
 80056f8:	200040cc 	.word	0x200040cc

080056fc <__malloc_lock>:
 80056fc:	4770      	bx	lr

080056fe <__malloc_unlock>:
 80056fe:	4770      	bx	lr

08005700 <_malloc_usable_size_r>:
 8005700:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005704:	1f18      	subs	r0, r3, #4
 8005706:	2b00      	cmp	r3, #0
 8005708:	bfbc      	itt	lt
 800570a:	580b      	ldrlt	r3, [r1, r0]
 800570c:	18c0      	addlt	r0, r0, r3
 800570e:	4770      	bx	lr

08005710 <_init>:
 8005710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005712:	bf00      	nop
 8005714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005716:	bc08      	pop	{r3}
 8005718:	469e      	mov	lr, r3
 800571a:	4770      	bx	lr

0800571c <_fini>:
 800571c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800571e:	bf00      	nop
 8005720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005722:	bc08      	pop	{r3}
 8005724:	469e      	mov	lr, r3
 8005726:	4770      	bx	lr
